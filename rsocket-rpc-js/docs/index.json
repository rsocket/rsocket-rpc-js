[
  {
    "__docId__": 1,
    "kind": "external",
    "name": "Infinity",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity",
    "memberof": "packages/.external-ecmascript.js",
    "static": true,
    "longname": "packages/.external-ecmascript.js~Infinity",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 2,
    "kind": "external",
    "name": "NaN",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN",
    "memberof": "packages/.external-ecmascript.js",
    "static": true,
    "longname": "packages/.external-ecmascript.js~NaN",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 3,
    "kind": "external",
    "name": "undefined",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",
    "memberof": "packages/.external-ecmascript.js",
    "static": true,
    "longname": "packages/.external-ecmascript.js~undefined",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 4,
    "kind": "external",
    "name": "null",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null",
    "memberof": "packages/.external-ecmascript.js",
    "static": true,
    "longname": "packages/.external-ecmascript.js~null",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 5,
    "kind": "external",
    "name": "Object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "packages/.external-ecmascript.js",
    "static": true,
    "longname": "packages/.external-ecmascript.js~Object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 6,
    "kind": "external",
    "name": "object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "packages/.external-ecmascript.js",
    "static": true,
    "longname": "packages/.external-ecmascript.js~object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 7,
    "kind": "external",
    "name": "Function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "packages/.external-ecmascript.js",
    "static": true,
    "longname": "packages/.external-ecmascript.js~Function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 8,
    "kind": "external",
    "name": "function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "packages/.external-ecmascript.js",
    "static": true,
    "longname": "packages/.external-ecmascript.js~function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 9,
    "kind": "external",
    "name": "Boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "packages/.external-ecmascript.js",
    "static": true,
    "longname": "packages/.external-ecmascript.js~Boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 10,
    "kind": "external",
    "name": "boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "packages/.external-ecmascript.js",
    "static": true,
    "longname": "packages/.external-ecmascript.js~boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 11,
    "kind": "external",
    "name": "Symbol",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol",
    "memberof": "packages/.external-ecmascript.js",
    "static": true,
    "longname": "packages/.external-ecmascript.js~Symbol",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 12,
    "kind": "external",
    "name": "Error",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error",
    "memberof": "packages/.external-ecmascript.js",
    "static": true,
    "longname": "packages/.external-ecmascript.js~Error",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 13,
    "kind": "external",
    "name": "EvalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError",
    "memberof": "packages/.external-ecmascript.js",
    "static": true,
    "longname": "packages/.external-ecmascript.js~EvalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 14,
    "kind": "external",
    "name": "InternalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError",
    "memberof": "packages/.external-ecmascript.js",
    "static": true,
    "longname": "packages/.external-ecmascript.js~InternalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 15,
    "kind": "external",
    "name": "RangeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError",
    "memberof": "packages/.external-ecmascript.js",
    "static": true,
    "longname": "packages/.external-ecmascript.js~RangeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 16,
    "kind": "external",
    "name": "ReferenceError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError",
    "memberof": "packages/.external-ecmascript.js",
    "static": true,
    "longname": "packages/.external-ecmascript.js~ReferenceError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 17,
    "kind": "external",
    "name": "SyntaxError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError",
    "memberof": "packages/.external-ecmascript.js",
    "static": true,
    "longname": "packages/.external-ecmascript.js~SyntaxError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 18,
    "kind": "external",
    "name": "TypeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError",
    "memberof": "packages/.external-ecmascript.js",
    "static": true,
    "longname": "packages/.external-ecmascript.js~TypeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 19,
    "kind": "external",
    "name": "URIError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError",
    "memberof": "packages/.external-ecmascript.js",
    "static": true,
    "longname": "packages/.external-ecmascript.js~URIError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 20,
    "kind": "external",
    "name": "Number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "packages/.external-ecmascript.js",
    "static": true,
    "longname": "packages/.external-ecmascript.js~Number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 21,
    "kind": "external",
    "name": "number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "packages/.external-ecmascript.js",
    "static": true,
    "longname": "packages/.external-ecmascript.js~number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 22,
    "kind": "external",
    "name": "Date",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date",
    "memberof": "packages/.external-ecmascript.js",
    "static": true,
    "longname": "packages/.external-ecmascript.js~Date",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 23,
    "kind": "external",
    "name": "String",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "packages/.external-ecmascript.js",
    "static": true,
    "longname": "packages/.external-ecmascript.js~String",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 24,
    "kind": "external",
    "name": "string",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "packages/.external-ecmascript.js",
    "static": true,
    "longname": "packages/.external-ecmascript.js~string",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 25,
    "kind": "external",
    "name": "RegExp",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",
    "memberof": "packages/.external-ecmascript.js",
    "static": true,
    "longname": "packages/.external-ecmascript.js~RegExp",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 26,
    "kind": "external",
    "name": "Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
    "memberof": "packages/.external-ecmascript.js",
    "static": true,
    "longname": "packages/.external-ecmascript.js~Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 27,
    "kind": "external",
    "name": "Int8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array",
    "memberof": "packages/.external-ecmascript.js",
    "static": true,
    "longname": "packages/.external-ecmascript.js~Int8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 28,
    "kind": "external",
    "name": "Uint8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array",
    "memberof": "packages/.external-ecmascript.js",
    "static": true,
    "longname": "packages/.external-ecmascript.js~Uint8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 29,
    "kind": "external",
    "name": "Uint8ClampedArray",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray",
    "memberof": "packages/.external-ecmascript.js",
    "static": true,
    "longname": "packages/.external-ecmascript.js~Uint8ClampedArray",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 30,
    "kind": "external",
    "name": "Int16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array",
    "memberof": "packages/.external-ecmascript.js",
    "static": true,
    "longname": "packages/.external-ecmascript.js~Int16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 31,
    "kind": "external",
    "name": "Uint16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array",
    "memberof": "packages/.external-ecmascript.js",
    "static": true,
    "longname": "packages/.external-ecmascript.js~Uint16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 32,
    "kind": "external",
    "name": "Int32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array",
    "memberof": "packages/.external-ecmascript.js",
    "static": true,
    "longname": "packages/.external-ecmascript.js~Int32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 33,
    "kind": "external",
    "name": "Uint32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array",
    "memberof": "packages/.external-ecmascript.js",
    "static": true,
    "longname": "packages/.external-ecmascript.js~Uint32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 34,
    "kind": "external",
    "name": "Float32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array",
    "memberof": "packages/.external-ecmascript.js",
    "static": true,
    "longname": "packages/.external-ecmascript.js~Float32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 35,
    "kind": "external",
    "name": "Float64Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array",
    "memberof": "packages/.external-ecmascript.js",
    "static": true,
    "longname": "packages/.external-ecmascript.js~Float64Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 36,
    "kind": "external",
    "name": "Map",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",
    "memberof": "packages/.external-ecmascript.js",
    "static": true,
    "longname": "packages/.external-ecmascript.js~Map",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 37,
    "kind": "external",
    "name": "Set",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",
    "memberof": "packages/.external-ecmascript.js",
    "static": true,
    "longname": "packages/.external-ecmascript.js~Set",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 38,
    "kind": "external",
    "name": "WeakMap",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",
    "memberof": "packages/.external-ecmascript.js",
    "static": true,
    "longname": "packages/.external-ecmascript.js~WeakMap",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 39,
    "kind": "external",
    "name": "WeakSet",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet",
    "memberof": "packages/.external-ecmascript.js",
    "static": true,
    "longname": "packages/.external-ecmascript.js~WeakSet",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 40,
    "kind": "external",
    "name": "ArrayBuffer",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",
    "memberof": "packages/.external-ecmascript.js",
    "static": true,
    "longname": "packages/.external-ecmascript.js~ArrayBuffer",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 41,
    "kind": "external",
    "name": "DataView",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",
    "memberof": "packages/.external-ecmascript.js",
    "static": true,
    "longname": "packages/.external-ecmascript.js~DataView",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 42,
    "kind": "external",
    "name": "JSON",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON",
    "memberof": "packages/.external-ecmascript.js",
    "static": true,
    "longname": "packages/.external-ecmascript.js~JSON",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 43,
    "kind": "external",
    "name": "Promise",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
    "memberof": "packages/.external-ecmascript.js",
    "static": true,
    "longname": "packages/.external-ecmascript.js~Promise",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 44,
    "kind": "external",
    "name": "Generator",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",
    "memberof": "packages/.external-ecmascript.js",
    "static": true,
    "longname": "packages/.external-ecmascript.js~Generator",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 45,
    "kind": "external",
    "name": "GeneratorFunction",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction",
    "memberof": "packages/.external-ecmascript.js",
    "static": true,
    "longname": "packages/.external-ecmascript.js~GeneratorFunction",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 46,
    "kind": "external",
    "name": "Reflect",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect",
    "memberof": "packages/.external-ecmascript.js",
    "static": true,
    "longname": "packages/.external-ecmascript.js~Reflect",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 47,
    "kind": "external",
    "name": "Proxy",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
    "memberof": "packages/.external-ecmascript.js",
    "static": true,
    "longname": "packages/.external-ecmascript.js~Proxy",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 48,
    "kind": "file",
    "name": "packages/core/src/QueuingFlowableProcessor.js",
    "content": "/**\n * @name QueuingFlowableProcessor.js\n * @fileoverview Defines the {@link QueuingFlowableProcessor} class.\n *\n * @requires NPM:rsocket-types\n * @exports QueuingFlowableProcessor\n */\n\n/**\n * An asynchronous, pull-based stream of values. Call the\n * {@link IPublisher#subscribe} method to generate a call to the subscriber's\n * {@link onSubscribe} method with a {@link Subscription} object that has two\n * methods: {@link Subscription#cancel} and {@link Subscription#request}.\n *\n * @see https://github.com/rsocket/rsocket-js/blob/master/packages/rsocket-types/src/ReactiveStreamTypes.js\n * @interface IPublisher\n */\n/**\n * A version of the {@link ISubscriber} interface in which the methods are\n * optional, so that you may elect to only implement a subset of them.\n *\n * @see https://github.com/rsocket/rsocket-js/blob/master/packages/rsocket-types/src/ReactiveStreamTypes.js\n * @interface IPartialSubscriber\n */\n/**\n * A handler for values provided by a Publisher.\n * @see https://github.com/rsocket/rsocket-js/blob/master/packages/rsocket-types/src/ReactiveStreamTypes.js\n * @interface ISubscriber\n */\n/**\n * An underlying source of values for a Publisher.\n * @see https://github.com/rsocket/rsocket-js/blob/master/packages/rsocket-types/src/ReactiveStreamTypes.js\n * @external {ISubscription} https://github.com/rsocket/rsocket-js/blob/master/packages/rsocket-types/src/ReactiveStreamTypes.js\n */\nimport type {\n  IPublisher,\n  ISubscriber,\n  IPartialSubscriber,\n  ISubscription,\n} from 'rsocket-types';\n\n/**\n * MAX_REQUEST_N (from QueuingFlowableProcessor.js). If no {@link capacity} is\n * passed to the {@link QueuingFlowableProcessor#constructor}, this value will\n * be used as the capacity (the maximum number of items in the backlog queue).\n * This effectively signals that you want an unlimited number of items from the\n * source Flowable.\n *\n * @constant\n * @type {number}\n */\nconst MAX_REQUEST_N = 0x7fffffff; // uint31\n\n/**\n * A {@link QueuingFlowableProcessor} is an intermediary between a Flowable\n * producer and a subscriber. To the producer, it behaves as a greedy subscriber\n * (that is, one that {@link request}s a large number of emissions immediately).\n * To the subscriber, it behaves as a {@link Flowable}.\n *\n * This allows the producer to generate and emit items at its own fast pace, while\n * the end subscriber requests them at its own slow pace. In between, the\n * {@link QueuingFlowableProcessor} queues up the backlog of items.\n */\nexport default class QueuingFlowableProcessor<T>\n  implements IPublisher, ISubscriber, ISubscription {\n  _once: boolean;\n  _actual: Subscriber<T>;\n  _requested: number;\n  _capacity: number;\n  _queue: T[];\n  _wip: number;\n  _cancelled: boolean;\n  _done: boolean;\n  _error: ?Error;\n\n  /**\n   * @param {?number} [capacity] - the maximum size of the backlog queue of\n   * items this {@link QueuingFlowableProcessor} will maintain (default =\n   * {@link MAX_REQUEST_N}). If this queue size is exceeded, the\n   * {@link QueuingFlowableProcessor} will begin to drop incoming items from the\n   * producer.\n   */\n  constructor(capacity?: number) {\n    this._once = false;\n    this._requested = 0;\n    /** @type {Subscriber<T>} */\n    this._actual = null;\n    /** @type {?Error} */\n    this._error = null;\n    this._done = false;\n    this._wip = 0;\n    this._cancelled = false;\n    /** @type {number} */\n    this._capacity = capacity;\n    /** @type {T[]} */\n    this._queue = [];\n    /** @type {function[]} */\n    this._transformers = [];\n  }\n\n  /**\n   * The subscriber to this {@link QueuingFlowableProcessor} subscribes by calling\n   * this method.\n   *\n   * @param {Subscriber<T>} s - an object that implements the Subscriber methods\n   *   this {@link QueuingFlowableProcessor} will call to pass along messages\n   *   from the Flowable producer.\n   * @throws {Error} if a Subscriber is already subscribed to this\n   *   {@link QueuingFlowableProcessor}\n   */\n  subscribe(s: Subscriber<T>) {\n    if (!this._once) {\n      this._once = true;\n      this._actual = s;\n      s.onSubscribe(this);\n    } else {\n      throw new Error('Only one Subscriber allowed');\n    }\n  }\n\n  /**\n   * When the {@link QueuingFlowableProcessor} gets an {@link onSubscribe} call\n   * from the {@link Flowable} producer, it requests that the {@link Flowable}\n   * begin sending it items: either {@link capacity} items, if the capacity was\n   * set during the call to {@link QueuingFlowableProcessor#constructor}, or\n   * {@link MAX_REQUEST_N} items (effectively unlimited).\n   *\n   * @param {ISubscription} s - the subscription from the source {@link Flowable}\n   */\n  onSubscribe(s: ISubscription) {\n    if (this._done) {\n      s.cancel();\n    } else {\n      s.request(this._capacity || MAX_REQUEST_N);\n    }\n  }\n\n  /**\n   * The {@link Flowable} producer calls this method to add an item to the queue\n   * of this {@link QueuingFlowableProcessor} for later emission to its\n   * subscriber.\n   *\n   * @param {T} t - the item to add\n   * @throws {Error} if {@link t} is null. Flowables are not permitted to emit\n   *   null values.\n   */\n  onNext(t: T) {\n    if (t === null) {\n      throw new Error('t is null');\n    }\n    if (!this._capacity || this._queue.length < this._capacity) {\n      this._queue.push(t);\n    }\n    this.drain();\n  }\n\n  /**\n   * The {@link Flowable} producer calls this method to signal to this\n   * {@link QueuingFlowableProcessor} that the producer has encountered an error.\n   * The {@link QueuingFlowableProcessor} will pass this error on to its\n   * subscriber after it has finished sending the remaining items in its queue.\n   *\n   * @param {Error} t - the specific error\n   */\n  onError(t: Error) {\n    if (t === null) {\n      throw new Error('t is null');\n    }\n    this._error = t;\n    this._done = true;\n    this.drain();\n  }\n\n  /**\n   * The {@link Flowable} producer calls this method to signal to this\n   * {@link QueuingFlowableProcessor} that the producer has finished emitting\n   * items. The {@link QueuingFlowableProcessor} will pass this message on to its\n   * subscriber after it has finished sending the remaining items in its queue.\n   */\n  onComplete() {\n    this._done = true;\n    this.drain();\n  }\n\n  /**\n   * The subscriber to this {@link QueuingFlowableProcessor} calls this method to\n   * request a certain number of additional items.\n   *\n   * @example <caption>Note that requests are additive:</caption>\n   * // this is equivalent to request(5):\n   * myQFP.request(2);\n   * myQFP.request(3);\n   *\n   * @param {number} n - the number of items to request\n   * @throws {Error} if {@link n} is zero or negative\n   */\n  request(n: number) {\n    if (n > 0) {\n      this._requested += n;\n      this.drain();\n    } else {\n      throw new Error('Invalid N for request, must be > 0: ' + n);\n    }\n  }\n\n  /**\n   * The subscriber to this {@link QueuingFlowableProcessor} calls this method to\n   * indicate that it wants no more items and that the\n   * {@link QueuingFlowableProcessor} can stop work and empty its queue.\n   */\n  cancel() {\n    this._cancelled = true;\n    if (this._wip++ === 0) {\n      this._actual = null;\n      this._queue = [];\n    }\n  }\n\n  /**\n   * Add a mapping function that modifies each emission from the {@link Flowable}\n   * producer before emitting it from the {@link QueuingFlowableProcessor}. Note\n   * that you can call this multiple times to add multiple mapping functions,\n   * each of which will operate on the outputs of its predecessor.\n   *\n   * @param {function} transformer - a transformation function that accepts an\n   *   item emitted by the {@link Flowable} producer and returns an item\n   *   expected by the subscriber or by the next transformer\n   * @return {QueuingFlowableProcessor} this same processor, modified with the\n   *   transformation function\n   */\n  map(transformer) {\n    this._transformers.push(transformer);\n    return this;\n  }\n\n  /**\n   * Drain the existing queue of items that are ready for emission by the\n   * {@link QueuingFlowableProcessor} by emitting them to its subscriber. This\n   * is typically called implicitly by other methods of the\n   * {@link QueuingFlowableProcessor}, not explicitly by the producer or\n   * subscriber.\n   */\n  drain() {\n    if (this._actual == null) {\n      return;\n    }\n    if (this._wip++ !== 0) {\n      return;\n    }\n\n    const missed = 1;\n\n    for (;;) {\n      const r = this._requested;\n      let e = 0;\n\n      while (e !== r) {\n        if (this._cancelled) {\n          this._actual = null;\n          this._queue = [];\n          return;\n        }\n\n        const d = this._done;\n        const v = this._queue.shift();\n        const empty = v == null;\n\n        if (d && empty) {\n          if (this._actual != null) {\n            const ex = this._error;\n            if (ex != null) {\n              this._actual.onError(ex);\n            } else {\n              this._actual.onComplete();\n            }\n            this._actual = null;\n          }\n          return;\n        }\n\n        if (empty) {\n          break;\n        }\n\n        if (this._actual != null) {\n          const transformedV = this._transformers.reduce(\n            (interim, xform) => xform(interim),\n            v,\n          );\n          this._actual.onNext(transformedV);\n        }\n\n        e++;\n      }\n\n      if (e == r) {\n        if (this._cancelled) {\n          this._actual = null;\n          this._queue = [];\n          return;\n        }\n        const d = this._done;\n        const empty = this._queue.length === 0;\n\n        if (d && empty) {\n          if (this._actual != null) {\n            const ex = this._error;\n            if (ex != null) {\n              this._actual.onError(ex);\n            } else {\n              this._actual.onComplete();\n            }\n            this._actual = null;\n          }\n          return;\n        }\n      }\n\n      if (e != 0) {\n        this._requested -= e;\n      }\n\n      const m = this._wip - missed;\n      this._wip = m;\n      if (m == 0) {\n        break;\n      }\n    }\n  }\n}\n",
    "static": true,
    "longname": "/home/dgross/Netifi/rsocket-rpc-js/rsocket-rpc-js/packages/core/src/QueuingFlowableProcessor.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 49,
    "kind": "variable",
    "name": "MAX_REQUEST_N",
    "memberof": "packages/core/src/QueuingFlowableProcessor.js",
    "static": true,
    "longname": "packages/core/src/QueuingFlowableProcessor.js~MAX_REQUEST_N",
    "access": "public",
    "export": false,
    "importPath": "./packages/core/src/QueuingFlowableProcessor.js",
    "importStyle": null,
    "description": "MAX_REQUEST_N (from QueuingFlowableProcessor.js). If no {@link capacity} is\npassed to the {@link QueuingFlowableProcessor#constructor}, this value will\nbe used as the capacity (the maximum number of items in the backlog queue).\nThis effectively signals that you want an unlimited number of items from the\nsource Flowable.",
    "lineNumber": 13,
    "unknown": [
      {
        "tagName": "@constant",
        "tagValue": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 50,
    "kind": "external",
    "name": "ISubscription",
    "externalLink": "https://github.com/rsocket/rsocket-js/blob/master/packages/rsocket-types/src/ReactiveStreamTypes.js",
    "memberof": "packages/core/src/QueuingFlowableProcessor.js",
    "static": true,
    "longname": "packages/core/src/QueuingFlowableProcessor.js~ISubscription",
    "access": "public",
    "description": "An underlying source of values for a Publisher.",
    "see": [
      "https://github.com/rsocket/rsocket-js/blob/master/packages/rsocket-types/src/ReactiveStreamTypes.js"
    ],
    "lineNumber": 59
  },
  {
    "__docId__": 51,
    "kind": "file",
    "name": "packages/core/src/RequestHandlingRSocket.js",
    "content": "/**\n * @name RequestHandlingRSocket.js\n * @fileoverview Defines the {@link RequestHandlingRSocket} class.\n * @copyright Copyright (c) 2017-present, Netifi Inc.\n * @license Apache-2.0\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @flow\n *\n * @requires NPM:rsocket-types\n * @requires NPM:rsocket-flowable\n * @requires NPM:rsocket-rps-frames\n * @requires SwitchTransformOperator\n * @exports RequestHandlingRSocket\n */\n\nimport type {Responder, Payload} from 'rsocket-types';\n\nimport {Flowable, Single} from 'rsocket-flowable';\n\nimport {getService} from 'rsocket-rpc-frames';\nimport SwitchTransformOperator from './SwitchTransformOperator';\n\n/**\n */\nexport default class RequestHandlingRSocket\n  implements Responder<Buffer, Buffer> {\n  _registeredServices: Map<string, Responder<Buffer, Buffer>>;\n\n  constructor() {\n    this._registeredServices = new Map();\n  }\n\n  /**\n   *\n   * @param {string} service -\n   * @param {Responder<Buffer,Buffer>} handler -\n   */\n  addService(service: string, handler: Responder<Buffer, Buffer>) {\n    this._registeredServices.set(service, handler);\n  }\n\n  /**\n   *\n   * @param {Payload<Buffer, Buffer>} payload the - request payload\n   * @throws {Error} if there is no registered service associated with the service type reflected in the request payload metadata\n   * @throws {Error} if the request payload metadata is null\n   */\n  fireAndForget(payload: Payload<Buffer, Buffer>): void {\n    if (payload.metadata == null) {\n      throw new Error('metadata is empty');\n    }\n\n    const service = getService(payload.metadata);\n    const handler = this._registeredServices.get(service);\n\n    if (handler == null) {\n      throw new Error('can not find service ' + service);\n    }\n\n    handler.fireAndForget(payload);\n  }\n\n  /**\n   *\n   * @param {Payload<Buffer,Buffer>} payload - the request payload\n   * @returns {Single<Payload<Buffer,Buffer>>} a {@link Single} that emits the\n   *   response payload, or that signals an error if there is no registered\n   *   service associated with the service type reflected in the request payload\n   *   metadata or if the request payload metadata is null\n   */\n  requestResponse(\n    payload: Payload<Buffer, Buffer>,\n  ): Single<Payload<Buffer, Buffer>> {\n    try {\n      if (payload.metadata == null) {\n        return Single.error(new Error('metadata is empty'));\n      }\n\n      const service = getService(payload.metadata);\n      const handler = this._registeredServices.get(service);\n\n      if (handler == null) {\n        return Single.error(new Error('can not find service ' + service));\n      }\n\n      return handler.requestResponse(payload);\n    } catch (error) {\n      return Single.error(error);\n    }\n  }\n\n  /**\n   *\n   * @param {Payload<Buffer,Buffer>} payload the request payload\n   * @returns {Flowable<Buffer,Buffer>} a Flowable that emits the response\n   *   payloads, or that signals an error if there is no registered service\n   *   associated with the service type reflected in the request payload\n   *   metadata or if the request payload metadata is null\n   */\n  requestStream(\n    payload: Payload<Buffer, Buffer>,\n  ): Flowable<Payload<Buffer, Buffer>> {\n    try {\n      if (payload.metadata == null) {\n        return Flowable.error(new Error('metadata is empty'));\n      }\n\n      const service = getService(payload.metadata);\n      const handler = this._registeredServices.get(service);\n\n      if (handler == null) {\n        return Flowable.error(new Error('can not find service ' + service));\n      }\n\n      return handler.requestStream(payload);\n    } catch (error) {\n      return Flowable.error(error);\n    }\n  }\n\n  /**\n   *\n   * @param {Flowable<Payload<Buffer,Buffer>>} payloads - the request payloads\n   * @returns {Flowable<Payload<Buffer,Buffer>>} a {@link Flowable} that emits\n   *   the response payloads, or that signals an error if there is no registered\n   *   service associated with the service type reflected in the request payload\n   *   metadata or if the request payload metadata is null\n   */\n  requestChannel(\n    payloads: Flowable<Payload<Buffer, Buffer>>,\n  ): Flowable<Payload<Buffer, Buffer>> {\n    return new Flowable(s => payloads.subscribe(s)).lift(\n      s =>\n        new SwitchTransformOperator(s, (payload, flowable) => {\n          if (payload.metadata === undefined || payload.metadata === null) {\n            return Flowable.error(new Error('metadata is empty'));\n          } else {\n            const service = getService(payload.metadata);\n            const handler = this._registeredServices.get(service);\n            if (handler === undefined || handler === null) {\n              return Flowable.error(\n                new Error('can not find service ' + service),\n              );\n            } else {\n              return handler.requestChannel(flowable);\n            }\n          }\n        }),\n    );\n  }\n\n  /**\n   * @abstract\n   * @param {Payload<Buffer, Buffer>} payload -\n   * @returns {Single<void>} a Single that signals an error and terminates\n   */\n  metadataPush(payload: Payload<Buffer, Buffer>): Single<void> {\n    return Single.error(new Error('metadataPush() is not implemented'));\n  }\n}\n",
    "static": true,
    "longname": "/home/dgross/Netifi/rsocket-rpc-js/rsocket-rpc-js/packages/core/src/RequestHandlingRSocket.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 52,
    "kind": "class",
    "name": "RequestHandlingRSocket",
    "memberof": "packages/core/src/RequestHandlingRSocket.js",
    "static": true,
    "longname": "packages/core/src/RequestHandlingRSocket.js~RequestHandlingRSocket",
    "access": "public",
    "export": true,
    "importPath": "./packages/core/src/RequestHandlingRSocket.js",
    "importStyle": "RequestHandlingRSocket",
    "description": "",
    "lineNumber": 35,
    "interface": false
  },
  {
    "__docId__": 53,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "packages/core/src/RequestHandlingRSocket.js~RequestHandlingRSocket",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/core/src/RequestHandlingRSocket.js~RequestHandlingRSocket#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 37,
    "undocument": true
  },
  {
    "__docId__": 54,
    "kind": "member",
    "name": "_registeredServices",
    "memberof": "packages/core/src/RequestHandlingRSocket.js~RequestHandlingRSocket",
    "static": false,
    "longname": "packages/core/src/RequestHandlingRSocket.js~RequestHandlingRSocket#_registeredServices",
    "access": "private",
    "description": null,
    "lineNumber": 38,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 55,
    "kind": "method",
    "name": "addService",
    "memberof": "packages/core/src/RequestHandlingRSocket.js~RequestHandlingRSocket",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/core/src/RequestHandlingRSocket.js~RequestHandlingRSocket#addService",
    "access": "public",
    "description": "",
    "lineNumber": 46,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "service",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Responder<Buffer,Buffer>"
        ],
        "spread": false,
        "optional": false,
        "name": "handler",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 56,
    "kind": "method",
    "name": "fireAndForget",
    "memberof": "packages/core/src/RequestHandlingRSocket.js~RequestHandlingRSocket",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/core/src/RequestHandlingRSocket.js~RequestHandlingRSocket#fireAndForget",
    "access": "public",
    "description": "",
    "lineNumber": 56,
    "params": [
      {
        "nullable": null,
        "types": [
          "Payload<Buffer, Buffer>"
        ],
        "spread": false,
        "optional": false,
        "name": "payload",
        "description": "the - request payload"
      }
    ],
    "throws": [
      {
        "types": [
          "Error"
        ],
        "description": "if there is no registered service associated with the service type reflected in the request payload metadata"
      },
      {
        "types": [
          "Error"
        ],
        "description": "if the request payload metadata is null"
      }
    ],
    "return": null
  },
  {
    "__docId__": 57,
    "kind": "method",
    "name": "requestResponse",
    "memberof": "packages/core/src/RequestHandlingRSocket.js~RequestHandlingRSocket",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/core/src/RequestHandlingRSocket.js~RequestHandlingRSocket#requestResponse",
    "access": "public",
    "description": "",
    "lineNumber": 79,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Single<Payload<Buffer,Buffer>>} a {@link Single} that emits the\n  response payload, or that signals an error if there is no registered\n  service associated with the service type reflected in the request payload\n  metadata or if the request payload metadata is null"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Payload<Buffer,Buffer>"
        ],
        "spread": false,
        "optional": false,
        "name": "payload",
        "description": "the request payload"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Single<Payload<Buffer,Buffer>>"
      ],
      "spread": false,
      "description": "a {@link Single} that emits the\n  response payload, or that signals an error if there is no registered\n  service associated with the service type reflected in the request payload\n  metadata or if the request payload metadata is null"
    }
  },
  {
    "__docId__": 58,
    "kind": "method",
    "name": "requestStream",
    "memberof": "packages/core/src/RequestHandlingRSocket.js~RequestHandlingRSocket",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/core/src/RequestHandlingRSocket.js~RequestHandlingRSocket#requestStream",
    "access": "public",
    "description": "",
    "lineNumber": 106,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Flowable<Buffer,Buffer>} a Flowable that emits the response\n  payloads, or that signals an error if there is no registered service\n  associated with the service type reflected in the request payload\n  metadata or if the request payload metadata is null"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Payload<Buffer,Buffer>"
        ],
        "spread": false,
        "optional": false,
        "name": "payload",
        "description": "the request payload"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Flowable<Buffer,Buffer>"
      ],
      "spread": false,
      "description": "a Flowable that emits the response\n  payloads, or that signals an error if there is no registered service\n  associated with the service type reflected in the request payload\n  metadata or if the request payload metadata is null"
    }
  },
  {
    "__docId__": 59,
    "kind": "method",
    "name": "requestChannel",
    "memberof": "packages/core/src/RequestHandlingRSocket.js~RequestHandlingRSocket",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/core/src/RequestHandlingRSocket.js~RequestHandlingRSocket#requestChannel",
    "access": "public",
    "description": "",
    "lineNumber": 133,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Flowable<Payload<Buffer,Buffer>>} a {@link Flowable} that emits\n  the response payloads, or that signals an error if there is no registered\n  service associated with the service type reflected in the request payload\n  metadata or if the request payload metadata is null"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Flowable<Payload<Buffer,Buffer>>"
        ],
        "spread": false,
        "optional": false,
        "name": "payloads",
        "description": "the request payloads"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Flowable<Payload<Buffer,Buffer>>"
      ],
      "spread": false,
      "description": "a {@link Flowable} that emits\n  the response payloads, or that signals an error if there is no registered\n  service associated with the service type reflected in the request payload\n  metadata or if the request payload metadata is null"
    }
  },
  {
    "__docId__": 60,
    "kind": "method",
    "name": "metadataPush",
    "memberof": "packages/core/src/RequestHandlingRSocket.js~RequestHandlingRSocket",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/core/src/RequestHandlingRSocket.js~RequestHandlingRSocket#metadataPush",
    "access": "public",
    "description": "",
    "lineNumber": 154,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Single<void>} a Single that signals an error and terminates"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Payload<Buffer, Buffer>"
        ],
        "spread": false,
        "optional": false,
        "name": "payload",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Single<void>"
      ],
      "spread": false,
      "description": "a Single that signals an error and terminates"
    },
    "abstract": true
  },
  {
    "__docId__": 61,
    "kind": "file",
    "name": "packages/core/src/RpcClient.js",
    "content": "/**\n * @name RpcClient.js\n * @fileoverview Defines the {@link RpcClient} class and {@link ClientConfig} object.\n * @copyright Copyright (c) 2017-present, Netifi Inc.\n * @license Apache-2.0\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @flow\n *\n * @requires NPM:rsocket-core\n * @requires NPM:rsocket-flowable\n * @requires NPM:rsocket-types\n * @exports ClientConfig\n * @exports RpcClient\n */\n\n'use strict';\n\n/**\n * @external\n * @see https://github.com/rsocket/rsocket-js/blob/master/packages/rsocket-types/src/ReactiveSocketTypes.js\n * @typedef {(string|Buffer|Uint8Array)} Encodable\n */\n/**\n * @example <caption>The methods of the Responder interface:</caption>\n * fireAndForget(payload: Payload<D, M>): void\n * requestResponse(payload: Payload<D, M>): Single<Payload<D, M>>\n * requestStream(payload: Payload<D, M>): Flowable<Payload<D, M>>\n * requestChannel(payloads: Flowable<Payload<D, M>>): Flowable<Payload<D, M>>\n * metadataPush(payload: Payload<D, M>): Single<void>\n * @external\n * @see https://github.com/rsocket/rsocket-js/blob/master/packages/rsocket-types/src/ReactiveSocketTypes.js\n * @typedef {interface} Responder\n * @property {function} fireAndForget\n * @property {function} requestResponse\n * @property {function} requestStream\n * @property {function} requestChannel\n * @property {function} metadataPush\n */\n/**\n * A contract that provides different interaction models according to the\n * ReactiveSocket protocol. This interface extends the {@link Responder}\n * interface by adding the {@link ReactiveSocket#close} and\n * {@link ReactiveSocket#connectionStatus} methods.\n * @extends {Responder}\n * @external\n * @see https://github.com/rsocket/rsocket-js/blob/master/packages/rsocket-types/src/ReactiveSocketTypes.js\n * @see https://github.com/ReactiveSocket/reactivesocket/blob/master/Protocol.md\n * @typedef {interface} ReactiveSocket\n * @property {function} fireAndForget\n * @property {function} requestResponse\n * @property {function} requestStream\n * @property {function} requestChannel\n * @property {function} metadataPush\n * @property {function} close\n * @property {function} connectionStatus\n */\n/**\n * Represents a network connection with input/output used by a\n * {@link ReactiveSocket} to send/receive data.\n * @external\n * @see https://github.com/rsocket/rsocket-js/blob/master/packages/rsocket-types/src/ReactiveSocketTypes.js\n * @typedef {interface} DuplexConnection\n * @property {function} sendOne\n * @property {function} send\n * @property {function} receive\n * @property {function} close\n * @property {function} connect\n * @property {function} connectionStatus\n */\n/**\n * A single unit of data exchanged between the peers of a\n * {@link ReactiveSocket}. A object of this type consists of two members:\n * {@link Payload#data} and {@link Payload#metadata}.\n * @external\n * @see https://github.com/rsocket/rsocket-js/blob/master/packages/rsocket-types/src/ReactiveSocketTypes.js\n * @typedef {Object} Payload\n * @property {Serializer} data\n * @property {Serializer} metadata\n */\nimport type {\n  ConnectionStatus,\n  DuplexConnection,\n  Encodable,\n  Payload,\n  ReactiveSocket,\n  SetupFrame,\n  Responder,\n} from 'rsocket-types';\n/**\n * @external\n * @see https://github.com/rsocket/rsocket-js/blob/master/packages/rsocket-core/src/RSocketSerialization.js\n * @typedef {Object} Serializer\n * @desc A Serializer transforms data between the application encoding used in\n * Payloads and the Encodable type accepted by the transport client.\n * @property {function} deserialize a function that takes an {@link Encodable} and returns the expected data or metadata object\n * @property {function} serialize a funciton that takes a data or metadata object and returns a corresponding {@link Encodable}\n */\n/**\n * @external\n * @see https://github.com/rsocket/rsocket-js/blob/master/packages/rsocket-core/src/RSocketSerialization.js\n * @typedef {Object} PayloadSerializers\n * @property {Serializer} data\n * @property {Serializer} metadata\n */\nimport type {PayloadSerializers} from 'rsocket-core/build/RSocketSerialization';\n\n/**\n * @external\n * @see https://github.com/rsocket/rsocket-js/blob/master/packages/rsocket-flowable/src/Flowable.js\n * @typedef {Object} Flowable\n * @property {function} just\n * @property {function} error\n * @property {function} never\n * @property {function} subscribe\n * @property {function} lift\n * @property {function} map\n * @property {function} take\n */\n/**\n * @external\n * @see https://github.com/rsocket/rsocket-js/blob/master/packages/rsocket-flowable/src/Single.js\n * @typedef {Object} Single\n * @property {function} of\n * @property {function} error\n * @property {function} subscribe\n * @property {function} flatMap\n * @property {function} map\n * @property {function} then\n */\nimport {Flowable, Single, every} from 'rsocket-flowable';\nimport invariant from 'fbjs/lib/invariant';\n\nimport {CONNECTION_STREAM_ID, FLAGS, FRAME_TYPES} from 'rsocket-core';\nimport {MAJOR_VERSION, MINOR_VERSION} from 'rsocket-core/build/RSocketVersion';\nimport {createClientMachine} from 'rsocket-core/build/RSocketMachine';\n\n/**\n * @typedef {Object} Setup\n * @property {number} keepAlive The number of milliseconds between keepalive messages you will send to the service\n * @property {number} lifetime The number of milliseconds to wait after the last keepalive message from the service before you consider the connection timed out.\n * @property {?Encodable} [metadata] Data you would like to send to the service at connection-time (this can be any arbitrary data the service expects, for example, authentication credentials).\n */\n/**\n * @typedef {Object} ClientConfig\n * @property {PayloadSerializers} [serializers] A serializer transforms data between the application encoding used in payloads and the encodable type accepted by the transport client. You typically will not need to implement your own serializer and deserializer, but if you do, you should pass your implementations to the RPC Client when you construct it.\n * @property {Setup} setup Configure the keepalive process and any metadata you would like to accompany the connection.\n * @property {DuplexConnection} transport Indicate which variety of duplex transport you are using, for example WebSocket or TCP. There are {@link RSocketWebsocketClient} and {@link RSocketTcpClient} classes that implement the required {@link DuplexConnection} interface for this component.\n * @property {Responder} [responder] An object that implements the five methods of the {@link Responder} interface, corresponding to the various RSocket interaction models. If the client doesn't intend to receive traffic, there is no need to add a responder. ({@link Responder} is a type alias for the RSocket API.)\n */\nexport type ClientConfig<D, M> = {|\n  serializers?: PayloadSerializers<D, M>,\n  setup: {|\n    keepAlive: number,\n    lifetime: number,\n    metadata?: Encodable,\n  |},\n  transport: DuplexConnection,\n  responder?: Responder<D, M>,\n|};\n\n/**\n * The primary class/entry point for the core package is the {@link RpcClient}.\n * The client encapsulates the RSocket methods of fireAndForget,\n * requestResponse, requestStream, and requestChannel and merges them with a\n * bidirectional connection, allowing seamless use of RSocket for RPC.\n */\nexport default class RpcClient<D, M> {\n  _config: ClientConfig<D, M>;\n  _connection: ?Single<ReactiveSocket<D, M>>;\n\n  /**\n   * @param {ClientConfig<D,M>} config -\n   */\n  constructor(config: ClientConfig<D, M>) {\n    this._config = config;\n    this._connection = null;\n  }\n\n  /**\n   * Close the RPC Client connection.\n   */\n  close(): void {\n    this._config.transport.close();\n  }\n\n  /**\n   * Returns a {@link Single}, which, when you subscribe to it, initiates the\n   * connection and emits a {@link ReactiveSocket} object that defines the\n   * connection.\n   * @example <caption>Here is an example instantiation of an RpcClient:</caption>\n   * const local = 'ws://localhost:8088/';\n   * const keepAlive = 60000; // 60s in ms \n   * const lifetime = 360000; // 360s in ms\n   * const transport = new RSocketWebsocketClient({url:local}, BufferEncoders);\n   * const client = new RpcClient({setup:{keepAlive, lifetime}, transport});\n   * client.connect().subscribe({\n   *   onComplete: rsocket => {\n   *     console.info(\"Success! We have a handle to an RSocket connection\");\n   *   },\n   *   onError: error => {\n   *     console.error(\"Failed to connect to local RSocket server.\", error);\n   *   }\n   * });\n   *\n   * @returns {Single<ReactiveSocket<D,M>>}\n   * @throws {Error} if the RpcClient is already connected\n   */\n  connect(): Single<ReactiveSocket<D, M>> {\n    invariant(\n      !this._connection,\n      'RpcClient: Unexpected call to connect(), already connected.',\n    );\n    this._connection = new Single(subscriber => {\n      const transport = this._config.transport;\n      let subscription;\n      transport.connectionStatus().subscribe({\n        onNext: status => {\n          if (status.kind === 'CONNECTED') {\n            subscription && subscription.cancel();\n            subscriber.onComplete(new RpcSocket(this._config, transport));\n          } else if (status.kind === 'ERROR') {\n            subscription && subscription.cancel();\n            subscriber.onError(status.error);\n          } else if (status.kind === 'CLOSED') {\n            subscription && subscription.cancel();\n            subscriber.onError(new Error('RpcClient: Connection closed.'));\n          }\n        },\n        onSubscribe: _subscription => {\n          subscriber.onSubscribe(() => _subscription.cancel());\n          subscription = _subscription;\n          subscription.request(Number.MAX_SAFE_INTEGER);\n        },\n      });\n      transport.connect();\n    });\n    return this._connection;\n  }\n}\n\n/**\n * @private\n */\nclass RpcSocket<D, M> implements ReactiveSocket<D, M> {\n  _machine: ReactiveSocket<D, M>;\n\n  constructor(config: ClientConfig<D, M>, connection: DuplexConnection) {\n    this._machine = createClientMachine(\n      connection,\n      subscriber => connection.receive().subscribe(subscriber),\n      config.serializers,\n      config.responder,\n    );\n\n    // Send SETUP\n    connection.sendOne(this._buildSetupFrame(config));\n\n    // Send KEEPALIVE frames\n    const {keepAlive} = config.setup;\n    const keepAliveFrames = every(keepAlive).map(() => ({\n      data: null,\n      flags: FLAGS.RESPOND,\n      lastReceivedPosition: 0,\n      streamId: CONNECTION_STREAM_ID,\n      type: FRAME_TYPES.KEEPALIVE,\n    }));\n    connection.send(keepAliveFrames);\n  }\n\n  fireAndForget(payload: Payload<D, M>): void {\n    this._machine.fireAndForget(payload);\n  }\n\n  requestResponse(payload: Payload<D, M>): Single<Payload<D, M>> {\n    return this._machine.requestResponse(payload);\n  }\n\n  requestStream(payload: Payload<D, M>): Flowable<Payload<D, M>> {\n    return this._machine.requestStream(payload);\n  }\n\n  requestChannel(payloads: Flowable<Payload<D, M>>): Flowable<Payload<D, M>> {\n    return this._machine.requestChannel(payloads);\n  }\n\n  metadataPush(payload: Payload<D, M>): Single<void> {\n    return this._machine.metadataPush(payload);\n  }\n\n  close(): void {\n    this._machine.close();\n  }\n\n  connectionStatus(): Flowable<ConnectionStatus> {\n    return this._machine.connectionStatus();\n  }\n\n  _buildSetupFrame(config: ClientConfig<D, M>): SetupFrame {\n    const {keepAlive, lifetime, metadata} = config.setup;\n\n    return {\n      flags: FLAGS.METADATA,\n      keepAlive,\n      lifetime,\n      majorVersion: MAJOR_VERSION,\n      minorVersion: MINOR_VERSION,\n      metadataMimeType: 'application/binary',\n      metadata,\n      dataMimeType: 'application/binary',\n      data: undefined,\n      resumeToken: null,\n      streamId: CONNECTION_STREAM_ID,\n      type: FRAME_TYPES.SETUP,\n    };\n  }\n}\n",
    "static": true,
    "longname": "/home/dgross/Netifi/rsocket-rpc-js/rsocket-rpc-js/packages/core/src/RpcClient.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 62,
    "kind": "typedef",
    "name": "Encodable",
    "memberof": "packages/core/src/RpcClient.js",
    "static": true,
    "longname": "packages/core/src/RpcClient.js~Encodable",
    "access": "public",
    "description": "",
    "see": [
      "https://github.com/rsocket/rsocket-js/blob/master/packages/rsocket-types/src/ReactiveSocketTypes.js"
    ],
    "unknown": [
      {
        "tagName": "@external",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "string",
        "Buffer",
        "Uint8Array"
      ],
      "optional": false,
      "name": "Encodable"
    }
  },
  {
    "__docId__": 63,
    "kind": "typedef",
    "name": "Responder",
    "memberof": "packages/core/src/RpcClient.js",
    "static": true,
    "longname": "packages/core/src/RpcClient.js~Responder",
    "access": "public",
    "description": "",
    "examples": [
      "<caption>The methods of the Responder interface:</caption>\nfireAndForget(payload: Payload<D, M>): void\nrequestResponse(payload: Payload<D, M>): Single<Payload<D, M>>\nrequestStream(payload: Payload<D, M>): Flowable<Payload<D, M>>\nrequestChannel(payloads: Flowable<Payload<D, M>>): Flowable<Payload<D, M>>\nmetadataPush(payload: Payload<D, M>): Single<void>"
    ],
    "see": [
      "https://github.com/rsocket/rsocket-js/blob/master/packages/rsocket-types/src/ReactiveSocketTypes.js"
    ],
    "unknown": [
      {
        "tagName": "@external",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "fireAndForget",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "requestResponse",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "requestStream",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "requestChannel",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "metadataPush",
        "description": ""
      }
    ],
    "type": {
      "types": [
        "interface"
      ],
      "optional": false,
      "name": "Responder"
    }
  },
  {
    "__docId__": 64,
    "kind": "typedef",
    "name": "ReactiveSocket",
    "memberof": "packages/core/src/RpcClient.js",
    "static": true,
    "longname": "packages/core/src/RpcClient.js~ReactiveSocket",
    "access": "public",
    "description": "A contract that provides different interaction models according to the\nReactiveSocket protocol. This interface extends the {@link Responder}\ninterface by adding the {@link ReactiveSocket#close} and\n{@link ReactiveSocket#connectionStatus} methods.",
    "see": [
      "https://github.com/rsocket/rsocket-js/blob/master/packages/rsocket-types/src/ReactiveSocketTypes.js",
      "https://github.com/ReactiveSocket/reactivesocket/blob/master/Protocol.md"
    ],
    "unknown": [
      {
        "tagName": "@extends",
        "tagValue": "{Responder}"
      },
      {
        "tagName": "@external",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "fireAndForget",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "requestResponse",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "requestStream",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "requestChannel",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "metadataPush",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "close",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "connectionStatus",
        "description": ""
      }
    ],
    "type": {
      "types": [
        "interface"
      ],
      "optional": false,
      "name": "ReactiveSocket"
    }
  },
  {
    "__docId__": 65,
    "kind": "typedef",
    "name": "DuplexConnection",
    "memberof": "packages/core/src/RpcClient.js",
    "static": true,
    "longname": "packages/core/src/RpcClient.js~DuplexConnection",
    "access": "public",
    "description": "Represents a network connection with input/output used by a\n{@link ReactiveSocket} to send/receive data.",
    "see": [
      "https://github.com/rsocket/rsocket-js/blob/master/packages/rsocket-types/src/ReactiveSocketTypes.js"
    ],
    "unknown": [
      {
        "tagName": "@external",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "sendOne",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "send",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "receive",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "close",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "connect",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "connectionStatus",
        "description": ""
      }
    ],
    "type": {
      "types": [
        "interface"
      ],
      "optional": false,
      "name": "DuplexConnection"
    }
  },
  {
    "__docId__": 66,
    "kind": "typedef",
    "name": "Payload",
    "memberof": "packages/core/src/RpcClient.js",
    "static": true,
    "longname": "packages/core/src/RpcClient.js~Payload",
    "access": "public",
    "description": "A single unit of data exchanged between the peers of a\n{@link ReactiveSocket}. A object of this type consists of two members:\n{@link Payload#data} and {@link Payload#metadata}.",
    "see": [
      "https://github.com/rsocket/rsocket-js/blob/master/packages/rsocket-types/src/ReactiveSocketTypes.js"
    ],
    "unknown": [
      {
        "tagName": "@external",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "Serializer"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Serializer"
        ],
        "spread": false,
        "optional": false,
        "name": "metadata",
        "description": ""
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "Payload"
    }
  },
  {
    "__docId__": 67,
    "kind": "typedef",
    "name": "Flowable",
    "memberof": "packages/core/src/RpcClient.js",
    "static": true,
    "longname": "packages/core/src/RpcClient.js~Flowable",
    "access": "public",
    "description": "",
    "see": [
      "https://github.com/rsocket/rsocket-js/blob/master/packages/rsocket-flowable/src/Flowable.js"
    ],
    "unknown": [
      {
        "tagName": "@external",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "just",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "error",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "never",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "subscribe",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "lift",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "map",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "take",
        "description": ""
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "Flowable"
    }
  },
  {
    "__docId__": 68,
    "kind": "typedef",
    "name": "Single",
    "memberof": "packages/core/src/RpcClient.js",
    "static": true,
    "longname": "packages/core/src/RpcClient.js~Single",
    "access": "public",
    "description": "",
    "see": [
      "https://github.com/rsocket/rsocket-js/blob/master/packages/rsocket-flowable/src/Single.js"
    ],
    "lineNumber": 116,
    "unknown": [
      {
        "tagName": "@external",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "of",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "error",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "subscribe",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "flatMap",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "map",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "then",
        "description": ""
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "Single"
    }
  },
  {
    "__docId__": 69,
    "kind": "typedef",
    "name": "Serializer",
    "memberof": "packages/core/src/RpcClient.js",
    "static": true,
    "longname": "packages/core/src/RpcClient.js~Serializer",
    "access": "public",
    "description": "A Serializer transforms data between the application encoding used in\nPayloads and the Encodable type accepted by the transport client.",
    "see": [
      "https://github.com/rsocket/rsocket-js/blob/master/packages/rsocket-core/src/RSocketSerialization.js"
    ],
    "unknown": [
      {
        "tagName": "@external",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "deserialize",
        "description": "a function that takes an {@link Encodable} and returns the expected data or metadata object"
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "serialize",
        "description": "a funciton that takes a data or metadata object and returns a corresponding {@link Encodable}"
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "Serializer"
    }
  },
  {
    "__docId__": 70,
    "kind": "typedef",
    "name": "PayloadSerializers",
    "memberof": "packages/core/src/RpcClient.js",
    "static": true,
    "longname": "packages/core/src/RpcClient.js~PayloadSerializers",
    "access": "public",
    "description": "",
    "see": [
      "https://github.com/rsocket/rsocket-js/blob/master/packages/rsocket-core/src/RSocketSerialization.js"
    ],
    "lineNumber": 134,
    "unknown": [
      {
        "tagName": "@external",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "Serializer"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Serializer"
        ],
        "spread": false,
        "optional": false,
        "name": "metadata",
        "description": ""
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "PayloadSerializers"
    }
  },
  {
    "__docId__": 71,
    "kind": "typedef",
    "name": "Setup",
    "memberof": "packages/core/src/RpcClient.js",
    "static": true,
    "longname": "packages/core/src/RpcClient.js~Setup",
    "access": "public",
    "description": "",
    "properties": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "keepAlive",
        "description": "The number of milliseconds between keepalive messages you will send to the service"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "lifetime",
        "description": "The number of milliseconds to wait after the last keepalive message from the service before you consider the connection timed out."
      },
      {
        "nullable": true,
        "types": [
          "Encodable"
        ],
        "spread": false,
        "optional": true,
        "name": "metadata",
        "description": "Data you would like to send to the service at connection-time (this can be any arbitrary data the service expects, for example, authentication credentials)."
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "Setup"
    }
  },
  {
    "__docId__": 72,
    "kind": "typedef",
    "name": "ClientConfig",
    "memberof": "packages/core/src/RpcClient.js",
    "static": true,
    "longname": "packages/core/src/RpcClient.js~ClientConfig",
    "access": "public",
    "description": "",
    "properties": [
      {
        "nullable": null,
        "types": [
          "PayloadSerializers"
        ],
        "spread": false,
        "optional": true,
        "name": "serializers",
        "description": "A serializer transforms data between the application encoding used in payloads and the encodable type accepted by the transport client. You typically will not need to implement your own serializer and deserializer, but if you do, you should pass your implementations to the RPC Client when you construct it."
      },
      {
        "nullable": null,
        "types": [
          "Setup"
        ],
        "spread": false,
        "optional": false,
        "name": "setup",
        "description": "Configure the keepalive process and any metadata you would like to accompany the connection."
      },
      {
        "nullable": null,
        "types": [
          "DuplexConnection"
        ],
        "spread": false,
        "optional": false,
        "name": "transport",
        "description": "Indicate which variety of duplex transport you are using, for example WebSocket or TCP. There are {@link RSocketWebsocketClient} and {@link RSocketTcpClient} classes that implement the required {@link DuplexConnection} interface for this component."
      },
      {
        "nullable": null,
        "types": [
          "Responder"
        ],
        "spread": false,
        "optional": true,
        "name": "responder",
        "description": "An object that implements the five methods of the {@link Responder} interface, corresponding to the various RSocket interaction models. If the client doesn't intend to receive traffic, there is no need to add a responder. ({@link Responder} is a type alias for the RSocket API.)"
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "ClientConfig"
    }
  },
  {
    "__docId__": 73,
    "kind": "class",
    "name": "RpcClient",
    "memberof": "packages/core/src/RpcClient.js",
    "static": true,
    "longname": "packages/core/src/RpcClient.js~RpcClient",
    "access": "public",
    "export": true,
    "importPath": "./packages/core/src/RpcClient.js",
    "importStyle": "RpcClient",
    "description": "The primary class/entry point for the core package is the {@link RpcClient}.\nThe client encapsulates the RSocket methods of fireAndForget,\nrequestResponse, requestStream, and requestChannel and merges them with a\nbidirectional connection, allowing seamless use of RSocket for RPC.",
    "lineNumber": 161,
    "interface": false
  },
  {
    "__docId__": 74,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "packages/core/src/RpcClient.js~RpcClient",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/core/src/RpcClient.js~RpcClient#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 166,
    "params": [
      {
        "nullable": null,
        "types": [
          "ClientConfig<D,M>"
        ],
        "spread": false,
        "optional": false,
        "name": "config",
        "description": ""
      }
    ]
  },
  {
    "__docId__": 75,
    "kind": "member",
    "name": "_config",
    "memberof": "packages/core/src/RpcClient.js~RpcClient",
    "static": false,
    "longname": "packages/core/src/RpcClient.js~RpcClient#_config",
    "access": "private",
    "description": null,
    "lineNumber": 167,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 76,
    "kind": "member",
    "name": "_connection",
    "memberof": "packages/core/src/RpcClient.js~RpcClient",
    "static": false,
    "longname": "packages/core/src/RpcClient.js~RpcClient#_connection",
    "access": "private",
    "description": null,
    "lineNumber": 168,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 77,
    "kind": "method",
    "name": "close",
    "memberof": "packages/core/src/RpcClient.js~RpcClient",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/core/src/RpcClient.js~RpcClient#close",
    "access": "public",
    "description": "Close the RPC Client connection.",
    "lineNumber": 174,
    "params": [],
    "return": null
  },
  {
    "__docId__": 78,
    "kind": "method",
    "name": "connect",
    "memberof": "packages/core/src/RpcClient.js~RpcClient",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/core/src/RpcClient.js~RpcClient#connect",
    "access": "public",
    "description": "Returns a {@link Single}, which, when you subscribe to it, initiates the\nconnection and emits a {@link ReactiveSocket} object that defines the\nconnection.",
    "examples": [
      "<caption>Here is an example instantiation of an RpcClient:</caption>\nconst local = 'ws://localhost:8088/';\nconst keepAlive = 60000; // 60s in ms \nconst lifetime = 360000; // 360s in ms\nconst transport = new RSocketWebsocketClient({url:local}, BufferEncoders);\nconst client = new RpcClient({setup:{keepAlive, lifetime}, transport});\nclient.connect().subscribe({\n  onComplete: rsocket => {\n    console.info(\"Success! We have a handle to an RSocket connection\");\n  },\n  onError: error => {\n    console.error(\"Failed to connect to local RSocket server.\", error);\n  }\n});"
    ],
    "lineNumber": 200,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Single<ReactiveSocket<D,M>>}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Single<ReactiveSocket<D,M>>"
      ],
      "spread": false,
      "description": ""
    },
    "throws": [
      {
        "types": [
          "Error"
        ],
        "description": "if the RpcClient is already connected"
      }
    ],
    "params": []
  },
  {
    "__docId__": 80,
    "kind": "class",
    "name": "RpcSocket",
    "memberof": "packages/core/src/RpcClient.js",
    "static": true,
    "longname": "packages/core/src/RpcClient.js~RpcSocket",
    "access": "private",
    "export": false,
    "importPath": "./packages/core/src/RpcClient.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 233,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 81,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "packages/core/src/RpcClient.js~RpcSocket",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/core/src/RpcClient.js~RpcSocket#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 235,
    "undocument": true
  },
  {
    "__docId__": 82,
    "kind": "member",
    "name": "_machine",
    "memberof": "packages/core/src/RpcClient.js~RpcSocket",
    "static": false,
    "longname": "packages/core/src/RpcClient.js~RpcSocket#_machine",
    "access": "private",
    "description": null,
    "lineNumber": 236,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 83,
    "kind": "method",
    "name": "fireAndForget",
    "memberof": "packages/core/src/RpcClient.js~RpcSocket",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/core/src/RpcClient.js~RpcSocket#fireAndForget",
    "access": "public",
    "description": null,
    "lineNumber": 253,
    "undocument": true,
    "params": [
      {
        "name": "payload",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 84,
    "kind": "method",
    "name": "requestResponse",
    "memberof": "packages/core/src/RpcClient.js~RpcSocket",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/core/src/RpcClient.js~RpcSocket#requestResponse",
    "access": "public",
    "description": null,
    "lineNumber": 257,
    "undocument": true,
    "params": [
      {
        "name": "payload",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 85,
    "kind": "method",
    "name": "requestStream",
    "memberof": "packages/core/src/RpcClient.js~RpcSocket",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/core/src/RpcClient.js~RpcSocket#requestStream",
    "access": "public",
    "description": null,
    "lineNumber": 261,
    "undocument": true,
    "params": [
      {
        "name": "payload",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 86,
    "kind": "method",
    "name": "requestChannel",
    "memberof": "packages/core/src/RpcClient.js~RpcSocket",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/core/src/RpcClient.js~RpcSocket#requestChannel",
    "access": "public",
    "description": null,
    "lineNumber": 265,
    "undocument": true,
    "params": [
      {
        "name": "payloads",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 87,
    "kind": "method",
    "name": "metadataPush",
    "memberof": "packages/core/src/RpcClient.js~RpcSocket",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/core/src/RpcClient.js~RpcSocket#metadataPush",
    "access": "public",
    "description": null,
    "lineNumber": 269,
    "undocument": true,
    "params": [
      {
        "name": "payload",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 88,
    "kind": "method",
    "name": "close",
    "memberof": "packages/core/src/RpcClient.js~RpcSocket",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/core/src/RpcClient.js~RpcSocket#close",
    "access": "public",
    "description": null,
    "lineNumber": 273,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 89,
    "kind": "method",
    "name": "connectionStatus",
    "memberof": "packages/core/src/RpcClient.js~RpcSocket",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/core/src/RpcClient.js~RpcSocket#connectionStatus",
    "access": "public",
    "description": null,
    "lineNumber": 277,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 90,
    "kind": "method",
    "name": "_buildSetupFrame",
    "memberof": "packages/core/src/RpcClient.js~RpcSocket",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/core/src/RpcClient.js~RpcSocket#_buildSetupFrame",
    "access": "private",
    "description": null,
    "lineNumber": 281,
    "undocument": true,
    "params": [
      {
        "name": "config",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "{\"flags\": *, \"keepAlive\": *, \"lifetime\": *, \"majorVersion\": *, \"minorVersion\": *, \"metadataMimeType\": string, \"metadata\": *, \"dataMimeType\": string, \"data\": *, \"resumeToken\": *, \"streamId\": *, \"type\": *}"
      ]
    }
  },
  {
    "__docId__": 91,
    "kind": "file",
    "name": "packages/core/src/SwitchTransformOperator.js",
    "content": "/**\n * @name SwitchTransformOperator.js\n * @fileoverview Defines the SwitchTransformOperator class.\n * @copyright Copyright (c) 2017-present, Netifi Inc.\n * @license Apache-2.0\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @flow\n *\n * @requires NPM:rsocket-types\n * @requires NPM:rsocket-flowable\n */\n\nimport type {\n  ISubscriber,\n  ISubscription,\n  IPartialSubscriber,\n  IPublisher,\n} from 'rsocket-types';\nimport {Flowable} from 'rsocket-flowable';\n\n/**\n * MAX_REQUEST_N (from SwitchTransformOperator.js). The maximum number of items\n * that may be requested.\n *\n * @constant\n * @type {number}\n */\nconst MAX_REQUEST_N = 0x7fffffff; // uint31\n\n/**\n */\nexport default class SwitchTransformOperator<T, R>\n  implements ISubscription, ISubscriber<T>, IPublisher<T> {\n  _done: boolean;\n  _error: Error;\n  _canceled: boolean;\n  _first: T | any;\n  _outer: ISubscriber<R>;\n  _inner: ISubscriber<T>;\n  _subscription: ISubscription;\n  _transformer: (first: T, stream: Flowable<T>) => IPublisher<R>;\n\n  /**\n   * @param {ISubscriber} initial -\n   * @param {function} transformer -\n   */\n  constructor(\n    initial: ISubscriber<R>,\n    transformer: (first: T, stream: Flowable<T>) => IPublisher<R>,\n  ) {\n    this._transformer = transformer;\n    this._outer = initial;\n  }\n\n  /**\n   */\n  cancel() {\n    if (this._canceled) {\n      return;\n    }\n\n    this._canceled = true;\n    this._first = undefined;\n    this._subscription.cancel();\n  }\n\n  /**\n   * @param {?IPartialSubscriber} actual -\n   */\n  subscribe(actual?: IPartialSubscriber<T>) {\n    if (actual && !this._inner) {\n      this._inner = ((actual: any): ISubscriber<T>);\n      this._inner.onSubscribe(this);\n    } else if (actual) {\n      const a = actual;\n      if (a.onSubscribe) {\n        a.onSubscribe({\n          cancel: () => {},\n          request: () => {\n            if (a.onError) {\n              a.onError(\n                new Error('SwitchTransform allows only one Subscriber'),\n              );\n            }\n          },\n        });\n      }\n    }\n  }\n\n  /**\n   * @param {ISubscription} subscription\n   */\n  onSubscribe(subscription: ISubscription) {\n    if (this._subscription) {\n      subscription.cancel();\n      return;\n    }\n\n    this._subscription = subscription;\n    this._subscription.request(1);\n  }\n\n  /**\n   * @param {T} value\n   */\n  onNext(value: T) {\n    if (this._canceled || this._done) {\n      return;\n    }\n\n    if (!this._inner) {\n      try {\n        this._first = value;\n        const result = this._transformer(\n          value,\n          new Flowable(s => this.subscribe(s)),\n        );\n        result.subscribe(this._outer);\n      } catch (e) {\n        this.onError(e);\n      }\n      return;\n    }\n\n    this._inner.onNext(value);\n  }\n\n  /**\n   * @param {Error} error\n   */\n  onError(error: Error) {\n    if (this._canceled || this._done) {\n      return;\n    }\n\n    this._error = error;\n    this._done = true;\n\n    if (this._inner) {\n      if (!this._first) {\n        this._inner.onError(error);\n      }\n    } else {\n      this._outer.onSubscribe({\n        cancel: () => {},\n        request: () => {\n          this._outer.onError(error);\n        },\n      });\n    }\n  }\n\n  /**\n   */\n  onComplete() {\n    if (this._done || this._canceled) {\n      return;\n    }\n\n    this._done = true;\n\n    if (this._inner) {\n      if (!this._first) {\n        this._inner.onComplete();\n      }\n    } else {\n      this._outer.onSubscribe({\n        cancel: () => {},\n        request: () => {\n          this._outer.onComplete();\n        },\n      });\n    }\n  }\n\n  /**\n   * @param {number} n\n   */\n  request(n: number) {\n    if (this._first) {\n      const f = this._first;\n      this._first = undefined;\n      this._inner.onNext(f);\n\n      if (this._done) {\n        if (this._error) {\n          this._inner.onError(this._error);\n        } else {\n          this._inner.onComplete();\n        }\n      }\n\n      if (MAX_REQUEST_N <= n) {\n        this._subscription.request(MAX_REQUEST_N);\n      } else if (--n > 0) {\n        this._subscription.request(n);\n      }\n    } else {\n      this._subscription.request(n);\n    }\n  }\n\n  /**\n   * @param {function} fn\n   * @returns {IPublisher}\n   */\n  map<R>(fn: (data: T) => R): IPublisher<R> {\n    return new Flowable(subscriber => this.subscribe(subscriber)).map(fn);\n  }\n}\n",
    "static": true,
    "longname": "/home/dgross/Netifi/rsocket-rpc-js/rsocket-rpc-js/packages/core/src/SwitchTransformOperator.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 92,
    "kind": "variable",
    "name": "MAX_REQUEST_N",
    "memberof": "packages/core/src/SwitchTransformOperator.js",
    "static": true,
    "longname": "packages/core/src/SwitchTransformOperator.js~MAX_REQUEST_N",
    "access": "public",
    "export": false,
    "importPath": "./packages/core/src/SwitchTransformOperator.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 35,
    "unknown": [
      {
        "tagName": "@fileoverview",
        "tagValue": "Defines the SwitchTransformOperator class."
      },
      {
        "tagName": "@copyright",
        "tagValue": "Copyright (c) 2017-present, Netifi Inc."
      },
      {
        "tagName": "@license",
        "tagValue": "Apache-2.0\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n      http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License."
      },
      {
        "tagName": "@requires",
        "tagValue": "NPM:rsocket-types"
      },
      {
        "tagName": "@requires",
        "tagValue": "NPM:rsocket-flowable"
      }
    ],
    "type": {
      "types": [
        "number"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 93,
    "kind": "class",
    "name": "SwitchTransformOperator",
    "memberof": "packages/core/src/SwitchTransformOperator.js",
    "static": true,
    "longname": "packages/core/src/SwitchTransformOperator.js~SwitchTransformOperator",
    "access": "public",
    "export": true,
    "importPath": "./packages/core/src/SwitchTransformOperator.js",
    "importStyle": "SwitchTransformOperator",
    "description": "",
    "lineNumber": 39,
    "interface": false
  },
  {
    "__docId__": 94,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "packages/core/src/SwitchTransformOperator.js~SwitchTransformOperator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/core/src/SwitchTransformOperator.js~SwitchTransformOperator#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 45,
    "params": [
      {
        "nullable": null,
        "types": [
          "ISubscriber"
        ],
        "spread": false,
        "optional": false,
        "name": "initial",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "transformer",
        "description": ""
      }
    ]
  },
  {
    "__docId__": 95,
    "kind": "member",
    "name": "_transformer",
    "memberof": "packages/core/src/SwitchTransformOperator.js~SwitchTransformOperator",
    "static": false,
    "longname": "packages/core/src/SwitchTransformOperator.js~SwitchTransformOperator#_transformer",
    "access": "private",
    "description": null,
    "lineNumber": 46,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 96,
    "kind": "member",
    "name": "_outer",
    "memberof": "packages/core/src/SwitchTransformOperator.js~SwitchTransformOperator",
    "static": false,
    "longname": "packages/core/src/SwitchTransformOperator.js~SwitchTransformOperator#_outer",
    "access": "private",
    "description": null,
    "lineNumber": 47,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 97,
    "kind": "method",
    "name": "cancel",
    "memberof": "packages/core/src/SwitchTransformOperator.js~SwitchTransformOperator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/core/src/SwitchTransformOperator.js~SwitchTransformOperator#cancel",
    "access": "public",
    "description": "",
    "lineNumber": 52,
    "params": [],
    "return": null
  },
  {
    "__docId__": 98,
    "kind": "member",
    "name": "_canceled",
    "memberof": "packages/core/src/SwitchTransformOperator.js~SwitchTransformOperator",
    "static": false,
    "longname": "packages/core/src/SwitchTransformOperator.js~SwitchTransformOperator#_canceled",
    "access": "private",
    "description": null,
    "lineNumber": 57,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 99,
    "kind": "member",
    "name": "_first",
    "memberof": "packages/core/src/SwitchTransformOperator.js~SwitchTransformOperator",
    "static": false,
    "longname": "packages/core/src/SwitchTransformOperator.js~SwitchTransformOperator#_first",
    "access": "private",
    "description": null,
    "lineNumber": 58,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 100,
    "kind": "method",
    "name": "subscribe",
    "memberof": "packages/core/src/SwitchTransformOperator.js~SwitchTransformOperator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/core/src/SwitchTransformOperator.js~SwitchTransformOperator#subscribe",
    "access": "public",
    "description": "",
    "lineNumber": 65,
    "params": [
      {
        "nullable": true,
        "types": [
          "IPartialSubscriber"
        ],
        "spread": false,
        "optional": false,
        "name": "actual",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 101,
    "kind": "member",
    "name": "_inner",
    "memberof": "packages/core/src/SwitchTransformOperator.js~SwitchTransformOperator",
    "static": false,
    "longname": "packages/core/src/SwitchTransformOperator.js~SwitchTransformOperator#_inner",
    "access": "private",
    "description": null,
    "lineNumber": 67,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 102,
    "kind": "method",
    "name": "onSubscribe",
    "memberof": "packages/core/src/SwitchTransformOperator.js~SwitchTransformOperator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/core/src/SwitchTransformOperator.js~SwitchTransformOperator#onSubscribe",
    "access": "public",
    "description": "",
    "lineNumber": 87,
    "params": [
      {
        "nullable": null,
        "types": [
          "ISubscription"
        ],
        "spread": false,
        "optional": false,
        "name": "subscription",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 103,
    "kind": "member",
    "name": "_subscription",
    "memberof": "packages/core/src/SwitchTransformOperator.js~SwitchTransformOperator",
    "static": false,
    "longname": "packages/core/src/SwitchTransformOperator.js~SwitchTransformOperator#_subscription",
    "access": "private",
    "description": null,
    "lineNumber": 93,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 104,
    "kind": "method",
    "name": "onNext",
    "memberof": "packages/core/src/SwitchTransformOperator.js~SwitchTransformOperator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/core/src/SwitchTransformOperator.js~SwitchTransformOperator#onNext",
    "access": "public",
    "description": "",
    "lineNumber": 100,
    "params": [
      {
        "nullable": null,
        "types": [
          "T"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 106,
    "kind": "method",
    "name": "onError",
    "memberof": "packages/core/src/SwitchTransformOperator.js~SwitchTransformOperator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/core/src/SwitchTransformOperator.js~SwitchTransformOperator#onError",
    "access": "public",
    "description": "",
    "lineNumber": 122,
    "params": [
      {
        "nullable": null,
        "types": [
          "Error"
        ],
        "spread": false,
        "optional": false,
        "name": "error",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 107,
    "kind": "member",
    "name": "_error",
    "memberof": "packages/core/src/SwitchTransformOperator.js~SwitchTransformOperator",
    "static": false,
    "longname": "packages/core/src/SwitchTransformOperator.js~SwitchTransformOperator#_error",
    "access": "private",
    "description": null,
    "lineNumber": 127,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 108,
    "kind": "member",
    "name": "_done",
    "memberof": "packages/core/src/SwitchTransformOperator.js~SwitchTransformOperator",
    "static": false,
    "longname": "packages/core/src/SwitchTransformOperator.js~SwitchTransformOperator#_done",
    "access": "private",
    "description": null,
    "lineNumber": 128,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 109,
    "kind": "method",
    "name": "onComplete",
    "memberof": "packages/core/src/SwitchTransformOperator.js~SwitchTransformOperator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/core/src/SwitchTransformOperator.js~SwitchTransformOperator#onComplete",
    "access": "public",
    "description": "",
    "lineNumber": 146,
    "params": [],
    "return": null
  },
  {
    "__docId__": 111,
    "kind": "method",
    "name": "request",
    "memberof": "packages/core/src/SwitchTransformOperator.js~SwitchTransformOperator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/core/src/SwitchTransformOperator.js~SwitchTransformOperator#request",
    "access": "public",
    "description": "",
    "lineNumber": 170,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "n",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 113,
    "kind": "method",
    "name": "map",
    "memberof": "packages/core/src/SwitchTransformOperator.js~SwitchTransformOperator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/core/src/SwitchTransformOperator.js~SwitchTransformOperator#map",
    "access": "public",
    "description": "",
    "lineNumber": 198,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{IPublisher}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "fn",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "IPublisher"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 114,
    "kind": "file",
    "name": "packages/core/src/index.js",
    "content": "/**\n * @name rsocket-rpc-js/packages/core\n * @fileoverview The public API of the `core` package.\n * @copyright Copyright (c) 2017-present, Netifi Inc.\n * @license Apache-2.0\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @flow\n *\n * @requires RequestHandlingRSocket\n * @requires RpcClient\n * @requires QueuingFlowableProcessor\n * @requires SwitchTransformOperator\n * @exports ClientConfig\n * @exports RequestHandlingRSocket\n * @exports RpcClient\n * @exports QueuingFlowableProcessor\n * @exports SwitchTransformOperator\n */\n\n'use strict';\n\nimport RequestHandlingRSocket from './RequestHandlingRSocket';\nimport RpcClient from './RpcClient';\nimport QueuingFlowableProcessor from './QueuingFlowableProcessor';\nimport SwitchTransformOperator from './SwitchTransformOperator';\n\nexport type {ClientConfig} from './RpcClient';\n\nexport {\n  RequestHandlingRSocket,\n  RpcClient,\n  QueuingFlowableProcessor,\n  SwitchTransformOperator,\n};\n",
    "static": true,
    "longname": "/home/dgross/Netifi/rsocket-rpc-js/rsocket-rpc-js/packages/core/src/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 115,
    "kind": "file",
    "name": "packages/frames/src/Metadata.js",
    "content": "/**\n * @name Metadata.js\n * @fileoverview Provides methods for encoding and reading payload metadata.\n * @copyright Copyright (c) 2017-present, Netifi Inc.\n * @license Apache-2.0\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @flow\n *\n * @requires NPM:rsocket-types\n * @requires NPM:rsocket-core\n */\n\n'use strict';\n\n/* eslint-disable consistent-return, no-bitwise */\n\nimport type {Encodable} from 'rsocket-types';\n\n/**\n * @external\n * @typedef {Object} Encoder\n * @property {function} byteLength given an {@link Encodable} returns its length in bytes as a number\n * @property {function} encode\n * @property {function} decode\n */\n/**\n * @external\n * @typedef {Encoder<string>} UTF8Encoder\n */\n/**\n * @external\n * @typedef {Encoder<Buffer>} BufferEncoder\n */\nimport {UTF8Encoder, BufferEncoder, createBuffer} from 'rsocket-core';\n\nexport const VERSION = 1;\n\nexport const VERSION_SIZE = 2;\nexport const SERVICE_LENGTH_SIZE = 2;\nexport const METHOD_LENGTH_SIZE = 2;\nexport const TRACING_LENGTH_SIZE = 2;\n\n/**\n * @external\n * @typedef {Object} Buffer\n * @see https://nodejs.org/api/buffer.html\n */\n/**\n * Use this method to send well-formed call routing metadata with your payloads.\n *\n * @param {string} service - the service name\n * @param {string} method - the method name\n * @param {Encodable} tracing - tracing information\n * @param {Encodable} metadata - arbitrary metadata\n * @return {Buffer} the above fields encoded in a proper fashion\n */\nexport function encodeMetadata(\n  service: string,\n  method: string,\n  tracing: Encodable,\n  metadata: Encodable,\n): Buffer {\n  const serviceLength = UTF8Encoder.byteLength(service);\n  const methodLength = UTF8Encoder.byteLength(method);\n  const metadataLength = BufferEncoder.byteLength(metadata);\n  // We can't overload the method call directly and the code generator currently only populates\n  // the first 3 parameters\n  if (undefined === tracing) {\n    tracing = createBuffer(0);\n  }\n  const tracingLength = BufferEncoder.byteLength(tracing);\n\n  const buffer = createBuffer(\n    VERSION_SIZE +\n      SERVICE_LENGTH_SIZE +\n      serviceLength +\n      METHOD_LENGTH_SIZE +\n      methodLength +\n      TRACING_LENGTH_SIZE +\n      tracingLength +\n      metadataLength,\n  );\n\n  let offset = buffer.writeUInt16BE(VERSION, 0);\n\n  offset = buffer.writeUInt16BE(serviceLength, offset);\n  offset = UTF8Encoder.encode(service, buffer, offset, offset + serviceLength);\n\n  offset = buffer.writeUInt16BE(methodLength, offset);\n  offset = UTF8Encoder.encode(method, buffer, offset, offset + methodLength);\n\n  offset = buffer.writeUInt16BE(tracingLength, offset);\n  offset = BufferEncoder.encode(\n    tracing,\n    buffer,\n    offset,\n    offset + tracingLength,\n  );\n\n  BufferEncoder.encode(metadata, buffer, offset, offset + metadataLength);\n\n  return buffer;\n}\n\n/**\n * Get the version number from the metadata.\n *\n * @param {Buffer} buffer the metadata buffer that contains the version number\n * @return {number} the version number\n */\nexport function getVersion(buffer: Buffer): number {\n  return buffer.readUInt16BE(0);\n}\n\n/**\n * Get the service name from the metadata.\n *\n * @param {Buffer} buffer the metadata buffer that contains the service name\n * @return {string} the service name\n */\nexport function getService(buffer: Buffer): string {\n  let offset = VERSION_SIZE;\n\n  const serviceLength = buffer.readUInt16BE(offset);\n  offset += SERVICE_LENGTH_SIZE;\n\n  return UTF8Encoder.decode(buffer, offset, offset + serviceLength);\n}\n\n/**\n * Get the method name from the metadata.\n *\n * @param {Buffer} buffer the metadata buffer that contains the method name\n * @return {string} the method name\n */\nexport function getMethod(buffer: Buffer): string {\n  let offset = VERSION_SIZE;\n\n  const serviceLength = buffer.readUInt16BE(offset);\n  offset += SERVICE_LENGTH_SIZE + serviceLength;\n\n  const methodLength = buffer.readUInt16BE(offset);\n  offset += METHOD_LENGTH_SIZE;\n\n  return UTF8Encoder.decode(buffer, offset, offset + methodLength);\n}\n\n/**\n * Get the tracing information from the metadata.\n *\n * @param {Buffer} buffer the metadata buffer that contains tracing information\n * @return {Buffer} the tracing information\n */\nexport function getTracing(buffer: Buffer): Buffer {\n  let offset = VERSION_SIZE;\n\n  const serviceLength = buffer.readUInt16BE(offset);\n  offset += SERVICE_LENGTH_SIZE + serviceLength;\n\n  const methodLength = buffer.readUInt16BE(offset);\n  offset += METHOD_LENGTH_SIZE + methodLength;\n\n  const tracingLength = buffer.readUInt16BE(offset);\n  offset += TRACING_LENGTH_SIZE;\n\n  return BufferEncoder.decode(buffer, offset, offset + tracingLength);\n}\n\n/**\n * Get the metadata field from the metadata.\n *\n * @param {Buffer} buffer the metadata buffer\n * @return {Buffer} the metadata field\n */\nexport function getMetadata(buffer: Buffer): Buffer {\n  let offset = VERSION_SIZE;\n\n  const serviceLength = buffer.readUInt16BE(offset);\n  offset += SERVICE_LENGTH_SIZE + serviceLength;\n\n  const methodLength = buffer.readUInt16BE(offset);\n  offset += METHOD_LENGTH_SIZE + methodLength;\n\n  const tracingLength = buffer.readUInt16BE(offset);\n  offset += TRACING_LENGTH_SIZE + tracingLength;\n\n  return BufferEncoder.decode(buffer, offset, buffer.length);\n}\n",
    "static": true,
    "longname": "/home/dgross/Netifi/rsocket-rpc-js/rsocket-rpc-js/packages/frames/src/Metadata.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 116,
    "kind": "typedef",
    "name": "Encoder",
    "memberof": "packages/frames/src/Metadata.js",
    "static": true,
    "longname": "packages/frames/src/Metadata.js~Encoder",
    "access": "public",
    "description": "",
    "unknown": [
      {
        "tagName": "@external",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "byteLength",
        "description": "given an {@link Encodable} returns its length in bytes as a number"
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "encode",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "decode",
        "description": ""
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "Encoder"
    }
  },
  {
    "__docId__": 117,
    "kind": "typedef",
    "name": "UTF8Encoder",
    "memberof": "packages/frames/src/Metadata.js",
    "static": true,
    "longname": "packages/frames/src/Metadata.js~UTF8Encoder",
    "access": "public",
    "description": "",
    "unknown": [
      {
        "tagName": "@external",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "Encoder<string>"
      ],
      "optional": false,
      "name": "UTF8Encoder"
    }
  },
  {
    "__docId__": 118,
    "kind": "typedef",
    "name": "BufferEncoder",
    "memberof": "packages/frames/src/Metadata.js",
    "static": true,
    "longname": "packages/frames/src/Metadata.js~BufferEncoder",
    "access": "public",
    "description": "",
    "lineNumber": 44,
    "unknown": [
      {
        "tagName": "@external",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "Encoder<Buffer>"
      ],
      "optional": false,
      "name": "BufferEncoder"
    }
  },
  {
    "__docId__": 119,
    "kind": "variable",
    "name": "VERSION",
    "memberof": "packages/frames/src/Metadata.js",
    "static": true,
    "longname": "packages/frames/src/Metadata.js~VERSION",
    "access": "public",
    "export": true,
    "importPath": "./packages/frames/src/Metadata.js",
    "importStyle": "{VERSION}",
    "description": null,
    "lineNumber": 46,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 120,
    "kind": "variable",
    "name": "VERSION_SIZE",
    "memberof": "packages/frames/src/Metadata.js",
    "static": true,
    "longname": "packages/frames/src/Metadata.js~VERSION_SIZE",
    "access": "public",
    "export": true,
    "importPath": "./packages/frames/src/Metadata.js",
    "importStyle": "{VERSION_SIZE}",
    "description": null,
    "lineNumber": 48,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 121,
    "kind": "variable",
    "name": "SERVICE_LENGTH_SIZE",
    "memberof": "packages/frames/src/Metadata.js",
    "static": true,
    "longname": "packages/frames/src/Metadata.js~SERVICE_LENGTH_SIZE",
    "access": "public",
    "export": true,
    "importPath": "./packages/frames/src/Metadata.js",
    "importStyle": "{SERVICE_LENGTH_SIZE}",
    "description": null,
    "lineNumber": 49,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 122,
    "kind": "variable",
    "name": "METHOD_LENGTH_SIZE",
    "memberof": "packages/frames/src/Metadata.js",
    "static": true,
    "longname": "packages/frames/src/Metadata.js~METHOD_LENGTH_SIZE",
    "access": "public",
    "export": true,
    "importPath": "./packages/frames/src/Metadata.js",
    "importStyle": "{METHOD_LENGTH_SIZE}",
    "description": null,
    "lineNumber": 50,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 123,
    "kind": "variable",
    "name": "TRACING_LENGTH_SIZE",
    "memberof": "packages/frames/src/Metadata.js",
    "static": true,
    "longname": "packages/frames/src/Metadata.js~TRACING_LENGTH_SIZE",
    "access": "public",
    "export": true,
    "importPath": "./packages/frames/src/Metadata.js",
    "importStyle": "{TRACING_LENGTH_SIZE}",
    "description": null,
    "lineNumber": 51,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 124,
    "kind": "typedef",
    "name": "Buffer",
    "memberof": "packages/frames/src/Metadata.js",
    "static": true,
    "longname": "packages/frames/src/Metadata.js~Buffer",
    "access": "public",
    "description": "",
    "see": [
      "https://nodejs.org/api/buffer.html"
    ],
    "unknown": [
      {
        "tagName": "@external",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "Buffer"
    }
  },
  {
    "__docId__": 125,
    "kind": "function",
    "name": "encodeMetadata",
    "memberof": "packages/frames/src/Metadata.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "packages/frames/src/Metadata.js~encodeMetadata",
    "access": "public",
    "export": true,
    "importPath": "./packages/frames/src/Metadata.js",
    "importStyle": "{encodeMetadata}",
    "description": "Use this method to send well-formed call routing metadata with your payloads.",
    "lineNumber": 67,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "service",
        "description": "the service name"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "method",
        "description": "the method name"
      },
      {
        "nullable": null,
        "types": [
          "Encodable"
        ],
        "spread": false,
        "optional": false,
        "name": "tracing",
        "description": "tracing information"
      },
      {
        "nullable": null,
        "types": [
          "Encodable"
        ],
        "spread": false,
        "optional": false,
        "name": "metadata",
        "description": "arbitrary metadata"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Buffer"
      ],
      "spread": false,
      "description": "the above fields encoded in a proper fashion"
    }
  },
  {
    "__docId__": 126,
    "kind": "function",
    "name": "getVersion",
    "memberof": "packages/frames/src/Metadata.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "packages/frames/src/Metadata.js~getVersion",
    "access": "public",
    "export": true,
    "importPath": "./packages/frames/src/Metadata.js",
    "importStyle": "{getVersion}",
    "description": "Get the version number from the metadata.",
    "lineNumber": 102,
    "params": [
      {
        "nullable": null,
        "types": [
          "Buffer"
        ],
        "spread": false,
        "optional": false,
        "name": "buffer",
        "description": "the metadata buffer that contains the version number"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "the version number"
    }
  },
  {
    "__docId__": 127,
    "kind": "function",
    "name": "getService",
    "memberof": "packages/frames/src/Metadata.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "packages/frames/src/Metadata.js~getService",
    "access": "public",
    "export": true,
    "importPath": "./packages/frames/src/Metadata.js",
    "importStyle": "{getService}",
    "description": "Get the service name from the metadata.",
    "lineNumber": 112,
    "params": [
      {
        "nullable": null,
        "types": [
          "Buffer"
        ],
        "spread": false,
        "optional": false,
        "name": "buffer",
        "description": "the metadata buffer that contains the service name"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "the service name"
    }
  },
  {
    "__docId__": 128,
    "kind": "function",
    "name": "getMethod",
    "memberof": "packages/frames/src/Metadata.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "packages/frames/src/Metadata.js~getMethod",
    "access": "public",
    "export": true,
    "importPath": "./packages/frames/src/Metadata.js",
    "importStyle": "{getMethod}",
    "description": "Get the method name from the metadata.",
    "lineNumber": 127,
    "params": [
      {
        "nullable": null,
        "types": [
          "Buffer"
        ],
        "spread": false,
        "optional": false,
        "name": "buffer",
        "description": "the metadata buffer that contains the method name"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "the method name"
    }
  },
  {
    "__docId__": 129,
    "kind": "function",
    "name": "getTracing",
    "memberof": "packages/frames/src/Metadata.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "packages/frames/src/Metadata.js~getTracing",
    "access": "public",
    "export": true,
    "importPath": "./packages/frames/src/Metadata.js",
    "importStyle": "{getTracing}",
    "description": "Get the tracing information from the metadata.",
    "lineNumber": 145,
    "params": [
      {
        "nullable": null,
        "types": [
          "Buffer"
        ],
        "spread": false,
        "optional": false,
        "name": "buffer",
        "description": "the metadata buffer that contains tracing information"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Buffer"
      ],
      "spread": false,
      "description": "the tracing information"
    }
  },
  {
    "__docId__": 130,
    "kind": "function",
    "name": "getMetadata",
    "memberof": "packages/frames/src/Metadata.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "packages/frames/src/Metadata.js~getMetadata",
    "access": "public",
    "export": true,
    "importPath": "./packages/frames/src/Metadata.js",
    "importStyle": "{getMetadata}",
    "description": "Get the metadata field from the metadata.",
    "lineNumber": 166,
    "params": [
      {
        "nullable": null,
        "types": [
          "Buffer"
        ],
        "spread": false,
        "optional": false,
        "name": "buffer",
        "description": "the metadata buffer"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Buffer"
      ],
      "spread": false,
      "description": "the metadata field"
    }
  },
  {
    "__docId__": 131,
    "kind": "file",
    "name": "packages/frames/src/__tests__/Metadata-test.js",
    "content": "/**\n * @name Metadata-test.js\n */\nimport {expect} from 'chai';\nimport {describe, it} from 'mocha';\n\nimport {\n  encodeMetadata,\n  getService,\n  getMethod,\n  getTracing,\n  getMetadata,\n} from '../Metadata';\n\n/**\n * @param {number} min - the fewest number of bytes in the array\n * @param {number} max - the array must be smaller than this number in size\n * @return {number[]} an array of between {@link min} and {@link max}−1\n * numbers, each of which is in the range [0,256)\n */\nfunction randomBytes(min, max) {\n  let size = Math.floor(Math.random() * (max - min)) + min;\n  return new Array(size).map(() => {\n    return randomByte();\n  });\n}\n\n/**\n * @return {number} a pseudo-random number between [0,256)\n */\nfunction randomByte() {\n  return Math.floor(Math.random() * 256);\n}\n\n/**\n * @test\n */\ndescribe('METADATA', () => {\n  it('serializes/deserializes metadata NO TRACING', () => {\n    const service = 'service';\n    const method = 'foo';\n    const metadata = Buffer.from(randomBytes(5, 20));\n\n    const encoded = encodeMetadata(service, method, undefined, metadata);\n\n    expect(service).to.equal(getService(encoded));\n    expect(method).to.equal(getMethod(encoded));\n    expect(getTracing(encoded)).to.deep.equal(Buffer.from([]));\n    expect(metadata).to.deep.equal(getMetadata(encoded));\n  });\n\n  it('serializes/deserializes metadata WITH TRACING', () => {\n    const service = 'service';\n    const method = 'foo';\n    const tracing = Buffer.from(randomBytes(5, 20));\n    const metadata = Buffer.from(randomBytes(5, 20));\n\n    const encoded = encodeMetadata(service, method, tracing, metadata);\n\n    expect(service).to.equal(getService(encoded));\n    expect(method).to.equal(getMethod(encoded));\n    expect(tracing).to.deep.equal(getTracing(encoded));\n    expect(metadata).to.deep.equal(getMetadata(encoded));\n  });\n});\n",
    "static": true,
    "longname": "/home/dgross/Netifi/rsocket-rpc-js/rsocket-rpc-js/packages/frames/src/__tests__/Metadata-test.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 132,
    "kind": "function",
    "name": "randomBytes",
    "memberof": "packages/frames/src/__tests__/Metadata-test.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "packages/frames/src/__tests__/Metadata-test.js~randomBytes",
    "access": "public",
    "export": false,
    "importPath": "./packages/frames/src/__tests__/Metadata-test.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 15,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "min",
        "description": "the fewest number of bytes in the array"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "max",
        "description": "the array must be smaller than this number in size"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number[]"
      ],
      "spread": false,
      "description": "an array of between {@link min} and {@link max}−1\nnumbers, each of which is in the range [0,256)"
    },
    "ignore": true
  },
  {
    "__docId__": 133,
    "kind": "function",
    "name": "randomByte",
    "memberof": "packages/frames/src/__tests__/Metadata-test.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "packages/frames/src/__tests__/Metadata-test.js~randomByte",
    "access": "public",
    "export": false,
    "importPath": "./packages/frames/src/__tests__/Metadata-test.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 25,
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "a pseudo-random number between [0,256)"
    },
    "params": [],
    "ignore": true
  },
  {
    "__docId__": 134,
    "kind": "file",
    "name": "packages/frames/src/index.js",
    "content": "/**\n * @name rsocket-rpc-js/packages/frames\n * @fileoverview The public API for the \"frames\" package.\n * @copyright Copyright (c) 2017-present, Netifi Inc.\n * @license Apache-2.0\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @flow\n *\n * @requires Metadata\n * @exports encodeMetadata\n * @exports getVersion\n * @exports getService\n * @exports getMethod\n * @exports getMetadata\n * @exports getTracing\n */\n\nexport {\n  encodeMetadata,\n  getVersion,\n  getService,\n  getMethod,\n  getMetadata,\n  getTracing,\n} from './Metadata';\n",
    "static": true,
    "longname": "/home/dgross/Netifi/rsocket-rpc-js/rsocket-rpc-js/packages/frames/src/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 135,
    "kind": "file",
    "name": "packages/metrics/src/BaseMeter.js",
    "content": "/**\n * @name BaseMeter.js\n * @fileoverview Defines the \"BaseMeter\" class.\n *\n * @flow\n *\n * @requires IMeter\n * @requires metrics_pb\n * @requires RawMeterTag\n * @requires stats\n * @exports BaseMeter\n */\n\n'use strict';\n\nimport type {IMeter} from './IMeter';\nimport {Meter} from './proto/metrics_pb';\nimport RawMeterTag from './RawMeterTag';\nimport {EWMA} from './stats';\n\n/**\n * @name MAX_COUNTER_VALUE\n * @summary 4294967296\n *\n * @desc JavaScript uses double-precision FP for all numeric types.\n * Perhaps someday we'll have native 64-bit integers that can safely be\n * transported via JSON without additional code, but not today.\n *\n * @constant\n */\nconst MAX_COUNTER_VALUE = Math.pow(2, 32); // 4294967296\n\n/**\n */\nexport default class BaseMeter implements IMeter {\n  m1Rate: EWMA;\n  m5Rate: EWMA;\n  m15Rate: EWMA;\n  count: number;\n  tags: RawMeterTag[];\n  startTime: number;\n  type: string;\n  name: string;\n  description: ?string;\n  statistic: string;\n  units: string;\n\n  /**\n   * @param {string} name -\n   * @param {?string} description - \n   * @param {?RawMeterTag[]} tags -\n   */\n  constructor(name: string, description?: string, tags?: RawMeterTag[]) {\n    /** @type {EWMA} */\n    this.m1Rate = EWMA.createM1EWMA();\n    /** @type {EWMA} */\n    this.m5Rate = EWMA.createM5EWMA();\n    /** @type {EWMA} */\n    this.m15Rate = EWMA.createM15EWMA();\n    /** @type {number} */\n    this.count = 0;\n    /** @type {?RawMeterTag[]} */\n    this.tags = tags || [];\n    /** @type {number} */\n    this.startTime = new Date().getTime();\n    /** @type {string} */\n    this.type = 'meter';\n    /** @type {string} */\n    this.name = name;\n    /** @type {?string} */\n    this.description = description;\n    /** @type {string} */\n    this.statistic = 'unknown';\n  }\n\n  /**\n   * @param {function} converter -\n   * @return {Meter[]}\n   */\n  convert(converter: IMeter => Meter[]): Meter[] {\n    return converter(this);\n  }\n\n  /**\n   * Mark the occurence of n events\n   *\n   * @param {?number} [n=1] - the number of events to mark the occurence of\n   * @return {number} the number of events marked\n   */\n  mark(n: ?number): number {\n    if (!n) {\n      n = 1;\n    }\n    this.count += n;\n\n    // Check for wrap around\n    if (this.count > MAX_COUNTER_VALUE) {\n      this.count -= MAX_COUNTER_VALUE + 1;\n    }\n\n    // Check for negative count (e.g. from a decrement)\n    if (this.count < 0) {\n      this.count = 0;\n    }\n\n    this.m1Rate.update(n);\n    this.m5Rate.update(n);\n    this.m15Rate.update(n);\n\n    return n;\n  }\n\n  /**\n   * Return an object containing the rate values.\n   *\n   * @return {Object}\n   * @property {number} '1' the one-minute rate\n   * @property {number} '5' the five-minute rate\n   * @property {number} '15' the fifteen-minute rate\n   * @property {number} mean the over-all mean per-second rate\n   */\n  rates() {\n    return {\n      '1': this.oneMinuteRate(),\n      '5': this.fiveMinuteRate(),\n      '15': this.fifteenMinuteRate(),\n      mean: this.meanRate(),\n    };\n  }\n\n  /**\n   * Return the fifteen-minute per-second rate.\n   * @return {number} the rate\n   */\n  fifteenMinuteRate() {\n    return this.m15Rate.rate();\n  }\n\n  /**\n   * Return the five-minute per-second rate.\n   * @return {number} the rate\n   */\n  fiveMinuteRate() {\n    return this.m5Rate.rate();\n  }\n\n  /**\n   * Return the one-minute per-second rate.\n   * @return {number} the rate\n   */\n  oneMinuteRate() {\n    return this.m1Rate.rate();\n  }\n\n  /**\n   * Return the per-second rate over the complete lifetime of the meter.\n   * @return {number} the rate\n   */\n  meanRate() {\n    return (this.count / (new Date().getTime() - this.startTime)) * 1000;\n  }\n\n  /**\n   * Tick the one-, five-, and fifteen-minute rates.\n   */\n  tick() {\n    this.m1Rate.tick();\n    this.m5Rate.tick();\n    this.m15Rate.tick();\n  }\n\n  /** @return {Object}\n   * @property {string} type \n   * @property {number} count\n   * @property {RawMeterTag[]} tags\n   * @property {string} name */\n  toObject() {\n    return {\n      type: this.type,\n      count: this.count,\n      tags: this.tags,\n      name: this.name,\n    };\n  }\n}\n",
    "static": true,
    "longname": "/home/dgross/Netifi/rsocket-rpc-js/rsocket-rpc-js/packages/metrics/src/BaseMeter.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 136,
    "kind": "variable",
    "name": "MAX_COUNTER_VALUE",
    "memberof": "packages/metrics/src/BaseMeter.js",
    "static": true,
    "longname": "packages/metrics/src/BaseMeter.js~MAX_COUNTER_VALUE",
    "access": "public",
    "export": false,
    "importPath": "./packages/metrics/src/BaseMeter.js",
    "importStyle": null,
    "description": "JavaScript uses double-precision FP for all numeric types.\nPerhaps someday we'll have native 64-bit integers that can safely be\ntransported via JSON without additional code, but not today.",
    "lineNumber": 30,
    "unknown": [
      {
        "tagName": "@summary",
        "tagValue": "4294967296"
      },
      {
        "tagName": "@constant",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 137,
    "kind": "class",
    "name": "BaseMeter",
    "memberof": "packages/metrics/src/BaseMeter.js",
    "static": true,
    "longname": "packages/metrics/src/BaseMeter.js~BaseMeter",
    "access": "public",
    "export": true,
    "importPath": "./packages/metrics/src/BaseMeter.js",
    "importStyle": "BaseMeter",
    "description": "",
    "lineNumber": 34,
    "interface": false
  },
  {
    "__docId__": 138,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "packages/metrics/src/BaseMeter.js~BaseMeter",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/metrics/src/BaseMeter.js~BaseMeter#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 41,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": ""
      },
      {
        "nullable": true,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "description",
        "description": ""
      },
      {
        "nullable": true,
        "types": [
          "RawMeterTag[]"
        ],
        "spread": false,
        "optional": false,
        "name": "tags",
        "description": ""
      }
    ]
  },
  {
    "__docId__": 139,
    "kind": "member",
    "name": "m1Rate",
    "memberof": "packages/metrics/src/BaseMeter.js~BaseMeter",
    "static": false,
    "longname": "packages/metrics/src/BaseMeter.js~BaseMeter#m1Rate",
    "access": "public",
    "description": null,
    "lineNumber": 43,
    "type": {
      "nullable": null,
      "types": [
        "EWMA"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 140,
    "kind": "member",
    "name": "m5Rate",
    "memberof": "packages/metrics/src/BaseMeter.js~BaseMeter",
    "static": false,
    "longname": "packages/metrics/src/BaseMeter.js~BaseMeter#m5Rate",
    "access": "public",
    "description": null,
    "lineNumber": 45,
    "type": {
      "nullable": null,
      "types": [
        "EWMA"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 141,
    "kind": "member",
    "name": "m15Rate",
    "memberof": "packages/metrics/src/BaseMeter.js~BaseMeter",
    "static": false,
    "longname": "packages/metrics/src/BaseMeter.js~BaseMeter#m15Rate",
    "access": "public",
    "description": null,
    "lineNumber": 47,
    "type": {
      "nullable": null,
      "types": [
        "EWMA"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 142,
    "kind": "member",
    "name": "count",
    "memberof": "packages/metrics/src/BaseMeter.js~BaseMeter",
    "static": false,
    "longname": "packages/metrics/src/BaseMeter.js~BaseMeter#count",
    "access": "public",
    "description": null,
    "lineNumber": 49,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 143,
    "kind": "member",
    "name": "tags",
    "memberof": "packages/metrics/src/BaseMeter.js~BaseMeter",
    "static": false,
    "longname": "packages/metrics/src/BaseMeter.js~BaseMeter#tags",
    "access": "public",
    "description": null,
    "lineNumber": 51,
    "type": {
      "nullable": true,
      "types": [
        "RawMeterTag[]"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 144,
    "kind": "member",
    "name": "startTime",
    "memberof": "packages/metrics/src/BaseMeter.js~BaseMeter",
    "static": false,
    "longname": "packages/metrics/src/BaseMeter.js~BaseMeter#startTime",
    "access": "public",
    "description": null,
    "lineNumber": 53,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 145,
    "kind": "member",
    "name": "type",
    "memberof": "packages/metrics/src/BaseMeter.js~BaseMeter",
    "static": false,
    "longname": "packages/metrics/src/BaseMeter.js~BaseMeter#type",
    "access": "public",
    "description": null,
    "lineNumber": 55,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 146,
    "kind": "member",
    "name": "name",
    "memberof": "packages/metrics/src/BaseMeter.js~BaseMeter",
    "static": false,
    "longname": "packages/metrics/src/BaseMeter.js~BaseMeter#name",
    "access": "public",
    "description": null,
    "lineNumber": 57,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 147,
    "kind": "member",
    "name": "description",
    "memberof": "packages/metrics/src/BaseMeter.js~BaseMeter",
    "static": false,
    "longname": "packages/metrics/src/BaseMeter.js~BaseMeter#description",
    "access": "public",
    "description": null,
    "lineNumber": 59,
    "type": {
      "nullable": true,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 148,
    "kind": "member",
    "name": "statistic",
    "memberof": "packages/metrics/src/BaseMeter.js~BaseMeter",
    "static": false,
    "longname": "packages/metrics/src/BaseMeter.js~BaseMeter#statistic",
    "access": "public",
    "description": null,
    "lineNumber": 61,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 149,
    "kind": "method",
    "name": "convert",
    "memberof": "packages/metrics/src/BaseMeter.js~BaseMeter",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/metrics/src/BaseMeter.js~BaseMeter#convert",
    "access": "public",
    "description": "",
    "lineNumber": 68,
    "params": [
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "converter",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Meter[]"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 150,
    "kind": "method",
    "name": "mark",
    "memberof": "packages/metrics/src/BaseMeter.js~BaseMeter",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/metrics/src/BaseMeter.js~BaseMeter#mark",
    "access": "public",
    "description": "Mark the occurence of n events",
    "lineNumber": 78,
    "params": [
      {
        "nullable": true,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "1",
        "defaultRaw": 1,
        "name": "n",
        "description": "the number of events to mark the occurence of"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "the number of events marked"
    }
  },
  {
    "__docId__": 154,
    "kind": "method",
    "name": "rates",
    "memberof": "packages/metrics/src/BaseMeter.js~BaseMeter",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/metrics/src/BaseMeter.js~BaseMeter#rates",
    "access": "public",
    "description": "Return an object containing the rate values.",
    "lineNumber": 110,
    "properties": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "'1'",
        "description": "the one-minute rate"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "'5'",
        "description": "the five-minute rate"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "'15'",
        "description": "the fifteen-minute rate"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "mean",
        "description": "the over-all mean per-second rate"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 155,
    "kind": "method",
    "name": "fifteenMinuteRate",
    "memberof": "packages/metrics/src/BaseMeter.js~BaseMeter",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/metrics/src/BaseMeter.js~BaseMeter#fifteenMinuteRate",
    "access": "public",
    "description": "Return the fifteen-minute per-second rate.",
    "lineNumber": 123,
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "the rate"
    },
    "params": []
  },
  {
    "__docId__": 156,
    "kind": "method",
    "name": "fiveMinuteRate",
    "memberof": "packages/metrics/src/BaseMeter.js~BaseMeter",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/metrics/src/BaseMeter.js~BaseMeter#fiveMinuteRate",
    "access": "public",
    "description": "Return the five-minute per-second rate.",
    "lineNumber": 131,
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "the rate"
    },
    "params": []
  },
  {
    "__docId__": 157,
    "kind": "method",
    "name": "oneMinuteRate",
    "memberof": "packages/metrics/src/BaseMeter.js~BaseMeter",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/metrics/src/BaseMeter.js~BaseMeter#oneMinuteRate",
    "access": "public",
    "description": "Return the one-minute per-second rate.",
    "lineNumber": 139,
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "the rate"
    },
    "params": []
  },
  {
    "__docId__": 158,
    "kind": "method",
    "name": "meanRate",
    "memberof": "packages/metrics/src/BaseMeter.js~BaseMeter",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/metrics/src/BaseMeter.js~BaseMeter#meanRate",
    "access": "public",
    "description": "Return the per-second rate over the complete lifetime of the meter.",
    "lineNumber": 147,
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "the rate"
    },
    "params": []
  },
  {
    "__docId__": 159,
    "kind": "method",
    "name": "tick",
    "memberof": "packages/metrics/src/BaseMeter.js~BaseMeter",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/metrics/src/BaseMeter.js~BaseMeter#tick",
    "access": "public",
    "description": "Tick the one-, five-, and fifteen-minute rates.",
    "lineNumber": 154,
    "params": [],
    "return": null
  },
  {
    "__docId__": 160,
    "kind": "method",
    "name": "toObject",
    "memberof": "packages/metrics/src/BaseMeter.js~BaseMeter",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/metrics/src/BaseMeter.js~BaseMeter#toObject",
    "access": "public",
    "description": null,
    "lineNumber": 165,
    "properties": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "type",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "count",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "RawMeterTag[]"
        ],
        "spread": false,
        "optional": false,
        "name": "tags",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 161,
    "kind": "file",
    "name": "packages/metrics/src/Counter.js",
    "content": "/**\n * @name Counter.js\n * @fileoverview A simple counter object.\n *\n * @flow\n *\n * @requires BaseMeter\n * @requires RawMeterTag\n * @exports Counter\n */\n\n'use strict';\n\nimport BaseMeter from './BaseMeter';\nimport RawMeterTag from './RawMeterTag';\n\n/**\n * @extends {BaseMeter}\n */\nexport default class Counter extends BaseMeter {\n  /**\n   * @param {string} name\n   * @param {?string} [description]\n   * @param {string} units\n   * @param {?RawMeterTag[]} [tags] -\n   */\n  constructor(\n    name: string,\n    description?: string,\n    units: string,\n    tags?: RawMeterTag[],\n  ) {\n    super(name, description, tags);\n    this.type = 'counter';\n    this.statistic = 'count';\n    /** @type {string} **/\n    this.units = units;\n  }\n\n  /**\n   * Increment the count by a certain number of items.\n   *\n   * @param {?number} [val] the number of items to increment\n   */\n  inc(val: ?number): void {\n    this.mark(val);\n  }\n\n  /**\n   * Decrement the count by a certain number of items.\n   *\n   * @param {?number} [val=1] the number of items to decrement\n   */\n  dec(val: ?number): void {\n    if (!val) {\n      val = 1;\n    }\n    this.mark(-1 * val);\n  }\n\n  /**\n   * Reset the number of items in the count to zero.\n   */\n  clear(): void {\n    this.count = 0;\n  }\n}\n",
    "static": true,
    "longname": "/home/dgross/Netifi/rsocket-rpc-js/rsocket-rpc-js/packages/metrics/src/Counter.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 162,
    "kind": "class",
    "name": "Counter",
    "memberof": "packages/metrics/src/Counter.js",
    "static": true,
    "longname": "packages/metrics/src/Counter.js~Counter",
    "access": "public",
    "export": true,
    "importPath": "./packages/metrics/src/Counter.js",
    "importStyle": "Counter",
    "description": "",
    "lineNumber": 20,
    "interface": false,
    "extends": [
      "BaseMeter"
    ]
  },
  {
    "__docId__": 163,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "packages/metrics/src/Counter.js~Counter",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/metrics/src/Counter.js~Counter#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 27,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": ""
      },
      {
        "nullable": true,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "description",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "units",
        "description": ""
      },
      {
        "nullable": true,
        "types": [
          "RawMeterTag[]"
        ],
        "spread": false,
        "optional": true,
        "name": "tags",
        "description": ""
      }
    ]
  },
  {
    "__docId__": 164,
    "kind": "member",
    "name": "type",
    "memberof": "packages/metrics/src/Counter.js~Counter",
    "static": false,
    "longname": "packages/metrics/src/Counter.js~Counter#type",
    "access": "public",
    "description": null,
    "lineNumber": 29,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 165,
    "kind": "member",
    "name": "statistic",
    "memberof": "packages/metrics/src/Counter.js~Counter",
    "static": false,
    "longname": "packages/metrics/src/Counter.js~Counter#statistic",
    "access": "public",
    "description": null,
    "lineNumber": 30,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 166,
    "kind": "member",
    "name": "units",
    "memberof": "packages/metrics/src/Counter.js~Counter",
    "static": false,
    "longname": "packages/metrics/src/Counter.js~Counter#units",
    "access": "public",
    "description": null,
    "lineNumber": 32,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 167,
    "kind": "method",
    "name": "inc",
    "memberof": "packages/metrics/src/Counter.js~Counter",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/metrics/src/Counter.js~Counter#inc",
    "access": "public",
    "description": "Increment the count by a certain number of items.",
    "lineNumber": 40,
    "params": [
      {
        "nullable": true,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "name": "val",
        "description": "the number of items to increment"
      }
    ],
    "return": null
  },
  {
    "__docId__": 168,
    "kind": "method",
    "name": "dec",
    "memberof": "packages/metrics/src/Counter.js~Counter",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/metrics/src/Counter.js~Counter#dec",
    "access": "public",
    "description": "Decrement the count by a certain number of items.",
    "lineNumber": 49,
    "params": [
      {
        "nullable": true,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "1",
        "defaultRaw": 1,
        "name": "val",
        "description": "the number of items to decrement"
      }
    ],
    "return": null
  },
  {
    "__docId__": 169,
    "kind": "method",
    "name": "clear",
    "memberof": "packages/metrics/src/Counter.js~Counter",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/metrics/src/Counter.js~Counter#clear",
    "access": "public",
    "description": "Reset the number of items in the count to zero.",
    "lineNumber": 59,
    "params": [],
    "return": null
  },
  {
    "__docId__": 170,
    "kind": "member",
    "name": "count",
    "memberof": "packages/metrics/src/Counter.js~Counter",
    "static": false,
    "longname": "packages/metrics/src/Counter.js~Counter#count",
    "access": "public",
    "description": null,
    "lineNumber": 60,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 171,
    "kind": "file",
    "name": "packages/metrics/src/Histogram.js",
    "content": "/**\n * @name Histogram.js\n * @fileoverview Defines the Histogram class.\n *\n * @flow\n *\n * @requires stats\n */\n\n'use strict';\n\nimport {\n  ExponentiallyDecayingSample,\n  UniformSample,\n  ISample,\n  Sample,\n} from './stats';\n\n/**\n * The default set of percentiles to use in the Histogram.\n */\nexport const DEFAULT_PERCENTILES = [\n  0.001,\n  0.01,\n  0.05,\n  0.1,\n  0.25,\n  0.5,\n  0.75,\n  0.9,\n  0.95,\n  0.98,\n  0.99,\n  0.999,\n];\n\n/**\n * A histogram tracks the distribution of items, given a sample type.\n */\nexport class Histogram {\n  sample: ISample;\n  min: ?number;\n  max: ?number;\n  sum: ?number;\n  varianceM: ?number;\n  varianceS: ?number;\n  count: ?number;\n  type: string;\n\n  /**\n   * @param {ISample} sample -\n   */\n  constructor(sample: ISample) {\n    /** @type {ISample} */\n    this.sample = sample || new ExponentiallyDecayingSample(1028, 0.015);\n    /** @type {?number} */\n    this.min = null;\n    /** @type {?number} */\n    this.max = null;\n    /** @type {?number} */\n    this.sum = null;\n    // These are for the Welford algorithm for calculating running variance\n    // without floating-point doom.\n    /** @type {?number} */\n    this.varianceM = null;\n    /** @type {?number} */\n    this.varianceS = null;\n    /** @type {?number} */\n    this.count = 0;\n    /** @type {string} */\n    this.type = 'histogram';\n  }\n\n  /**\n   * Create an exponentially decaying histogram.\n   *\n   * @param {number} [size=1028]\n   * @param {number} [alpha=0.015]\n   * @return {Histogram}\n   */\n  static createExponentialDecayHistogram(\n    size: number,\n    alpha: number,\n  ): Histogram {\n    return new Histogram(\n      new ExponentiallyDecayingSample(size || 1028, alpha || 0.015),\n    );\n  }\n\n  /**\n   * Create a uniformly-sampled histogram.\n   *\n   * @param {number} [size=1028]\n   * @return {Histogram}\n   */\n  static createUniformHistogram(size: number): Histogram {\n    return new Histogram(new UniformSample(size || 1028));\n  }\n\n  /**\n   * Return the histogram to its default values.\n   */\n  clear/* = function*/(): void {\n    this.sample.clear();\n    this.min = null;\n    this.max = null;\n    this.sum = null;\n    this.varianceM = null;\n    this.varianceS = null;\n    this.count = 0;\n  };\n\n  /**\n   * timestamp param primarily used for testing\n   *\n   * @function\n   * @param {number} val\n   * @param {?number} [timestamp]\n   */\n  update/* = function*/(val: number, timestamp?: number): void {\n    this.count++;\n    this.sample.update(val, timestamp);\n    if (this.max === null) {\n      this.max = val;\n    } else {\n      this.max = val > this.max ? val : this.max;\n    }\n    if (this.min === null) {\n      this.min = val;\n    } else {\n      this.min = val < this.min ? val : this.min;\n    }\n    this.sum = this.sum === null ? val : this.sum + val;\n    this.updateVariance(val);\n  };\n\n  /**\n   * Set the value of the Welford algorithm variance.\n   *\n   * @function\n   * @param {number} val\n   */\n  updateVariance/* = function*/(val: number): void {\n    var oldVM = this.varianceM,\n      oldVS = this.varianceS;\n    if (this.count == 1) {\n      this.varianceM = val;\n    } else {\n      this.varianceM = oldVM + (val - oldVM) / this.count;\n      this.varianceS = oldVS + (val - oldVM) * (val - this.varianceM);\n    }\n  };\n\n  /**\n   * Get the values for a set of percentiles.\n   *\n   * @function\n   * @param {?number[]} [percentiles] An array of percentiles, expressed as decimals between zero and one. For example, [0.5, 0.75, 0.9, 0.99]. Default is {@link DEFAULT_PERCENTILES}.\n   * @return {number[]} the values for each percentile level\n   */\n  percentiles/* = function*/(percentiles?: number[]): Object {\n    if (!percentiles) {\n      percentiles = DEFAULT_PERCENTILES;\n    }\n    var values = this.sample\n        .getValues()\n        .map(function(v) {\n          return parseFloat(v);\n        })\n        .sort(function(a, b) {\n          return a - b;\n        }),\n      scores = {},\n      percentile,\n      pos,\n      lower,\n      upper;\n    for (var i = 0; i < percentiles.length; i++) {\n      pos = percentiles[i] * (values.length + 1);\n      percentile = percentiles[i];\n      if (pos < 1) {\n        scores[percentile] = values[0];\n      } else if (pos >= values.length) {\n        scores[percentile] = values[values.length - 1];\n      } else {\n        lower = values[Math.floor(pos) - 1];\n        upper = values[Math.ceil(pos) - 1];\n        scores[percentile] = lower + (pos - Math.floor(pos)) * (upper - lower);\n      }\n    }\n    return scores;\n  };\n\n  /**\n   * Return the average variance using the Welford algorithm.\n   *\n   * @function\n   * @return {?number} the average variance, or null if this is undefined because the count is zero.\n   * @throws {Error} a divide by zero error if this.count==1\n   */\n  variance/* = function*/(): ?number {\n    return this.count < 1 ? null : this.varianceS / (this.count - 1);\n  };\n\n  /**\n   * Return the sum of squares of differences from the current mean.\n   *\n   * @function\n   * @return {?number} the sum of squares of differences from the current mean, or null if this is undefined because the count is zero.\n   */\n  mean/* = function*/(): ?number {\n    return this.count == 0 ? null : this.varianceM;\n  };\n\n  /**\n   * Return the standard deviation, the square root of the average variance.\n   *\n   * @function\n   * @return {?number} the standard deviation, or null if this is undefined because the count is zero.\n   */\n  stdDev/* = function*/(): ?number {\n    return this.count < 1 ? null : Math.sqrt(this.variance());\n  };\n\n  /**\n   * Return the set of values in the sample.\n   *\n   * @function\n   * @return {any[]} an array of the values in the sample\n   */\n  values/* = function*/(): any[] {\n    return this.sample.getValues();\n  };\n\n  /**\n   * @function\n   * @return {Object}\n   * @property {string} type \"histogram\"\n   * @property {number} min\n   * @property {number} max\n   * @property {number} sum\n   * @property {number} variance\n   * @property {number} mean\n   * @property {number} stdDev\n   * @property {number} count\n   * @property {number} median\n   * @property {number} p75\n   * @property {number} p95\n   * @property {number} p99\n   * @property {number} p999\n   */\n  toObject/* = function*/(): Object {\n    var percentiles = this.percentiles();\n    return {\n      type: 'histogram',\n      min: this.min,\n      max: this.max,\n      sum: this.sum,\n      variance: this.variance(),\n      mean: this.mean(),\n      std_dev: this.stdDev(),\n      count: this.count,\n      median: percentiles[0.5],\n      p75: percentiles[0.75],\n      p95: percentiles[0.95],\n      p99: percentiles[0.99],\n      p999: percentiles[0.999],\n    };\n  };\n}\n",
    "static": true,
    "longname": "/home/dgross/Netifi/rsocket-rpc-js/rsocket-rpc-js/packages/metrics/src/Histogram.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 172,
    "kind": "variable",
    "name": "DEFAULT_PERCENTILES",
    "memberof": "packages/metrics/src/Histogram.js",
    "static": true,
    "longname": "packages/metrics/src/Histogram.js~DEFAULT_PERCENTILES",
    "access": "public",
    "export": true,
    "importPath": "./packages/metrics/src/Histogram.js",
    "importStyle": "{DEFAULT_PERCENTILES}",
    "description": "The default set of percentiles to use in the Histogram.",
    "lineNumber": 17,
    "type": {
      "types": [
        "number[]"
      ]
    }
  },
  {
    "__docId__": 173,
    "kind": "class",
    "name": "Histogram",
    "memberof": "packages/metrics/src/Histogram.js",
    "static": true,
    "longname": "packages/metrics/src/Histogram.js~Histogram",
    "access": "public",
    "export": true,
    "importPath": "./packages/metrics/src/Histogram.js",
    "importStyle": "{Histogram}",
    "description": "A histogram tracks the distribution of items, given a sample type.",
    "lineNumber": 22,
    "interface": false
  },
  {
    "__docId__": 174,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "packages/metrics/src/Histogram.js~Histogram",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/metrics/src/Histogram.js~Histogram#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 27,
    "params": [
      {
        "nullable": null,
        "types": [
          "ISample"
        ],
        "spread": false,
        "optional": false,
        "name": "sample",
        "description": ""
      }
    ]
  },
  {
    "__docId__": 175,
    "kind": "member",
    "name": "sample",
    "memberof": "packages/metrics/src/Histogram.js~Histogram",
    "static": false,
    "longname": "packages/metrics/src/Histogram.js~Histogram#sample",
    "access": "public",
    "description": null,
    "lineNumber": 29,
    "type": {
      "nullable": null,
      "types": [
        "ISample"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 176,
    "kind": "member",
    "name": "min",
    "memberof": "packages/metrics/src/Histogram.js~Histogram",
    "static": false,
    "longname": "packages/metrics/src/Histogram.js~Histogram#min",
    "access": "public",
    "description": null,
    "lineNumber": 31,
    "type": {
      "nullable": true,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 177,
    "kind": "member",
    "name": "max",
    "memberof": "packages/metrics/src/Histogram.js~Histogram",
    "static": false,
    "longname": "packages/metrics/src/Histogram.js~Histogram#max",
    "access": "public",
    "description": null,
    "lineNumber": 33,
    "type": {
      "nullable": true,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 178,
    "kind": "member",
    "name": "sum",
    "memberof": "packages/metrics/src/Histogram.js~Histogram",
    "static": false,
    "longname": "packages/metrics/src/Histogram.js~Histogram#sum",
    "access": "public",
    "description": null,
    "lineNumber": 35,
    "type": {
      "nullable": true,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 179,
    "kind": "member",
    "name": "varianceM",
    "memberof": "packages/metrics/src/Histogram.js~Histogram",
    "static": false,
    "longname": "packages/metrics/src/Histogram.js~Histogram#varianceM",
    "access": "public",
    "description": null,
    "lineNumber": 39,
    "type": {
      "nullable": true,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 180,
    "kind": "member",
    "name": "varianceS",
    "memberof": "packages/metrics/src/Histogram.js~Histogram",
    "static": false,
    "longname": "packages/metrics/src/Histogram.js~Histogram#varianceS",
    "access": "public",
    "description": null,
    "lineNumber": 41,
    "type": {
      "nullable": true,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 181,
    "kind": "member",
    "name": "count",
    "memberof": "packages/metrics/src/Histogram.js~Histogram",
    "static": false,
    "longname": "packages/metrics/src/Histogram.js~Histogram#count",
    "access": "public",
    "description": null,
    "lineNumber": 43,
    "type": {
      "nullable": true,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 182,
    "kind": "member",
    "name": "type",
    "memberof": "packages/metrics/src/Histogram.js~Histogram",
    "static": false,
    "longname": "packages/metrics/src/Histogram.js~Histogram#type",
    "access": "public",
    "description": null,
    "lineNumber": 45,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 183,
    "kind": "method",
    "name": "createExponentialDecayHistogram",
    "memberof": "packages/metrics/src/Histogram.js~Histogram",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "packages/metrics/src/Histogram.js~Histogram.createExponentialDecayHistogram",
    "access": "public",
    "description": "Create an exponentially decaying histogram.",
    "lineNumber": 55,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "1028",
        "defaultRaw": 1028,
        "name": "size",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "0.015",
        "defaultRaw": 0.015,
        "name": "alpha",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Histogram"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 184,
    "kind": "method",
    "name": "createUniformHistogram",
    "memberof": "packages/metrics/src/Histogram.js~Histogram",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "packages/metrics/src/Histogram.js~Histogram.createUniformHistogram",
    "access": "public",
    "description": "Create a uniformly-sampled histogram.",
    "lineNumber": 65,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "1028",
        "defaultRaw": 1028,
        "name": "size",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Histogram"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 185,
    "kind": "method",
    "name": "clear",
    "memberof": "packages/metrics/src/Histogram.js~Histogram",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/metrics/src/Histogram.js~Histogram#clear",
    "access": "public",
    "description": "Return the histogram to its default values.",
    "lineNumber": 72,
    "params": [],
    "return": null
  },
  {
    "__docId__": 192,
    "kind": "method",
    "name": "update",
    "memberof": "packages/metrics/src/Histogram.js~Histogram",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/metrics/src/Histogram.js~Histogram#update",
    "access": "public",
    "description": "timestamp param primarily used for testing",
    "lineNumber": 89,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "val",
        "description": ""
      },
      {
        "nullable": true,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "name": "timestamp",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 198,
    "kind": "method",
    "name": "updateVariance",
    "memberof": "packages/metrics/src/Histogram.js~Histogram",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/metrics/src/Histogram.js~Histogram#updateVariance",
    "access": "public",
    "description": "Set the value of the Welford algorithm variance.",
    "lineNumber": 112,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "val",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 202,
    "kind": "method",
    "name": "percentiles",
    "memberof": "packages/metrics/src/Histogram.js~Histogram",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/metrics/src/Histogram.js~Histogram#percentiles",
    "access": "public",
    "description": "Get the values for a set of percentiles.",
    "lineNumber": 130,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": true,
        "types": [
          "number[]"
        ],
        "spread": false,
        "optional": true,
        "name": "percentiles",
        "description": "An array of percentiles, expressed as decimals between zero and one. For example, [0.5, 0.75, 0.9, 0.99]. Default is {@link DEFAULT_PERCENTILES}."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number[]"
      ],
      "spread": false,
      "description": "the values for each percentile level"
    }
  },
  {
    "__docId__": 203,
    "kind": "method",
    "name": "variance",
    "memberof": "packages/metrics/src/Histogram.js~Histogram",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/metrics/src/Histogram.js~Histogram#variance",
    "access": "public",
    "description": "Return the average variance using the Welford algorithm.",
    "lineNumber": 167,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      }
    ],
    "return": {
      "nullable": true,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "the average variance, or null if this is undefined because the count is zero."
    },
    "throws": [
      {
        "types": [
          "Error"
        ],
        "description": "a divide by zero error if this.count==1"
      }
    ],
    "params": []
  },
  {
    "__docId__": 204,
    "kind": "method",
    "name": "mean",
    "memberof": "packages/metrics/src/Histogram.js~Histogram",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/metrics/src/Histogram.js~Histogram#mean",
    "access": "public",
    "description": "Return the sum of squares of differences from the current mean.",
    "lineNumber": 177,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      }
    ],
    "return": {
      "nullable": true,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "the sum of squares of differences from the current mean, or null if this is undefined because the count is zero."
    },
    "params": []
  },
  {
    "__docId__": 205,
    "kind": "method",
    "name": "stdDev",
    "memberof": "packages/metrics/src/Histogram.js~Histogram",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/metrics/src/Histogram.js~Histogram#stdDev",
    "access": "public",
    "description": "Return the standard deviation, the square root of the average variance.",
    "lineNumber": 187,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      }
    ],
    "return": {
      "nullable": true,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "the standard deviation, or null if this is undefined because the count is zero."
    },
    "params": []
  },
  {
    "__docId__": 206,
    "kind": "method",
    "name": "values",
    "memberof": "packages/metrics/src/Histogram.js~Histogram",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/metrics/src/Histogram.js~Histogram#values",
    "access": "public",
    "description": "Return the set of values in the sample.",
    "lineNumber": 197,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "any[]"
      ],
      "spread": false,
      "description": "an array of the values in the sample"
    },
    "params": []
  },
  {
    "__docId__": 207,
    "kind": "method",
    "name": "toObject",
    "memberof": "packages/metrics/src/Histogram.js~Histogram",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/metrics/src/Histogram.js~Histogram#toObject",
    "access": "public",
    "description": "",
    "lineNumber": 218,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "type",
        "description": "\"histogram\""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "min",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "max",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "sum",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "variance",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "mean",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "stdDev",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "count",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "median",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "p75",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "p95",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "p99",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "p999",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 208,
    "kind": "file",
    "name": "packages/metrics/src/IMeter.js",
    "content": "/**\n * @name IMeter.js\n * @fileoverview Defines the IMeter interface.\n * @copyright Copyright (c) 2017-present, Netifi Inc.\n * @license Apache-2.0\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @flow\n *\n * @requires RawMeterTag\n * @requires metrics_pb\n * @exports IMeter\n */\n\n'use strict';\n\nimport RawMeterTag from './RawMeterTag';\nimport {Meter} from './proto/metrics_pb';\n\n/**\n */\nexport interface IMeter {\n  name: string;\n  description: ?string;\n  statistic: string;\n  type: string;\n  tags: RawMeterTag[];\n  units?: string;\n\n  /**\n   * @abstract\n   * @returns {Object}\n   */\n  rates(): Object;\n\n  /**\n   * @abstract\n   * @param {function} converter\n   * @returns {Meter[]}\n   */\n  convert(converter: (IMeter) => Meter[]): Meter[];\n}\n",
    "static": true,
    "longname": "/home/dgross/Netifi/rsocket-rpc-js/rsocket-rpc-js/packages/metrics/src/IMeter.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 209,
    "kind": "file",
    "name": "packages/metrics/src/IMeterRegistry.js",
    "content": "/**\n * @name IMeterRegistry.js\n * @fileoverview Defines the \"IMeterRegistry\" interface.\n * @copyright Copyright (c) 2017-present, Netifi Inc.\n * @license Apache-2.0\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @flow\n *\n * @requires IMeter\n * @exports IMeterRegistry\n */\n\n'use strict';\n\nimport type {IMeter} from './IMeter';\n\n/**\n * This represents any container class that can store handles to Meters and\n * deliver them as a collection.\n * @interface\n */\nexport interface IMeterRegistry {\n  /**\n   * @function\n   * @param {IMeter} meter\n   */\n  registerMeter(meter: IMeter): void;\n  /**\n   * @function\n   * @param {IMeter[]} meters\n   */\n  registerMeters(meters: IMeter[]): void;\n  /**\n   * @function\n   * @returns {IMeter[]}\n   */\n  meters(): IMeter[];\n}\n",
    "static": true,
    "longname": "/home/dgross/Netifi/rsocket-rpc-js/rsocket-rpc-js/packages/metrics/src/IMeterRegistry.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 210,
    "kind": "file",
    "name": "packages/metrics/src/Metrics.js",
    "content": "/**\n * @name Metrics.js\n * @fileoverview Defines the \"Metrics\" class\n * @copyright Copyright (c) 2017-present, Netifi Inc.\n * @license Apache-2.0\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @flow\n *\n * @requires Counter\n * @requires Timer\n * @requires IMeterRegistry\n * @requires RawMeterTag\n * @requires MetricsSingleSubscriber\n * @requires MetricsSubscriber\n * @requires NPM:rsocket-flowable\n * @exports Metrics\n */\n\n'use strict';\n\nimport Counter from './Counter';\nimport Timer from './Timer';\nimport {IMeterRegistry} from './IMeterRegistry';\nimport RawMeterTag from './RawMeterTag';\nimport embedMetricsSingleSubscriber from './MetricsSingleSubscriber';\nimport MetricsSubscriber from './MetricsSubscriber';\nimport {Flowable, Single} from 'rsocket-flowable';\n\n/**\n */\nexport default class Metrics {\n  constructor() {}\n\n  /**\n   * @param {?IMeterRegistry} [registry] -\n   * @param {string} name -\n   * @param {Object[]} tags -\n   * @returns {function} a wrapping function through which you weave your RSocket calls\n   * @example\n   * const metricsWrapper = timed(myMeterRegistry, \"my.function.name\", {tag1: \"tag\"}, {anotherTag: \"again\"});\n   * const responseStream = rsocket.requestStream(requestPayload);\n   * metricsWrapper(responseStream).subscribe(...);\n   */\n  static timed<T>(\n    registry?: IMeterRegistry,\n    name: string,\n    ...tags: Object[]\n  ): (Flowable<T>) => Flowable<T> {\n    // Registry is optional - if not provided, return identity function\n    if (!registry) {\n      return any => any;\n    }\n\n    const convertedTags = [];\n    if (tags) {\n      tags.forEach(tag => {\n        Object.keys(tag).forEach(key => {\n          convertedTags.push(new RawMeterTag(key, tag[key]));\n        });\n      });\n    }\n\n    const next = new Counter(\n      name + '.request',\n      'onNext calls',\n      'integer',\n      [new RawMeterTag('status', 'next')].concat(convertedTags),\n    );\n    const complete = new Counter(\n      name + '.request',\n      'onComplete calls',\n      'integer',\n      [new RawMeterTag('status', 'complete')].concat(convertedTags),\n    );\n    const error = new Counter(\n      name + '.request',\n      'onError calls',\n      'integer',\n      [new RawMeterTag('status', 'error')].concat(convertedTags),\n    );\n    const cancelled = new Counter(\n      name + '.request',\n      'cancel calls',\n      'integer',\n      [new RawMeterTag('status', 'cancelled')].concat(convertedTags),\n    );\n    const timer = new Timer(name + '.latency', undefined, convertedTags);\n\n    registry.registerMeters([next, complete, error, cancelled, timer]);\n\n    return (flowable: Flowable<T>) =>\n      flowable.lift(\n        subscriber =>\n          new MetricsSubscriber(\n            subscriber,\n            next,\n            complete,\n            error,\n            cancelled,\n            timer,\n          ),\n      );\n  }\n\n  /**\n   * @param {?IMeterRegistry} [registry] -\n   * @param {string} name -\n   * @param {Object[]} tags -\n   * @returns {function} a wrapping function through which you weave your RSocket calls\n   * @example\n   * const metricsWrapper = timedSingle(myMeterRegistry, \"my.function.name\", {tag1: \"tag\"}, {anotherTag: \"again\"});\n   * const responseStream = rsocket.requestStream(requestPayload);\n   * metricsWrapper(responseStream).subscribe(...);\n   */\n  static timedSingle<T>(\n    registry?: IMeterRegistry,\n    name: string,\n    ...tags: Object[]\n  ): (Single<T>) => Single<T> {\n    // Registry is optional - if not provided, return identity function\n    if (!registry) {\n      return any => any;\n    }\n\n    const convertedTags = [];\n    if (tags) {\n      tags.forEach(tag => {\n        Object.keys(tag).forEach(key => {\n          convertedTags.push(new RawMeterTag(key, tag[key]));\n        });\n      });\n    }\n\n    const next = new Counter(\n      name + '.request',\n      'onNext calls',\n      'integer',\n      [new RawMeterTag('status', 'next')].concat(convertedTags),\n    );\n    const complete = new Counter(\n      name + '.request',\n      'onComplete calls',\n      'integer',\n      [new RawMeterTag('status', 'complete')].concat(convertedTags),\n    );\n    const error = new Counter(\n      name + '.request',\n      'onError calls',\n      'integer',\n      [new RawMeterTag('status', 'error')].concat(convertedTags),\n    );\n    const cancelled = new Counter(\n      name + '.request',\n      'cancel calls',\n      'integer',\n      [new RawMeterTag('status', 'cancelled')].concat(convertedTags),\n    );\n    const timer = new Timer(name + '.latency', undefined, convertedTags);\n\n    registry.registerMeters([next, complete, error, cancelled, timer]);\n\n    return (single: Single<T>) =>\n      embedMetricsSingleSubscriber(\n        single,\n        next,\n        complete,\n        error,\n        cancelled,\n        timer,\n      );\n  }\n}\n",
    "static": true,
    "longname": "/home/dgross/Netifi/rsocket-rpc-js/rsocket-rpc-js/packages/metrics/src/Metrics.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 211,
    "kind": "class",
    "name": "Metrics",
    "memberof": "packages/metrics/src/Metrics.js",
    "static": true,
    "longname": "packages/metrics/src/Metrics.js~Metrics",
    "access": "public",
    "export": true,
    "importPath": "./packages/metrics/src/Metrics.js",
    "importStyle": "Metrics",
    "description": "",
    "lineNumber": 43,
    "interface": false
  },
  {
    "__docId__": 212,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "packages/metrics/src/Metrics.js~Metrics",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/metrics/src/Metrics.js~Metrics#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 44,
    "undocument": true
  },
  {
    "__docId__": 213,
    "kind": "method",
    "name": "timed",
    "memberof": "packages/metrics/src/Metrics.js~Metrics",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "packages/metrics/src/Metrics.js~Metrics.timed",
    "access": "public",
    "description": "",
    "examples": [
      "const metricsWrapper = timed(myMeterRegistry, \"my.function.name\", {tag1: \"tag\"}, {anotherTag: \"again\"});\nconst responseStream = rsocket.requestStream(requestPayload);\nmetricsWrapper(responseStream).subscribe(...);"
    ],
    "lineNumber": 56,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{function} a wrapping function through which you weave your RSocket calls"
      }
    ],
    "params": [
      {
        "nullable": true,
        "types": [
          "IMeterRegistry"
        ],
        "spread": false,
        "optional": true,
        "name": "registry",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Object[]"
        ],
        "spread": false,
        "optional": false,
        "name": "tags",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "function"
      ],
      "spread": false,
      "description": "a wrapping function through which you weave your RSocket calls"
    }
  },
  {
    "__docId__": 214,
    "kind": "method",
    "name": "timedSingle",
    "memberof": "packages/metrics/src/Metrics.js~Metrics",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "packages/metrics/src/Metrics.js~Metrics.timedSingle",
    "access": "public",
    "description": "",
    "examples": [
      "const metricsWrapper = timedSingle(myMeterRegistry, \"my.function.name\", {tag1: \"tag\"}, {anotherTag: \"again\"});\nconst responseStream = rsocket.requestStream(requestPayload);\nmetricsWrapper(responseStream).subscribe(...);"
    ],
    "lineNumber": 92,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{function} a wrapping function through which you weave your RSocket calls"
      }
    ],
    "params": [
      {
        "nullable": true,
        "types": [
          "IMeterRegistry"
        ],
        "spread": false,
        "optional": true,
        "name": "registry",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Object[]"
        ],
        "spread": false,
        "optional": false,
        "name": "tags",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "function"
      ],
      "spread": false,
      "description": "a wrapping function through which you weave your RSocket calls"
    }
  },
  {
    "__docId__": 215,
    "kind": "file",
    "name": "packages/metrics/src/MetricsExporter.js",
    "content": "/**\n * @name MetricsExporter.js\n * @fileoverview Defines the MetricsExporter class\n * @copyright Copyright (c) 2017-present, Netifi Inc.\n * @license Apache-2.0\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @flow\n *\n * @requires NPM:rsocket-types\n * @requires NPM:rsocket-flowable\n * @requires metrics_pb\n * @requires metrics_rsocket_pb\n * @requires RawMeterTag\n * @requires Timer\n * @requires IMeterRegistry\n * @requires IMeter\n * @exports MetricsExporter\n */\n\n'use strict';\n\nimport {ISubscriber} from 'rsocket-types';\nimport {Flowable} from 'rsocket-flowable';\nimport {\n  Meter,\n  MeterId,\n  MeterMeasurement,\n  MetricsSnapshot,\n  MeterStatistic,\n  MeterType,\n  MeterTag,\n  Skew,\n} from './proto/metrics_pb';\nimport {MetricsSnapshotHandlerClient} from './proto/metrics_rsocket_pb';\nimport RawMeterTag from './RawMeterTag';\nimport Timer from './Timer';\nimport {IMeterRegistry} from './IMeterRegistry';\nimport type {IMeter} from './IMeter';\n\n/**\n * An RSocket native metrics source.\n * @example\n * const meters = new SimpleMeterRegistry();\n * const snapshotClient = new MetricsSnapshotHandlerClient(rsocket);\n * metricsExporter = new MetricsExporter(snapshotClient, meters, 60, 1024);\n * metricsExporter.start();\n * @todo use {@link MetricsExporter#batchSize} to window the snapshots\n */\nexport default class MetricsExporter {\n  handler: MetricsSnapshotHandlerClient;\n  registry: IMeterRegistry;\n  exportPeriodSeconds: number;\n  batchSize: number;\n  intervalHandle: any;\n  remoteSubscriber: ?ISubscriber<MetricsSnapshot>;\n  remoteCancel: () => void;\n\n  /**\n   * @param {MetricsSnapshotHandlerClient} handler -\n   * @param {IMeterRegistry} registry -\n   * @param {number} exportPeriodSeconds - \n   * @param {number} batchSize - metrics count\n  */\n  constructor(\n    handler: MetricsSnapshotHandlerClient,\n    registry: IMeterRegistry,\n    exportPeriodSeconds: number,\n    batchSize: number,\n  ) {\n    /** @type {MetricsSnapshotHandlerClient} */\n    this.handler = handler;\n    /** @type {IMeterRegistry} */\n    this.registry = registry;\n    /** @type {number} */\n    this.exportPeriodSeconds = exportPeriodSeconds;\n    /** @type {number} */\n    this.batchSize = batchSize; // TODO: use this to window the snapshots\n  }\n\n  /**\n   * Open the channel and begin to send metrics.\n   * This is not re-entrant since we rely on the periodic event of the\n   * interval timer.\n   *\n   * @throws {Error} if a metrics snapshot stream is already subscribed\n   */\n  start() {\n    // Not re-entrant since we rely on the periodic event of the interval timer\n    if (this.intervalHandle) {\n      throw new Error('A metrics snapshot stream is already subscribed');\n    }\n\n    this.handler\n      .streamMetrics(getMetricsSnapshotStream(this), Buffer.alloc(0))\n      .subscribe({\n        onNext: skew => recordClockSkew(skew),\n        onComplete: () => restart(this),\n        onError: error => {\n          console.log('MetricsExporter error:' + error);\n          restart(this);\n        },\n        onSubscribe: subscription => {\n          /** @type {function} */\n          this.remoteCancel = subscription.cancel;\n          subscription.request(2147483647); // FaceBook thing - their Flowable only allows this\n        },\n      });\n  }\n\n  /**\n   * Stop sending metrics\n   */\n  stop() {\n    if (this.remoteCancel) {\n      this.remoteCancel();\n    }\n\n    if (this.remoteSubscriber) {\n      this.remoteSubscriber.onComplete();\n      /** @type {ISubscriber<MetricsSnapshot>} */\n      this.remoteSubscriber = null;\n    }\n\n    if (this.intervalHandle) {\n      clearInterval(this.intervalHandle);\n      /** @type {any} */\n      this.intervalHandle = null;\n    }\n  }\n}\n\n/**\n * Stops and then restarts the given {@link MetricsExporter}.\n *\n * @param {MetricsExporter} exporter\n */\nfunction restart(exporter: MetricsExporter) {\n  exporter.stop();\n  exporter.start();\n}\n\n/**\n * @param {MetricsExporter} exporter\n * @return {Flowable<MetricsSnapshot>} Subscribe to this Flowable to get periodic metrics updates.\n */\nfunction getMetricsSnapshotStream(\n  exporter: MetricsExporter,\n): Flowable<MetricsSnapshot> {\n  return new Flowable(subscriber => {\n    if (exporter.intervalHandle) {\n      subscriber.onError(\n        new Error('A metrics snapshot stream is already subscribed'),\n      );\n      return;\n    }\n\n    // Retain handle to subscriber so that we can complete on manual stop\n    exporter.remoteSubscriber = subscriber;\n\n    let pending = 0;\n    console.log(\n      'Setting interval for ' +\n        exporter.exportPeriodSeconds * 1000 +\n        ' milliseconds',\n    );\n    exporter.intervalHandle = setInterval(() => {\n      if (pending > 0) {\n        const allMeters = Array.prototype.concat.apply(\n          [],\n          exporter.registry.meters().map(convert),\n        );\n        const meterSnapshot = allMeters.reduce((snapshot, meter) => {\n          snapshot.addMeters(meter);\n          return snapshot;\n        }, new MetricsSnapshot());\n\n        subscriber.onNext(meterSnapshot);\n        pending--;\n      }\n    }, exporter.exportPeriodSeconds * 1000);\n\n    subscriber.onSubscribe({\n      cancel: () => {\n        // They won't care about the \"complete\" in this case, remove reference\n        exporter.remoteSubscriber = null;\n        exporter.stop();\n      },\n      request: n => {\n        pending += n;\n      },\n    });\n  });\n}\n\n/**\n * @param {IMeter} meter\n * @return {Meter[]}\n * @throws {Error} if {@link meter} is of an unknown {@link IMeter.type}.\n */\nfunction convert(meter: IMeter): Meter[] {\n  const meterType = meterTypeLookup(meter.type);\n  switch (meterType) {\n    case MeterType.TIMER:\n      return meter.convert(convertTimer);\n    case MeterType.COUNTER:\n    case MeterType.GAUGE:\n    case MeterType.LONG_TASK_TIMER:\n    case MeterType.DISTRIBUTION_SUMMARY:\n    case MeterType.OTHER:\n      return meter.convert(basicConverter);\n    default:\n      throw new Error('unsupported type ' + meterType);\n  }\n}\n\n/**\n * Return a {@link MeterType} enum corresponding to the name of a meter type.\n *\n * @param {string} meterType - one of \"gauge\", \"timer\", \"counter\", \"longTaskTimer\", \"distribtionSummary\", or \"other\"\n * @return a {@link MeterType} enum corresponding to the {@link meterType} string\n * @throws {Error} if a string not among the above values is submitted as the {@link meterType} parameter\n */\nfunction meterTypeLookup(meterType: string): MeterType {\n  switch (meterType) {\n    case 'gauge':\n      return MeterType.GAUGE;\n    case 'timer':\n      return MeterType.TIMER;\n    case 'counter':\n      return MeterType.COUNTER;\n    case 'longTaskTimer':\n      return MeterType.LONG_TASK_TIMER;\n    case 'distributionSummary':\n      return MeterType.DISTRIBUTION_SUMMARY;\n    case 'other':\n      return MeterType.OTHER;\n    default:\n      throw new Error('unknown type ' + meterType);\n  }\n}\n\n/**\n * Return a {@link MeterStatistic} enum corresponding to the name of a meter statistic.\n *\n * @param {string} statistic - one of \"max\", \"count\", \"total\", \"value\", \"unknown\", \"duration\", \"totalTime\", or \"activeTasks\"\n * @return a {@link MeterStatistic} enum corresponding to the {@link statistic} string\n * @throws {Error} if a string not among the above values is submitted as the {@link statistic} parameter\n */\nfunction statisticTypeLookup(statistic: string): MeterStatistic {\n  switch (statistic) {\n    case 'max':\n      return MeterStatistic.MAX;\n    case 'count':\n      return MeterStatistic.COUNT;\n    case 'total':\n      return MeterStatistic.TOTAL;\n    case 'value':\n      return MeterStatistic.VALUE;\n    case 'unknown':\n      return MeterStatistic.UNKNOWN;\n    case 'duration':\n      return MeterStatistic.DURATION;\n    case 'totalTime':\n      return MeterStatistic.TOTAL_TIME;\n    case 'activeTasks':\n      return MeterStatistic.ACTIVE_TASKS;\n    default:\n      throw new Error('unknown type ' + statistic);\n  }\n}\n\n/**\n * @param {IMeter} imeter\n * @return {Meter[]}\n * @throws {Error} if {@link imeter} is not a {@link Timer}\n */\nfunction convertTimer(imeter: IMeter): Meter[] {\n  if (!(imeter instanceof Timer)) {\n    throw new Error('Meter is not an instance of Timer');\n  }\n\n  const timer = (imeter: Timer);\n  const meters = [];\n  const name = timer.name;\n  const tags = convertTags(timer.tags);\n\n  // Add meters for percentiles of interest\n  const valuesSnapshot = timer.percentiles();\n  Object.keys(valuesSnapshot).forEach(percentile => {\n    const value = toNanoseconds(valuesSnapshot[percentile]);\n    // Make sure we're dealing with a real value before pushing\n    if (!isNaN(value)) {\n      const meter = new Meter();\n\n      const percentileTag = new MeterTag();\n      percentileTag.setKey('percentile');\n      percentileTag.setValue(percentile);\n\n      const meterId = new MeterId();\n      meterId.setName(name);\n      tags.forEach(tag => meterId.addTag(tag));\n      meterId.addTag(percentileTag);\n      meterId.setType(MeterType.TIMER);\n      meterId.setDescription(timer.description);\n      meterId.setBaseunit('nanoseconds');\n\n      meter.setId(meterId);\n\n      const measure = new MeterMeasurement();\n      measure.setValue(value);\n      measure.setStatistic(statisticTypeLookup(timer.statistic));\n\n      meter.addMeasure(measure);\n\n      meters.push(meter);\n    }\n  });\n\n  // add a meter for total count and max time\n  const histMeter = new Meter();\n\n  const meterId = new MeterId();\n  meterId.setName(name);\n  tags.forEach(tag => meterId.addTag(tag));\n  meterId.setType(MeterType.TIMER);\n  meterId.setDescription(timer.description);\n  meterId.setBaseunit('nanoseconds');\n\n  const totalCount = new MeterMeasurement();\n  totalCount.setValue(timer.totalCount());\n  totalCount.setStatistic(MeterStatistic.COUNT);\n  histMeter.addMeasure(totalCount);\n\n  const maxTime = new MeterMeasurement();\n  maxTime.setValue(timer.max());\n  maxTime.setStatistic(MeterStatistic.MAX);\n  histMeter.addMeasure(maxTime);\n\n  histMeter.setId(meterId);\n\n  meters.push(histMeter);\n\n  return meters;\n}\n\n/**\n * @param {IMeter} imeter\n * @return {Meter[]}\n */\nfunction basicConverter(imeter: IMeter): Meter[] {\n  const meters = [];\n  const name = imeter.name;\n  const tags = convertTags(imeter.tags);\n\n  // Add meters for different windowed EWMAs\n  const valuesSnapshot = imeter.rates();\n  Object.keys(valuesSnapshot).forEach(rate => {\n    const meter = new Meter();\n\n    const value = valuesSnapshot[rate];\n    const ewmaTag = new MeterTag();\n    ewmaTag.setKey('moving-average-minutes');\n    ewmaTag.setValue(rate);\n\n    const meterId = new MeterId();\n    meterId.setName(name);\n    tags.forEach(tag => meterId.addTag(tag));\n    meterId.addTag(ewmaTag);\n    meterId.setType(meterTypeLookup(imeter.type));\n    meterId.setDescription(imeter.description);\n    meterId.setBaseunit(imeter.units);\n\n    meter.setId(meterId);\n\n    const measure = new MeterMeasurement();\n    measure.setValue(value);\n    measure.setStatistic(statisticTypeLookup(imeter.statistic));\n\n    meter.addMeasure(measure);\n\n    meters.push(meter);\n  });\n\n  return meters;\n}\n\n/**\n * @param {RawMeterTag[]} tags\n * @return {MeterTag[]}\n */\nfunction convertTags(tags: RawMeterTag[]): MeterTag[] {\n  return (tags || []).map(tag => {\n    const finalTag = new MeterTag();\n    finalTag.setKey(tag.key);\n    finalTag.setValue(tag.value);\n    return finalTag;\n  });\n}\n\n/**\n * Convert milliseconds to nanoseconds.\n * Note: this is not safe for timestamps, just time measurements.\n *\n * @param {number} milliseconds - a number of milliseconds to convert\n * @return {number} the value of {@link milliseconds} converted to nanoseconds\n */\nfunction toNanoseconds(milliseconds: number) {\n  return milliseconds * 1000 * 1000;\n}\n\n/**\n * Not currently functional.\n *\n * @todo Do something with this?\n * @param {Skew} skew\n */\nfunction recordClockSkew(skew: Skew): void {\n  // TODO: do something with this?\n  return;\n}\n",
    "static": true,
    "longname": "/home/dgross/Netifi/rsocket-rpc-js/rsocket-rpc-js/packages/metrics/src/MetricsExporter.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 216,
    "kind": "class",
    "name": "MetricsExporter",
    "memberof": "packages/metrics/src/MetricsExporter.js",
    "static": true,
    "longname": "packages/metrics/src/MetricsExporter.js~MetricsExporter",
    "access": "public",
    "export": true,
    "importPath": "./packages/metrics/src/MetricsExporter.js",
    "importStyle": "MetricsExporter",
    "description": "An RSocket native metrics source.",
    "examples": [
      "const meters = new SimpleMeterRegistry();\nconst snapshotClient = new MetricsSnapshotHandlerClient(rsocket);\nmetricsExporter = new MetricsExporter(snapshotClient, meters, 60, 1024);\nmetricsExporter.start();"
    ],
    "lineNumber": 52,
    "todo": [
      "use {@link MetricsExporter#batchSize} to window the snapshots"
    ],
    "interface": false
  },
  {
    "__docId__": 217,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "packages/metrics/src/MetricsExporter.js~MetricsExporter",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/metrics/src/MetricsExporter.js~MetricsExporter#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 60,
    "params": [
      {
        "nullable": null,
        "types": [
          "MetricsSnapshotHandlerClient"
        ],
        "spread": false,
        "optional": false,
        "name": "handler",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "IMeterRegistry"
        ],
        "spread": false,
        "optional": false,
        "name": "registry",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "exportPeriodSeconds",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "batchSize",
        "description": "metrics count"
      }
    ]
  },
  {
    "__docId__": 218,
    "kind": "member",
    "name": "handler",
    "memberof": "packages/metrics/src/MetricsExporter.js~MetricsExporter",
    "static": false,
    "longname": "packages/metrics/src/MetricsExporter.js~MetricsExporter#handler",
    "access": "public",
    "description": null,
    "lineNumber": 62,
    "type": {
      "nullable": null,
      "types": [
        "MetricsSnapshotHandlerClient"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 219,
    "kind": "member",
    "name": "registry",
    "memberof": "packages/metrics/src/MetricsExporter.js~MetricsExporter",
    "static": false,
    "longname": "packages/metrics/src/MetricsExporter.js~MetricsExporter#registry",
    "access": "public",
    "description": null,
    "lineNumber": 64,
    "type": {
      "nullable": null,
      "types": [
        "IMeterRegistry"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 220,
    "kind": "member",
    "name": "exportPeriodSeconds",
    "memberof": "packages/metrics/src/MetricsExporter.js~MetricsExporter",
    "static": false,
    "longname": "packages/metrics/src/MetricsExporter.js~MetricsExporter#exportPeriodSeconds",
    "access": "public",
    "description": null,
    "lineNumber": 66,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 221,
    "kind": "member",
    "name": "batchSize",
    "memberof": "packages/metrics/src/MetricsExporter.js~MetricsExporter",
    "static": false,
    "longname": "packages/metrics/src/MetricsExporter.js~MetricsExporter#batchSize",
    "access": "public",
    "description": null,
    "lineNumber": 68,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 222,
    "kind": "method",
    "name": "start",
    "memberof": "packages/metrics/src/MetricsExporter.js~MetricsExporter",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/metrics/src/MetricsExporter.js~MetricsExporter#start",
    "access": "public",
    "description": "Open the channel and begin to send metrics.\nThis is not re-entrant since we rely on the periodic event of the\ninterval timer.",
    "lineNumber": 78,
    "throws": [
      {
        "types": [
          "Error"
        ],
        "description": "if a metrics snapshot stream is already subscribed"
      }
    ],
    "params": [],
    "return": null
  },
  {
    "__docId__": 223,
    "kind": "member",
    "name": "remoteCancel",
    "memberof": "packages/metrics/src/MetricsExporter.js~MetricsExporter",
    "static": false,
    "longname": "packages/metrics/src/MetricsExporter.js~MetricsExporter#remoteCancel",
    "access": "public",
    "description": null,
    "lineNumber": 93,
    "type": {
      "nullable": null,
      "types": [
        "function"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 224,
    "kind": "method",
    "name": "stop",
    "memberof": "packages/metrics/src/MetricsExporter.js~MetricsExporter",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/metrics/src/MetricsExporter.js~MetricsExporter#stop",
    "access": "public",
    "description": "Stop sending metrics",
    "lineNumber": 102,
    "params": [],
    "return": null
  },
  {
    "__docId__": 225,
    "kind": "member",
    "name": "remoteSubscriber",
    "memberof": "packages/metrics/src/MetricsExporter.js~MetricsExporter",
    "static": false,
    "longname": "packages/metrics/src/MetricsExporter.js~MetricsExporter#remoteSubscriber",
    "access": "public",
    "description": null,
    "lineNumber": 110,
    "type": {
      "nullable": null,
      "types": [
        "ISubscriber<MetricsSnapshot>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 226,
    "kind": "member",
    "name": "intervalHandle",
    "memberof": "packages/metrics/src/MetricsExporter.js~MetricsExporter",
    "static": false,
    "longname": "packages/metrics/src/MetricsExporter.js~MetricsExporter#intervalHandle",
    "access": "public",
    "description": null,
    "lineNumber": 116,
    "type": {
      "nullable": null,
      "types": [
        "any"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 227,
    "kind": "function",
    "name": "restart",
    "memberof": "packages/metrics/src/MetricsExporter.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "packages/metrics/src/MetricsExporter.js~restart",
    "access": "public",
    "export": false,
    "importPath": "./packages/metrics/src/MetricsExporter.js",
    "importStyle": null,
    "description": "Stops and then restarts the given {@link MetricsExporter}.",
    "lineNumber": 126,
    "params": [
      {
        "nullable": null,
        "types": [
          "MetricsExporter"
        ],
        "spread": false,
        "optional": false,
        "name": "exporter",
        "description": ""
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 228,
    "kind": "function",
    "name": "getMetricsSnapshotStream",
    "memberof": "packages/metrics/src/MetricsExporter.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "packages/metrics/src/MetricsExporter.js~getMetricsSnapshotStream",
    "access": "public",
    "export": false,
    "importPath": "./packages/metrics/src/MetricsExporter.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 135,
    "params": [
      {
        "nullable": null,
        "types": [
          "MetricsExporter"
        ],
        "spread": false,
        "optional": false,
        "name": "exporter",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Flowable<MetricsSnapshot>"
      ],
      "spread": false,
      "description": "Subscribe to this Flowable to get periodic metrics updates."
    },
    "ignore": true
  },
  {
    "__docId__": 229,
    "kind": "function",
    "name": "convert",
    "memberof": "packages/metrics/src/MetricsExporter.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "packages/metrics/src/MetricsExporter.js~convert",
    "access": "public",
    "export": false,
    "importPath": "./packages/metrics/src/MetricsExporter.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 178,
    "params": [
      {
        "nullable": null,
        "types": [
          "IMeter"
        ],
        "spread": false,
        "optional": false,
        "name": "meter",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Meter[]"
      ],
      "spread": false,
      "description": ""
    },
    "throws": [
      {
        "types": [
          "Error"
        ],
        "description": "if {@link meter} is of an unknown {@link IMeter.type}."
      }
    ],
    "ignore": true
  },
  {
    "__docId__": 230,
    "kind": "function",
    "name": "meterTypeLookup",
    "memberof": "packages/metrics/src/MetricsExporter.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "packages/metrics/src/MetricsExporter.js~meterTypeLookup",
    "access": "public",
    "export": false,
    "importPath": "./packages/metrics/src/MetricsExporter.js",
    "importStyle": null,
    "description": "Return a {@link MeterType} enum corresponding to the name of a meter type.",
    "lineNumber": 201,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "meterType",
        "description": "one of \"gauge\", \"timer\", \"counter\", \"longTaskTimer\", \"distribtionSummary\", or \"other\""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "a {@link MeterType} enum corresponding to the {@link meterType} string"
    },
    "throws": [
      {
        "types": [
          "Error"
        ],
        "description": "if a string not among the above values is submitted as the {@link meterType} parameter"
      }
    ],
    "ignore": true
  },
  {
    "__docId__": 231,
    "kind": "function",
    "name": "statisticTypeLookup",
    "memberof": "packages/metrics/src/MetricsExporter.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "packages/metrics/src/MetricsExporter.js~statisticTypeLookup",
    "access": "public",
    "export": false,
    "importPath": "./packages/metrics/src/MetricsExporter.js",
    "importStyle": null,
    "description": "Return a {@link MeterStatistic} enum corresponding to the name of a meter statistic.",
    "lineNumber": 227,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "statistic",
        "description": "one of \"max\", \"count\", \"total\", \"value\", \"unknown\", \"duration\", \"totalTime\", or \"activeTasks\""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "a {@link MeterStatistic} enum corresponding to the {@link statistic} string"
    },
    "throws": [
      {
        "types": [
          "Error"
        ],
        "description": "if a string not among the above values is submitted as the {@link statistic} parameter"
      }
    ],
    "ignore": true
  },
  {
    "__docId__": 232,
    "kind": "function",
    "name": "convertTimer",
    "memberof": "packages/metrics/src/MetricsExporter.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "packages/metrics/src/MetricsExporter.js~convertTimer",
    "access": "public",
    "export": false,
    "importPath": "./packages/metrics/src/MetricsExporter.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 255,
    "params": [
      {
        "nullable": null,
        "types": [
          "IMeter"
        ],
        "spread": false,
        "optional": false,
        "name": "imeter",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Meter[]"
      ],
      "spread": false,
      "description": ""
    },
    "throws": [
      {
        "types": [
          "Error"
        ],
        "description": "if {@link imeter} is not a {@link Timer}"
      }
    ],
    "ignore": true
  },
  {
    "__docId__": 233,
    "kind": "function",
    "name": "basicConverter",
    "memberof": "packages/metrics/src/MetricsExporter.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "packages/metrics/src/MetricsExporter.js~basicConverter",
    "access": "public",
    "export": false,
    "importPath": "./packages/metrics/src/MetricsExporter.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 328,
    "params": [
      {
        "nullable": null,
        "types": [
          "IMeter"
        ],
        "spread": false,
        "optional": false,
        "name": "imeter",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Meter[]"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 234,
    "kind": "function",
    "name": "convertTags",
    "memberof": "packages/metrics/src/MetricsExporter.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "packages/metrics/src/MetricsExporter.js~convertTags",
    "access": "public",
    "export": false,
    "importPath": "./packages/metrics/src/MetricsExporter.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 369,
    "params": [
      {
        "nullable": null,
        "types": [
          "RawMeterTag[]"
        ],
        "spread": false,
        "optional": false,
        "name": "tags",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "MeterTag[]"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 235,
    "kind": "function",
    "name": "toNanoseconds",
    "memberof": "packages/metrics/src/MetricsExporter.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "packages/metrics/src/MetricsExporter.js~toNanoseconds",
    "access": "public",
    "export": false,
    "importPath": "./packages/metrics/src/MetricsExporter.js",
    "importStyle": null,
    "description": "Convert milliseconds to nanoseconds.\nNote: this is not safe for timestamps, just time measurements.",
    "lineNumber": 385,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "milliseconds",
        "description": "a number of milliseconds to convert"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "the value of {@link milliseconds} converted to nanoseconds"
    },
    "ignore": true
  },
  {
    "__docId__": 236,
    "kind": "function",
    "name": "recordClockSkew",
    "memberof": "packages/metrics/src/MetricsExporter.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "packages/metrics/src/MetricsExporter.js~recordClockSkew",
    "access": "public",
    "export": false,
    "importPath": "./packages/metrics/src/MetricsExporter.js",
    "importStyle": null,
    "description": "Not currently functional.",
    "lineNumber": 395,
    "todo": [
      "Do something with this?"
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Skew"
        ],
        "spread": false,
        "optional": false,
        "name": "skew",
        "description": ""
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 237,
    "kind": "file",
    "name": "packages/metrics/src/MetricsSingleSubscriber.js",
    "content": "/**\n * @name MetricsSingleSubscriber.js\n * @fileoverview Defines the MetricsSingleSubscriber class.\n * @copyright Copyright (c) 2017-present, Netifi Inc.\n * @license Apache-2.0\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @flow\n * @requires Counter\n * @requires Timer\n * @requires NPM:rsocket-flowable\n * @exports embedMetricsSingleSubscriber\n */\n\n'use strict';\n\nimport Counter from './Counter';\nimport Timer from './Timer';\nimport {Single} from 'rsocket-flowable';\nimport type {IFutureSubscriber} from 'rsocket-flowable/build/Single';\n\n/**\n * @param {Single<T>} single -\n * @param {Counter} next -\n * @param {Counter} complete -\n * @param {Counter} error -\n * @param {Counter} cancelled -\n * @param {Timer} timer -\n * @return {Single}\n */\nexport default function embedMetricsSingleSubscriber<T>(\n  single: Single<T>,\n  next: Counter,\n  complete: Counter,\n  error: Counter,\n  cancelled: Counter,\n  timer: Timer,\n): Single<T> {\n  return new Single(subscriber => {\n    const metricsSubscriber = new MetricsSingleSubscriber(\n      subscriber,\n      next,\n      complete,\n      error,\n      cancelled,\n      timer,\n    );\n    single.subscribe(metricsSubscriber);\n  });\n}\n\n/**\n */\nclass MetricsSingleSubscriber<T> implements IFutureSubscriber<T> {\n  _source: IFutureSubscriber<T>;\n  _next: Counter;\n  _complete: Counter;\n  _error: Counter;\n  _cancelled: Counter;\n  _timer: Timer;\n\n  _cancel: () => void;\n  _start: number;\n\n  /**\n   * @param {IFutureSubscriber<T>} actual -\n   * @param {Counter} next -\n   * @param {Counter} complete -\n   * @param {Counter} error -\n   * @param {Counter} cancelled -\n   * @param {Timer} timer -\n   */\n  constructor(\n    actual: IFutureSubscriber<T>,\n    next: Counter,\n    complete: Counter,\n    error: Counter,\n    cancelled: Counter,\n    timer: Timer,\n  ) {\n    this._source = actual;\n    this._next = next;\n    this._complete = complete;\n    this._error = error;\n    this._cancelled = cancelled;\n    this._timer = timer;\n  }\n\n  /**\n   * @param {function} cancel\n   * @return {void}\n   */\n  onSubscribe(cancel: () => void): void {\n    this._cancel = cancel;\n    this._start = new Date().getTime();\n\n    this._source.onSubscribe(() => this.cancel());\n  }\n\n  /**\n   * @param {Error} t\n   * @return {void}\n   */\n  onError(t: Error): void {\n    this._error.inc();\n    this._timer.update(new Date().getTime() - this._start);\n\n    this._source.onError(t);\n  }\n\n  /**\n   * @param {T} t\n   * @return {void}\n   */\n  onComplete(t: T): void {\n    this._next.inc();\n    this._complete.inc();\n    this._timer.update(new Date().getTime() - this._start);\n    this._source.onComplete(t);\n  }\n\n  /**\n   * @return {void}\n   */\n  cancel(): void {\n    this._cancelled.inc();\n    this._timer.update(new Date().getTime() - this._start);\n    this._cancel && this._cancel();\n  }\n}\n",
    "static": true,
    "longname": "/home/dgross/Netifi/rsocket-rpc-js/rsocket-rpc-js/packages/metrics/src/MetricsSingleSubscriber.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 238,
    "kind": "function",
    "name": "embedMetricsSingleSubscriber",
    "memberof": "packages/metrics/src/MetricsSingleSubscriber.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "packages/metrics/src/MetricsSingleSubscriber.js~embedMetricsSingleSubscriber",
    "access": "public",
    "export": true,
    "importPath": "./packages/metrics/src/MetricsSingleSubscriber.js",
    "importStyle": "embedMetricsSingleSubscriber",
    "description": "",
    "lineNumber": 42,
    "params": [
      {
        "nullable": null,
        "types": [
          "Single<T>"
        ],
        "spread": false,
        "optional": false,
        "name": "single",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Counter"
        ],
        "spread": false,
        "optional": false,
        "name": "next",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Counter"
        ],
        "spread": false,
        "optional": false,
        "name": "complete",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Counter"
        ],
        "spread": false,
        "optional": false,
        "name": "error",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Counter"
        ],
        "spread": false,
        "optional": false,
        "name": "cancelled",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Timer"
        ],
        "spread": false,
        "optional": false,
        "name": "timer",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Single"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 239,
    "kind": "class",
    "name": "MetricsSingleSubscriber",
    "memberof": "packages/metrics/src/MetricsSingleSubscriber.js",
    "static": true,
    "longname": "packages/metrics/src/MetricsSingleSubscriber.js~MetricsSingleSubscriber",
    "access": "public",
    "export": false,
    "importPath": "./packages/metrics/src/MetricsSingleSubscriber.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 51,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 240,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "packages/metrics/src/MetricsSingleSubscriber.js~MetricsSingleSubscriber",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/metrics/src/MetricsSingleSubscriber.js~MetricsSingleSubscriber#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 61,
    "params": [
      {
        "nullable": null,
        "types": [
          "IFutureSubscriber<T>"
        ],
        "spread": false,
        "optional": false,
        "name": "actual",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Counter"
        ],
        "spread": false,
        "optional": false,
        "name": "next",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Counter"
        ],
        "spread": false,
        "optional": false,
        "name": "complete",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Counter"
        ],
        "spread": false,
        "optional": false,
        "name": "error",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Counter"
        ],
        "spread": false,
        "optional": false,
        "name": "cancelled",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Timer"
        ],
        "spread": false,
        "optional": false,
        "name": "timer",
        "description": ""
      }
    ]
  },
  {
    "__docId__": 241,
    "kind": "member",
    "name": "_source",
    "memberof": "packages/metrics/src/MetricsSingleSubscriber.js~MetricsSingleSubscriber",
    "static": false,
    "longname": "packages/metrics/src/MetricsSingleSubscriber.js~MetricsSingleSubscriber#_source",
    "access": "private",
    "description": null,
    "lineNumber": 62,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 242,
    "kind": "member",
    "name": "_next",
    "memberof": "packages/metrics/src/MetricsSingleSubscriber.js~MetricsSingleSubscriber",
    "static": false,
    "longname": "packages/metrics/src/MetricsSingleSubscriber.js~MetricsSingleSubscriber#_next",
    "access": "private",
    "description": null,
    "lineNumber": 63,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 243,
    "kind": "member",
    "name": "_complete",
    "memberof": "packages/metrics/src/MetricsSingleSubscriber.js~MetricsSingleSubscriber",
    "static": false,
    "longname": "packages/metrics/src/MetricsSingleSubscriber.js~MetricsSingleSubscriber#_complete",
    "access": "private",
    "description": null,
    "lineNumber": 64,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 244,
    "kind": "member",
    "name": "_error",
    "memberof": "packages/metrics/src/MetricsSingleSubscriber.js~MetricsSingleSubscriber",
    "static": false,
    "longname": "packages/metrics/src/MetricsSingleSubscriber.js~MetricsSingleSubscriber#_error",
    "access": "private",
    "description": null,
    "lineNumber": 65,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 245,
    "kind": "member",
    "name": "_cancelled",
    "memberof": "packages/metrics/src/MetricsSingleSubscriber.js~MetricsSingleSubscriber",
    "static": false,
    "longname": "packages/metrics/src/MetricsSingleSubscriber.js~MetricsSingleSubscriber#_cancelled",
    "access": "private",
    "description": null,
    "lineNumber": 66,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 246,
    "kind": "member",
    "name": "_timer",
    "memberof": "packages/metrics/src/MetricsSingleSubscriber.js~MetricsSingleSubscriber",
    "static": false,
    "longname": "packages/metrics/src/MetricsSingleSubscriber.js~MetricsSingleSubscriber#_timer",
    "access": "private",
    "description": null,
    "lineNumber": 67,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 247,
    "kind": "method",
    "name": "onSubscribe",
    "memberof": "packages/metrics/src/MetricsSingleSubscriber.js~MetricsSingleSubscriber",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/metrics/src/MetricsSingleSubscriber.js~MetricsSingleSubscriber#onSubscribe",
    "access": "public",
    "description": "",
    "lineNumber": 74,
    "params": [
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "cancel",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 248,
    "kind": "member",
    "name": "_cancel",
    "memberof": "packages/metrics/src/MetricsSingleSubscriber.js~MetricsSingleSubscriber",
    "static": false,
    "longname": "packages/metrics/src/MetricsSingleSubscriber.js~MetricsSingleSubscriber#_cancel",
    "access": "private",
    "description": null,
    "lineNumber": 75,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 249,
    "kind": "member",
    "name": "_start",
    "memberof": "packages/metrics/src/MetricsSingleSubscriber.js~MetricsSingleSubscriber",
    "static": false,
    "longname": "packages/metrics/src/MetricsSingleSubscriber.js~MetricsSingleSubscriber#_start",
    "access": "private",
    "description": null,
    "lineNumber": 76,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 250,
    "kind": "method",
    "name": "onError",
    "memberof": "packages/metrics/src/MetricsSingleSubscriber.js~MetricsSingleSubscriber",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/metrics/src/MetricsSingleSubscriber.js~MetricsSingleSubscriber#onError",
    "access": "public",
    "description": "",
    "lineNumber": 85,
    "params": [
      {
        "nullable": null,
        "types": [
          "Error"
        ],
        "spread": false,
        "optional": false,
        "name": "t",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 251,
    "kind": "method",
    "name": "onComplete",
    "memberof": "packages/metrics/src/MetricsSingleSubscriber.js~MetricsSingleSubscriber",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/metrics/src/MetricsSingleSubscriber.js~MetricsSingleSubscriber#onComplete",
    "access": "public",
    "description": "",
    "lineNumber": 96,
    "params": [
      {
        "nullable": null,
        "types": [
          "T"
        ],
        "spread": false,
        "optional": false,
        "name": "t",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 252,
    "kind": "method",
    "name": "cancel",
    "memberof": "packages/metrics/src/MetricsSingleSubscriber.js~MetricsSingleSubscriber",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/metrics/src/MetricsSingleSubscriber.js~MetricsSingleSubscriber#cancel",
    "access": "public",
    "description": "",
    "lineNumber": 106,
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 254,
    "kind": "file",
    "name": "packages/metrics/src/MetricsSubscriber.js",
    "content": "/**\n * @name MetricsSubscriber.js\n * @fileoverview Defines the \"MetricsSubscriber\" class.\n * @copyright Copyright (c) 2017-present, Netifi Inc.\n * @license Apache-2.0\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @flow\n * @requires NPM:rsocket-types\n * @requires Counter\n * @requires Timer\n * @exports MetricsSubscriber\n */\n\n'use strict';\n\nimport {ISubscription, ISubscriber} from 'rsocket-types';\nimport Counter from './Counter';\nimport Timer from './Timer';\n\n/**\n */\nexport default class MetricsSubscriber<T>\n  implements ISubscription, ISubscriber<T> {\n  _source: ISubscriber<T>;\n  _next: Counter;\n  _complete: Counter;\n  _error: Counter;\n  _cancelled: Counter;\n  _timer: Timer;\n\n  _subscription: ISubscription;\n  _start: number;\n\n  /**\n   * @param {ISubscriber<T>} actual -\n   * @param {Counter} next -\n   * @param {Counter} complete -\n   * @param {Counter} error -\n   * @param {Counter} cancelled -\n   * @param {Timer} timer -\n   */\n  constructor(\n    actual: ISubscriber<T>,\n    next: Counter,\n    complete: Counter,\n    error: Counter,\n    cancelled: Counter,\n    timer: Timer,\n  ) {\n    /** @type {ISubscriber<T>} */\n    this._source = actual;\n    /** @type {Counter} */\n    this._next = next;\n    /** @type {Counter} */\n    this._complete = complete;\n    /** @type {Counter} */\n    this._error = error;\n    /** @type {Counter} */\n    this._cancelled = cancelled;\n    /** @type {Timer} */\n    this._timer = timer;\n  }\n\n  /**\n   * @param {ISubscription} s -\n   */\n  onSubscribe(s: ISubscription) {\n    /** @type {ISubscription} */\n    this._subscription = s;\n    /** @type {number} */\n    this._start = new Date().getTime();\n\n    this._source.onSubscribe(this);\n  }\n\n  /**\n   */\n  onNext(t: T) {\n    this._next.inc();\n    this._source.onNext(t);\n  }\n\n  /**\n   * @param {Error} t -\n   */\n  onError(t: Error) {\n    this._error.inc();\n    this._timer.update(new Date().getTime() - this._start);\n\n    this._source.onError(t);\n  }\n\n  /**\n   */\n  onComplete() {\n    this._complete.inc();\n    this._timer.update(new Date().getTime() - this._start);\n    this._source.onComplete();\n  }\n\n  /**\n   * @param {number} n -\n   */\n  request(n: number) {\n    this._subscription && this._subscription.request(n);\n  }\n\n  /**\n   */\n  cancel() {\n    this._cancelled.inc();\n    this._timer.update(new Date().getTime() - this._start);\n    this._subscription && this._subscription.cancel();\n  }\n}\n",
    "static": true,
    "longname": "/home/dgross/Netifi/rsocket-rpc-js/rsocket-rpc-js/packages/metrics/src/MetricsSubscriber.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 255,
    "kind": "class",
    "name": "MetricsSubscriber",
    "memberof": "packages/metrics/src/MetricsSubscriber.js",
    "static": true,
    "longname": "packages/metrics/src/MetricsSubscriber.js~MetricsSubscriber",
    "access": "public",
    "export": true,
    "importPath": "./packages/metrics/src/MetricsSubscriber.js",
    "importStyle": "MetricsSubscriber",
    "description": "",
    "lineNumber": 34,
    "interface": false
  },
  {
    "__docId__": 256,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "packages/metrics/src/MetricsSubscriber.js~MetricsSubscriber",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/metrics/src/MetricsSubscriber.js~MetricsSubscriber#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 44,
    "params": [
      {
        "nullable": null,
        "types": [
          "ISubscriber<T>"
        ],
        "spread": false,
        "optional": false,
        "name": "actual",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Counter"
        ],
        "spread": false,
        "optional": false,
        "name": "next",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Counter"
        ],
        "spread": false,
        "optional": false,
        "name": "complete",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Counter"
        ],
        "spread": false,
        "optional": false,
        "name": "error",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Counter"
        ],
        "spread": false,
        "optional": false,
        "name": "cancelled",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Timer"
        ],
        "spread": false,
        "optional": false,
        "name": "timer",
        "description": ""
      }
    ]
  },
  {
    "__docId__": 257,
    "kind": "member",
    "name": "_source",
    "memberof": "packages/metrics/src/MetricsSubscriber.js~MetricsSubscriber",
    "static": false,
    "longname": "packages/metrics/src/MetricsSubscriber.js~MetricsSubscriber#_source",
    "access": "private",
    "description": null,
    "lineNumber": 46,
    "type": {
      "nullable": null,
      "types": [
        "ISubscriber<T>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 258,
    "kind": "member",
    "name": "_next",
    "memberof": "packages/metrics/src/MetricsSubscriber.js~MetricsSubscriber",
    "static": false,
    "longname": "packages/metrics/src/MetricsSubscriber.js~MetricsSubscriber#_next",
    "access": "private",
    "description": null,
    "lineNumber": 48,
    "type": {
      "nullable": null,
      "types": [
        "Counter"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 259,
    "kind": "member",
    "name": "_complete",
    "memberof": "packages/metrics/src/MetricsSubscriber.js~MetricsSubscriber",
    "static": false,
    "longname": "packages/metrics/src/MetricsSubscriber.js~MetricsSubscriber#_complete",
    "access": "private",
    "description": null,
    "lineNumber": 50,
    "type": {
      "nullable": null,
      "types": [
        "Counter"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 260,
    "kind": "member",
    "name": "_error",
    "memberof": "packages/metrics/src/MetricsSubscriber.js~MetricsSubscriber",
    "static": false,
    "longname": "packages/metrics/src/MetricsSubscriber.js~MetricsSubscriber#_error",
    "access": "private",
    "description": null,
    "lineNumber": 52,
    "type": {
      "nullable": null,
      "types": [
        "Counter"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 261,
    "kind": "member",
    "name": "_cancelled",
    "memberof": "packages/metrics/src/MetricsSubscriber.js~MetricsSubscriber",
    "static": false,
    "longname": "packages/metrics/src/MetricsSubscriber.js~MetricsSubscriber#_cancelled",
    "access": "private",
    "description": null,
    "lineNumber": 54,
    "type": {
      "nullable": null,
      "types": [
        "Counter"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 262,
    "kind": "member",
    "name": "_timer",
    "memberof": "packages/metrics/src/MetricsSubscriber.js~MetricsSubscriber",
    "static": false,
    "longname": "packages/metrics/src/MetricsSubscriber.js~MetricsSubscriber#_timer",
    "access": "private",
    "description": null,
    "lineNumber": 56,
    "type": {
      "nullable": null,
      "types": [
        "Timer"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 263,
    "kind": "method",
    "name": "onSubscribe",
    "memberof": "packages/metrics/src/MetricsSubscriber.js~MetricsSubscriber",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/metrics/src/MetricsSubscriber.js~MetricsSubscriber#onSubscribe",
    "access": "public",
    "description": "",
    "lineNumber": 62,
    "params": [
      {
        "nullable": null,
        "types": [
          "ISubscription"
        ],
        "spread": false,
        "optional": false,
        "name": "s",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 264,
    "kind": "member",
    "name": "_subscription",
    "memberof": "packages/metrics/src/MetricsSubscriber.js~MetricsSubscriber",
    "static": false,
    "longname": "packages/metrics/src/MetricsSubscriber.js~MetricsSubscriber#_subscription",
    "access": "private",
    "description": null,
    "lineNumber": 64,
    "type": {
      "nullable": null,
      "types": [
        "ISubscription"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 265,
    "kind": "member",
    "name": "_start",
    "memberof": "packages/metrics/src/MetricsSubscriber.js~MetricsSubscriber",
    "static": false,
    "longname": "packages/metrics/src/MetricsSubscriber.js~MetricsSubscriber#_start",
    "access": "private",
    "description": null,
    "lineNumber": 66,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 266,
    "kind": "method",
    "name": "onNext",
    "memberof": "packages/metrics/src/MetricsSubscriber.js~MetricsSubscriber",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/metrics/src/MetricsSubscriber.js~MetricsSubscriber#onNext",
    "access": "public",
    "description": "",
    "lineNumber": 73,
    "params": [
      {
        "name": "t",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 267,
    "kind": "method",
    "name": "onError",
    "memberof": "packages/metrics/src/MetricsSubscriber.js~MetricsSubscriber",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/metrics/src/MetricsSubscriber.js~MetricsSubscriber#onError",
    "access": "public",
    "description": "",
    "lineNumber": 81,
    "params": [
      {
        "nullable": null,
        "types": [
          "Error"
        ],
        "spread": false,
        "optional": false,
        "name": "t",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 268,
    "kind": "method",
    "name": "onComplete",
    "memberof": "packages/metrics/src/MetricsSubscriber.js~MetricsSubscriber",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/metrics/src/MetricsSubscriber.js~MetricsSubscriber#onComplete",
    "access": "public",
    "description": "",
    "lineNumber": 90,
    "params": [],
    "return": null
  },
  {
    "__docId__": 269,
    "kind": "method",
    "name": "request",
    "memberof": "packages/metrics/src/MetricsSubscriber.js~MetricsSubscriber",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/metrics/src/MetricsSubscriber.js~MetricsSubscriber#request",
    "access": "public",
    "description": "",
    "lineNumber": 99,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "n",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 271,
    "kind": "method",
    "name": "cancel",
    "memberof": "packages/metrics/src/MetricsSubscriber.js~MetricsSubscriber",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/metrics/src/MetricsSubscriber.js~MetricsSubscriber#cancel",
    "access": "public",
    "description": "",
    "lineNumber": 105,
    "params": [],
    "return": null
  },
  {
    "__docId__": 273,
    "kind": "file",
    "name": "packages/metrics/src/RawMeterTag.js",
    "content": "/**\n * @name RawMeterTag.js\n * @fileoverview A simple counter object.\n *\n * @flow\n *\n * @exports RawMeterTag\n */\n\n'use strict';\n\n/**\n */\nexport default class RawMeterTag {\n  key: string;\n  value: string;\n\n  /**\n   * @param {string} key -\n   * @param {string} value -\n   */\n  constructor(key: string, value: string) {\n    /** @type {string} */\n    this.key = key;\n    /** @type {string} */\n    this.value = value;\n  }\n}\n",
    "static": true,
    "longname": "/home/dgross/Netifi/rsocket-rpc-js/rsocket-rpc-js/packages/metrics/src/RawMeterTag.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 274,
    "kind": "class",
    "name": "RawMeterTag",
    "memberof": "packages/metrics/src/RawMeterTag.js",
    "static": true,
    "longname": "packages/metrics/src/RawMeterTag.js~RawMeterTag",
    "access": "public",
    "export": true,
    "importPath": "./packages/metrics/src/RawMeterTag.js",
    "importStyle": "RawMeterTag",
    "description": "",
    "lineNumber": 15,
    "interface": false
  },
  {
    "__docId__": 275,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "packages/metrics/src/RawMeterTag.js~RawMeterTag",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/metrics/src/RawMeterTag.js~RawMeterTag#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 21,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "key",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": ""
      }
    ]
  },
  {
    "__docId__": 276,
    "kind": "member",
    "name": "key",
    "memberof": "packages/metrics/src/RawMeterTag.js~RawMeterTag",
    "static": false,
    "longname": "packages/metrics/src/RawMeterTag.js~RawMeterTag#key",
    "access": "public",
    "description": null,
    "lineNumber": 23,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 277,
    "kind": "member",
    "name": "value",
    "memberof": "packages/metrics/src/RawMeterTag.js~RawMeterTag",
    "static": false,
    "longname": "packages/metrics/src/RawMeterTag.js~RawMeterTag#value",
    "access": "public",
    "description": null,
    "lineNumber": 25,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 278,
    "kind": "file",
    "name": "packages/metrics/src/SimpleMeterRegistry.js",
    "content": "/**\n * @name SimpleMeterRegistry.js\n * @fileoverview Defines the \"SimpleMeterRegistry\" class.\n * @copyright Copyright (c) 2017-present, Netifi Inc.\n * @license Apache-2.0\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @flow\n *\n * @requires IMeter\n * @requires IMeterRegistry\n * @exports SimpleMeterRegistry\n */\n\n'use strict';\n\nimport type {IMeter} from './IMeter';\nimport {IMeterRegistry} from './IMeterRegistry';\n\n/**\n * The default implementation of {@link IMeterRegistry}.\n */\nexport default class SimpleMeterRegistry implements IMeterRegistry {\n  meterMap: Object;\n\n  constructor() {\n    /** @type {Object} */\n    this.meterMap = {};\n  }\n\n  /**\n   * @param {IMeter} meter\n   */\n  registerMeter(meter: IMeter): void {\n    const id = {\n      name: meter.name,\n      tags: meter.tags,\n      type: meter.type,\n    };\n\n    if (!this.meterMap[id]) {\n      this.meterMap[id] = [];\n    }\n\n    this.meterMap[id].push(meter);\n  }\n\n  /**\n   * @param {IMeter[]} meters\n   */\n  registerMeters(meters: IMeter[]): void {\n    (meters || []).forEach(meter => this.registerMeter(meter));\n  }\n\n  /**\n   * @return {IMeter[]}\n   */\n  meters(): IMeter[] {\n    return Array.prototype.concat.apply(\n      [],\n      Object.keys(this.meterMap).map(key => this.meterMap[key]),\n    );\n  }\n}\n",
    "static": true,
    "longname": "/home/dgross/Netifi/rsocket-rpc-js/rsocket-rpc-js/packages/metrics/src/SimpleMeterRegistry.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 279,
    "kind": "class",
    "name": "SimpleMeterRegistry",
    "memberof": "packages/metrics/src/SimpleMeterRegistry.js",
    "static": true,
    "longname": "packages/metrics/src/SimpleMeterRegistry.js~SimpleMeterRegistry",
    "access": "public",
    "export": true,
    "importPath": "./packages/metrics/src/SimpleMeterRegistry.js",
    "importStyle": "SimpleMeterRegistry",
    "description": "The default implementation of {@link IMeterRegistry}.",
    "lineNumber": 33,
    "interface": false
  },
  {
    "__docId__": 280,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "packages/metrics/src/SimpleMeterRegistry.js~SimpleMeterRegistry",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/metrics/src/SimpleMeterRegistry.js~SimpleMeterRegistry#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 35,
    "undocument": true
  },
  {
    "__docId__": 281,
    "kind": "member",
    "name": "meterMap",
    "memberof": "packages/metrics/src/SimpleMeterRegistry.js~SimpleMeterRegistry",
    "static": false,
    "longname": "packages/metrics/src/SimpleMeterRegistry.js~SimpleMeterRegistry#meterMap",
    "access": "public",
    "description": null,
    "lineNumber": 37,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 282,
    "kind": "method",
    "name": "registerMeter",
    "memberof": "packages/metrics/src/SimpleMeterRegistry.js~SimpleMeterRegistry",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/metrics/src/SimpleMeterRegistry.js~SimpleMeterRegistry#registerMeter",
    "access": "public",
    "description": "",
    "lineNumber": 43,
    "params": [
      {
        "nullable": null,
        "types": [
          "IMeter"
        ],
        "spread": false,
        "optional": false,
        "name": "meter",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 283,
    "kind": "method",
    "name": "registerMeters",
    "memberof": "packages/metrics/src/SimpleMeterRegistry.js~SimpleMeterRegistry",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/metrics/src/SimpleMeterRegistry.js~SimpleMeterRegistry#registerMeters",
    "access": "public",
    "description": "",
    "lineNumber": 60,
    "params": [
      {
        "nullable": null,
        "types": [
          "IMeter[]"
        ],
        "spread": false,
        "optional": false,
        "name": "meters",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 284,
    "kind": "method",
    "name": "meters",
    "memberof": "packages/metrics/src/SimpleMeterRegistry.js~SimpleMeterRegistry",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/metrics/src/SimpleMeterRegistry.js~SimpleMeterRegistry#meters",
    "access": "public",
    "description": "",
    "lineNumber": 67,
    "return": {
      "nullable": null,
      "types": [
        "IMeter[]"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 285,
    "kind": "file",
    "name": "packages/metrics/src/Timer.js",
    "content": "/**\n * @name Timer.js\n * @fileoverview Defines the \"Timer\" class.\n *\n * @flow\n *\n * @requires BaseMeter\n * @requires RawMeterTag\n * @requires Histogram\n * @requires stats\n * @exports Timer\n */\n\n'use strict';\n\nimport BaseMeter from './BaseMeter';\nimport RawMeterTag from './RawMeterTag';\nimport {Histogram} from './Histogram';\nimport {ExponentiallyDecayingSample} from './stats';\n\n/**\n * Basically a timer that tracks the rate of events and histograms the durations.\n * @extends {BaseMeter}\n */\nexport default class Timer extends BaseMeter {\n  histogram: Histogram;\n\n  /**\n   * @param {string} name -\n   * @param {?string} [description] - (optional)\n   * @param {?RawMeterTag[]} [tags] - (optional)\n   */\n  constructor(name: string, description?: string, tags?: RawMeterTag[]) {\n    super(name, description, tags);\n    /** @type {Histogram} */\n    this.histogram = new Histogram(\n      new ExponentiallyDecayingSample(1028, 0.015),\n    );\n    this.clear();\n    this.type = 'timer';\n    this.statistic = 'duration';\n  }\n\n  /**\n   */\n  update(duration: number): void {\n    this.histogram.update(duration);\n    this.mark();\n  }\n\n  // delegate these to histogram\n  /** delegated to {@link Histogram#clear}\n   * @return {void} */\n  clear(): void {\n    return this.histogram.clear();\n  }\n  /** delegated to {@link Histogram#totalCount}\n   * @return {?number} */\n  totalCount(): ?number {\n    return this.histogram.count;\n  }\n  /** delegated to {@link Histogram#min}\n   * @return {?number} */\n  min(): ?number {\n    return this.histogram.min;\n  }\n  /** delegated to {@link Histogram#max}\n   * @return {?number} */\n  max(): ?number {\n    return this.histogram.max;\n  }\n  /** delegated to {@link Histogram#mean}\n   * @return {?number} */\n  mean(): ?number {\n    return this.histogram.mean();\n  }\n  /** delegated to {@link Histogram#stdDev}\n   * @return {?number} */\n  stdDev(): ?number {\n    return this.histogram.stdDev();\n  }\n  /** delegated to {@link Histogram#percentiles}\n   * @param {?number[]} percentiles\n   * @return {number[]} */\n  percentiles(percentiles?: number[]): Object {\n    return this.histogram.percentiles(percentiles);\n  }\n  /** delegated to {@link Histogram#values}\n   * @returnn {any[]} */\n  values() {\n    return this.histogram.values();\n  }\n\n  /**\n   * @returns {Object}\n   * @property {string} type\n   * @property {Object} duration\n   * @property {number} count\n   * @property {RawMeterTag[]} tags\n   * @property {string} name\n   */\n  toObject() {\n    return {\n      type: this.type,\n      duration: this.histogram.toObject(),\n      count: this.count,\n      tags: this.tags,\n      name: this.name,\n    };\n  }\n}\n",
    "static": true,
    "longname": "/home/dgross/Netifi/rsocket-rpc-js/rsocket-rpc-js/packages/metrics/src/Timer.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 286,
    "kind": "class",
    "name": "Timer",
    "memberof": "packages/metrics/src/Timer.js",
    "static": true,
    "longname": "packages/metrics/src/Timer.js~Timer",
    "access": "public",
    "export": true,
    "importPath": "./packages/metrics/src/Timer.js",
    "importStyle": "Timer",
    "description": "Basically a timer that tracks the rate of events and histograms the durations.",
    "lineNumber": 25,
    "interface": false,
    "extends": [
      "BaseMeter"
    ]
  },
  {
    "__docId__": 287,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "packages/metrics/src/Timer.js~Timer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/metrics/src/Timer.js~Timer#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 32,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": ""
      },
      {
        "nullable": true,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "description",
        "description": "(optional)"
      },
      {
        "nullable": true,
        "types": [
          "RawMeterTag[]"
        ],
        "spread": false,
        "optional": true,
        "name": "tags",
        "description": "(optional)"
      }
    ]
  },
  {
    "__docId__": 288,
    "kind": "member",
    "name": "histogram",
    "memberof": "packages/metrics/src/Timer.js~Timer",
    "static": false,
    "longname": "packages/metrics/src/Timer.js~Timer#histogram",
    "access": "public",
    "description": null,
    "lineNumber": 35,
    "type": {
      "nullable": null,
      "types": [
        "Histogram"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 289,
    "kind": "member",
    "name": "type",
    "memberof": "packages/metrics/src/Timer.js~Timer",
    "static": false,
    "longname": "packages/metrics/src/Timer.js~Timer#type",
    "access": "public",
    "description": null,
    "lineNumber": 37,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 290,
    "kind": "member",
    "name": "statistic",
    "memberof": "packages/metrics/src/Timer.js~Timer",
    "static": false,
    "longname": "packages/metrics/src/Timer.js~Timer#statistic",
    "access": "public",
    "description": null,
    "lineNumber": 38,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 291,
    "kind": "method",
    "name": "update",
    "memberof": "packages/metrics/src/Timer.js~Timer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/metrics/src/Timer.js~Timer#update",
    "access": "public",
    "description": "",
    "lineNumber": 43,
    "params": [
      {
        "name": "duration",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 292,
    "kind": "method",
    "name": "clear",
    "memberof": "packages/metrics/src/Timer.js~Timer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/metrics/src/Timer.js~Timer#clear",
    "access": "public",
    "description": "delegated to {@link Histogram#clear}",
    "lineNumber": 51,
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 293,
    "kind": "method",
    "name": "totalCount",
    "memberof": "packages/metrics/src/Timer.js~Timer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/metrics/src/Timer.js~Timer#totalCount",
    "access": "public",
    "description": "delegated to {@link Histogram#totalCount}",
    "lineNumber": 56,
    "return": {
      "nullable": true,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 294,
    "kind": "method",
    "name": "min",
    "memberof": "packages/metrics/src/Timer.js~Timer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/metrics/src/Timer.js~Timer#min",
    "access": "public",
    "description": "delegated to {@link Histogram#min}",
    "lineNumber": 61,
    "return": {
      "nullable": true,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 295,
    "kind": "method",
    "name": "max",
    "memberof": "packages/metrics/src/Timer.js~Timer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/metrics/src/Timer.js~Timer#max",
    "access": "public",
    "description": "delegated to {@link Histogram#max}",
    "lineNumber": 66,
    "return": {
      "nullable": true,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 296,
    "kind": "method",
    "name": "mean",
    "memberof": "packages/metrics/src/Timer.js~Timer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/metrics/src/Timer.js~Timer#mean",
    "access": "public",
    "description": "delegated to {@link Histogram#mean}",
    "lineNumber": 71,
    "return": {
      "nullable": true,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 297,
    "kind": "method",
    "name": "stdDev",
    "memberof": "packages/metrics/src/Timer.js~Timer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/metrics/src/Timer.js~Timer#stdDev",
    "access": "public",
    "description": "delegated to {@link Histogram#stdDev}",
    "lineNumber": 76,
    "return": {
      "nullable": true,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 298,
    "kind": "method",
    "name": "percentiles",
    "memberof": "packages/metrics/src/Timer.js~Timer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/metrics/src/Timer.js~Timer#percentiles",
    "access": "public",
    "description": "delegated to {@link Histogram#percentiles}",
    "lineNumber": 82,
    "params": [
      {
        "nullable": true,
        "types": [
          "number[]"
        ],
        "spread": false,
        "optional": false,
        "name": "percentiles",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number[]"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 299,
    "kind": "method",
    "name": "values",
    "memberof": "packages/metrics/src/Timer.js~Timer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/metrics/src/Timer.js~Timer#values",
    "access": "public",
    "description": "delegated to {@link Histogram#values}",
    "lineNumber": 87,
    "unknown": [
      {
        "tagName": "@returnn",
        "tagValue": "{any[]}"
      }
    ],
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 300,
    "kind": "method",
    "name": "toObject",
    "memberof": "packages/metrics/src/Timer.js~Timer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/metrics/src/Timer.js~Timer#toObject",
    "access": "public",
    "description": "",
    "lineNumber": 99,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object}"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "type",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "duration",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "count",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "RawMeterTag[]"
        ],
        "spread": false,
        "optional": false,
        "name": "tags",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 301,
    "kind": "file",
    "name": "packages/metrics/src/__tests__/exponentially_decaying_sample-test.js",
    "content": "var ExponentiallyDecayingSample = require('../stats/ExponentiallyDecayingSample.js')\n    .default,\n  eds = new ExponentiallyDecayingSample(1000, 0.015);\n\nvar test = function(callback) {\n  eds.clear();\n\n  var time = new Date().getTime(),\n    interval = (60 * 60 * 1000) / 100;\n  for (var i = 0; i < 100; i++) {\n    for (var j = 0; j < 100; j++) {\n      eds.update(i, time + i * interval);\n    }\n  }\n\n  function printSample(eds) {\n    var valueCounts = {},\n      values = eds.getValues();\n\n    for (var i = 0; i < eds.size(); i++) {\n      if (valueCounts[values[i].val]) {\n        valueCounts[values[i].val]++;\n      } else {\n        valueCounts[values[i].val] = 1;\n      }\n    }\n    return valueCounts;\n  }\n\n  console.log('This is an exponential distribution:');\n  console.log(printSample(eds));\n\n  eds.rescale(time + 100 * interval);\n\n  console.log('This is after rescaling');\n  console.log(eds.getValues());\n  if (typeof callback == 'function') {\n    callback();\n  }\n};\n\nif (module.parent) {\n  module.exports = test;\n} else {\n  test();\n}\n",
    "static": true,
    "longname": "/home/dgross/Netifi/rsocket-rpc-js/rsocket-rpc-js/packages/metrics/src/__tests__/exponentially_decaying_sample-test.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 302,
    "kind": "variable",
    "name": "ExponentiallyDecayingSample",
    "memberof": "packages/metrics/src/__tests__/exponentially_decaying_sample-test.js",
    "static": true,
    "longname": "packages/metrics/src/__tests__/exponentially_decaying_sample-test.js~ExponentiallyDecayingSample",
    "access": "public",
    "export": false,
    "importPath": "./packages/metrics/src/__tests__/exponentially_decaying_sample-test.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 303,
    "kind": "function",
    "name": "test",
    "memberof": "packages/metrics/src/__tests__/exponentially_decaying_sample-test.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "packages/metrics/src/__tests__/exponentially_decaying_sample-test.js~test",
    "access": "public",
    "export": false,
    "importPath": "./packages/metrics/src/__tests__/exponentially_decaying_sample-test.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "params": [
      {
        "name": "callback",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 304,
    "kind": "file",
    "name": "packages/metrics/src/__tests__/exponentially_weighted_moving_average-test.js",
    "content": "var ExponentiallyWeightedMovingAverage = require('../stats/ExponentiallyWeightedMovingAverage')\n  .default;\nvar exponentially_weighted_moving_average = new ExponentiallyWeightedMovingAverage.createM1EWMA();\n\n/**\n * @test {ExponentiallyWeightedMovingAverage}\n */\nvar test = function(callback) {\n  console.log('\\nTesting ExponentiallyWeightedMovingAverage\\n');\n  console.log('Sending updates every 100 milliseconds for 30 seconds.');\n\n  var updateInterval = setInterval(function() {\n    exponentially_weighted_moving_average.update();\n  }, 100);\n  setTimeout(function() {\n    clearInterval(updateInterval);\n    console.log('\\n\\nExpected Average: 10');\n    console.log(\n      'Exponentially Weighted Moving Average: ' +\n        exponentially_weighted_moving_average.rate() +\n        '\\n',\n    );\n    if (typeof callback == 'function') {\n      callback();\n    }\n  }, 30000);\n};\n\nif (module.parent) {\n  module.exports = test;\n} else {\n  test();\n}\n",
    "static": true,
    "longname": "/home/dgross/Netifi/rsocket-rpc-js/rsocket-rpc-js/packages/metrics/src/__tests__/exponentially_weighted_moving_average-test.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 305,
    "kind": "variable",
    "name": "ExponentiallyWeightedMovingAverage",
    "memberof": "packages/metrics/src/__tests__/exponentially_weighted_moving_average-test.js",
    "static": true,
    "longname": "packages/metrics/src/__tests__/exponentially_weighted_moving_average-test.js~ExponentiallyWeightedMovingAverage",
    "access": "public",
    "export": false,
    "importPath": "./packages/metrics/src/__tests__/exponentially_weighted_moving_average-test.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 306,
    "kind": "variable",
    "name": "exponentially_weighted_moving_average",
    "memberof": "packages/metrics/src/__tests__/exponentially_weighted_moving_average-test.js",
    "static": true,
    "longname": "packages/metrics/src/__tests__/exponentially_weighted_moving_average-test.js~exponentially_weighted_moving_average",
    "access": "public",
    "export": false,
    "importPath": "./packages/metrics/src/__tests__/exponentially_weighted_moving_average-test.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 307,
    "kind": "function",
    "name": "test",
    "memberof": "packages/metrics/src/__tests__/exponentially_weighted_moving_average-test.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "packages/metrics/src/__tests__/exponentially_weighted_moving_average-test.js~test",
    "access": "public",
    "export": false,
    "importPath": "./packages/metrics/src/__tests__/exponentially_weighted_moving_average-test.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 7,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{ExponentiallyWeightedMovingAverage}"
      }
    ],
    "params": [
      {
        "name": "callback",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 308,
    "kind": "file",
    "name": "packages/metrics/src/__tests__/histogram-test.js",
    "content": "var expect = require('chai').expect,\n  describe = require('mocha').describe,\n  it = require('mocha').it,\n  Histogram = require('../Histogram').Histogram;\n\n/**\n * @test {Histogram}\n */\ndescribe('Histogram', function() {\n  it('should properly record percentiles from uniform distribution.', function() {\n    var unifHist = Histogram.createUniformHistogram(5000);\n\n    for (var i = 1; i < 10000; i++) {\n      unifHist.update(i);\n    }\n\n    expect(unifHist.mean()).to.equal(5000);\n    expect(unifHist.variance()).to.equal(8332500);\n    expect(unifHist.stdDev()).to.equal(2886.607004772212);\n    expect(unifHist.count).to.equal(9999);\n    expect(unifHist.min).to.equal(1);\n    expect(unifHist.max).to.equal(9999);\n  });\n});\n",
    "static": true,
    "longname": "/home/dgross/Netifi/rsocket-rpc-js/rsocket-rpc-js/packages/metrics/src/__tests__/histogram-test.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 309,
    "kind": "variable",
    "name": "expect",
    "memberof": "packages/metrics/src/__tests__/histogram-test.js",
    "static": true,
    "longname": "packages/metrics/src/__tests__/histogram-test.js~expect",
    "access": "public",
    "export": false,
    "importPath": "./packages/metrics/src/__tests__/histogram-test.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 310,
    "kind": "file",
    "name": "packages/metrics/src/__tests__/meter-test.js",
    "content": "var expect = require('chai').expect,\n  describe = require('mocha').describe,\n  it = require('mocha').it,\n  Meter = require('../BaseMeter').default;\n\n/**\n * @test {Meter}\n */\ndescribe('Meter', function() {\n  this.timeout(10000);\n  it('should properly record rate and count.', function(done) {\n    var meter = new Meter();\n    var updateInterval = setInterval(function() {\n      meter.mark(1);\n    }, 100);\n\n    setTimeout(function() {\n      clearInterval(updateInterval);\n      expect(meter)\n        .to.have.property('count')\n        .to.be.within(45, 55);\n      ['mean', '1', '5', '15'].forEach(function(v) {\n        expect(meter.rates())\n          .to.have.property(v)\n          .to.be.within(9, 11);\n      });\n      done();\n    }, 5000);\n  });\n});\n",
    "static": true,
    "longname": "/home/dgross/Netifi/rsocket-rpc-js/rsocket-rpc-js/packages/metrics/src/__tests__/meter-test.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 311,
    "kind": "variable",
    "name": "expect",
    "memberof": "packages/metrics/src/__tests__/meter-test.js",
    "static": true,
    "longname": "packages/metrics/src/__tests__/meter-test.js~expect",
    "access": "public",
    "export": false,
    "importPath": "./packages/metrics/src/__tests__/meter-test.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 312,
    "kind": "file",
    "name": "packages/metrics/src/__tests__/timer-test.js",
    "content": "var expect = require('chai').expect,\n  describe = require('mocha').describe,\n  it = require('mocha').it,\n  Timer = require('../Timer').default;\n\n/**\n * @test {Timer}\n */\ndescribe('Timer', function() {\n  it('should properly record durations.', function(done) {\n    var timer = new Timer();\n\n    var n = 0;\n    var updateInterval = setInterval(function() {\n      timer.update(n++);\n    }, 100);\n\n    setTimeout(function() {\n      clearInterval(updateInterval);\n      timer.tick();\n      expect(timer.totalCount()).to.be.within(8, 12);\n      expect(timer.min()).to.equal(0);\n      expect(timer.max()).to.be.within(8, 12);\n      expect(timer).to.have.property('mean');\n      expect(timer).to.have.property('stdDev');\n      expect(timer).to.have.property('percentiles');\n      expect(timer).to.have.property('values');\n      expect(timer).to.have.property('oneMinuteRate');\n      expect(timer).to.have.property('fiveMinuteRate');\n      expect(timer).to.have.property('fifteenMinuteRate');\n      expect(timer).to.have.property('meanRate');\n      expect(timer).to.have.property('rates');\n      done();\n    }, 1000);\n  });\n});\n",
    "static": true,
    "longname": "/home/dgross/Netifi/rsocket-rpc-js/rsocket-rpc-js/packages/metrics/src/__tests__/timer-test.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 313,
    "kind": "variable",
    "name": "expect",
    "memberof": "packages/metrics/src/__tests__/timer-test.js",
    "static": true,
    "longname": "packages/metrics/src/__tests__/timer-test.js~expect",
    "access": "public",
    "export": false,
    "importPath": "./packages/metrics/src/__tests__/timer-test.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 314,
    "kind": "file",
    "name": "packages/metrics/src/__tests__/uniform_sample-test.js",
    "content": "var expect = require('chai').expect,\n  debug = require('debug')('metrics'),\n  describe = require('mocha').describe,\n  it = require('mocha').it,\n  UniformSample = require('../stats/UniformSample').default;\n\n/**\n * @test {UniformSample}\n */\ndescribe('UniformSample', function() {\n  it('average of sampled values should fall within acceptable range of actual mean.', function() {\n    debug('Creating a new UniformSample with a limit of 600.');\n    var uniformSample = new UniformSample(600);\n    for (var i = 0; i < 10000; i++) {\n      uniformSample.update(i);\n    }\n\n    var sum = 0;\n    for (var k in uniformSample.values) {\n      sum += uniformSample.values[k];\n    }\n    var mean = sum / uniformSample.values.length;\n    debug('Mean of sample is %j', mean);\n    // actual mean of all 10000 values should be 5000.\n    expect(mean).to.be.within(4500, 5500);\n  });\n});\n",
    "static": true,
    "longname": "/home/dgross/Netifi/rsocket-rpc-js/rsocket-rpc-js/packages/metrics/src/__tests__/uniform_sample-test.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 315,
    "kind": "variable",
    "name": "expect",
    "memberof": "packages/metrics/src/__tests__/uniform_sample-test.js",
    "static": true,
    "longname": "packages/metrics/src/__tests__/uniform_sample-test.js~expect",
    "access": "public",
    "export": false,
    "importPath": "./packages/metrics/src/__tests__/uniform_sample-test.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 316,
    "kind": "file",
    "name": "packages/metrics/src/index.js",
    "content": "/**\n * @name rsocket-rpc-js/packages/metrics\n * @fileoverview The set of exports for the \"Metrics\" package.\n * @copyright Copyright (c) 2017-present, Netifi Inc.\n * @license Apache-2.0\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @flow\n *\n * @requires metrics_pb\n * @requires metrics_rsocket_pb\n * @requires stats\n * @requires BaseMeter\n * @requires Histogram\n * @requires Timer\n * @requires Counter\n * @requires IMeter\n * @requires IMeterRegistry\n * @requires SimpleMeterRegistry\n * @requires MetricsExporter\n * @requires Metrics\n * @requires RawMeterTag\n */\n\n'use strict';\n\nimport {\n  MeterTag,\n  MeterType,\n  MeterId,\n  MeterStatistic,\n  MeterMeasurement,\n  Meter,\n  MetricsSnapshot,\n  Skew,\n} from './proto/metrics_pb';\n\nimport {\n  MetricsSnapshotHandlerClient,\n  MetricsSnapshotHandlerServer,\n} from './proto/metrics_rsocket_pb';\n\nimport {\n  ExponentiallyDecayingSample,\n  ExponentiallyWeightedMovingAverage,\n  Sample,\n  UniformSample,\n  ISample,\n} from './stats';\n\nimport BaseMeter from './BaseMeter';\n\nimport {Histogram, DEFAULT_PERCENTILES} from './Histogram';\n\nimport Timer from './Timer';\n\nimport Counter from './Counter';\n\nimport {IMeter} from './IMeter';\n\nimport {IMeterRegistry} from './IMeterRegistry';\n\nimport SimpleMeterRegistry from './SimpleMeterRegistry';\n\nimport MetricsExporter from './MetricsExporter';\n\nimport Metrics from './Metrics';\n\nimport RawMeterTag from './RawMeterTag';\n\nexport {\n  BaseMeter,\n  Counter,\n  Timer,\n  RawMeterTag,\n  Histogram,\n  ExponentiallyDecayingSample,\n  ExponentiallyWeightedMovingAverage,\n  Sample,\n  UniformSample,\n  ISample,\n  DEFAULT_PERCENTILES,\n  IMeter,\n  IMeterRegistry,\n  SimpleMeterRegistry,\n  Metrics,\n  MetricsExporter,\n  MeterTag,\n  MeterId,\n  MeterMeasurement,\n  MetricsSnapshot,\n  Skew,\n  MeterType,\n  MeterStatistic,\n  MetricsSnapshotHandlerServer,\n  MetricsSnapshotHandlerClient,\n};\n",
    "static": true,
    "longname": "/home/dgross/Netifi/rsocket-rpc-js/rsocket-rpc-js/packages/metrics/src/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 317,
    "kind": "file",
    "name": "packages/metrics/src/stats/ExponentiallyDecayingSample.js",
    "content": "/**\n * @name ExponentiallyDecayingSample.js\n * @fileoverview Defines the \"ExponentiallyDecayingSample\" class.\n *\n * @flow\n *\n * @requires Sample\n * @requires binary_heap\n * @exports ExponentiallyDecayingSample\n */\n\n'use strict';\n\nimport Sample from './Sample';\nimport BinaryHeap from './lib/binary_heap';\nimport type PrioritizedItem from './lib/binary_heap';\n\n/**\n * Take an exponentially decaying sample of size size of all values.\n * This value represents one hour in milliseconds.\n * @constant\n */\nconst RESCALE_THRESHOLD = 60 * 60 * 1000; // 1 hour in milliseconds\n\n/**\n */\nexport default class ExponentiallyDecayingSample<T> extends Sample<T> {\n  count: number;\n  limit: number;\n  alpha: number;\n  startTime: number;\n  nextScaleTime: number;\n  values: BinaryHeap<T>;\n\n  /**\n   * @param {number} size -\n   * @param {number} alpha -\n   */\n  constructor(size: number, alpha: number) {\n    super();\n    /** @type {number} */\n    this.count = 0;\n    /** @type {number} */\n    this.limit = size;\n    /** @type {number} */\n    this.alpha = alpha;\n    this.clear();\n  }\n\n  /**\n   * This is a relatively expensive operation.\n   * @return {T[]}\n   */\n  getValues(): T[] {\n    var values = ([]: T[]),\n      elt,\n      heap = this.values.clone();\n    while ((elt = heap.pop())) {\n      values.push(elt.val);\n    }\n    return values;\n  }\n\n  /**\n   * @return {number}\n   */\n  size(): number {\n    return this.values.size();\n  }\n\n  /**\n   * @return {BinaryHeap<T>}\n   */\n  newHeap(): BinaryHeap<T> {\n    return new BinaryHeap(obj => obj.priority);\n  }\n\n  /**\n   * @return {number}\n   */\n  now(): number {\n    return new Date().getTime();\n  }\n\n  /**\n   * @return {number}\n   */\n  tick(): number {\n    return this.now() / 1000;\n  }\n\n  /**\n   * @return {void}\n   */\n  clear(): void {\n    /** @type {BinaryHeap<T>} values */\n    this.values = this.newHeap();\n    this.count = 0;\n    /** @type {number} */\n    this.startTime = this.tick();\n    /** @type {number} */\n    this.nextScaleTime = this.now() + RESCALE_THRESHOLD;\n  }\n\n  /**\n   * @param {T} val - \n   * @param {?number} timestamp - (in milliseconds)\n   */\n  update(val: T, timestamp?: number): void {\n    // Convert timestamp to seconds\n    if (timestamp == undefined) {\n      timestamp = this.tick();\n    } else {\n      timestamp = timestamp / 1000;\n    }\n    var priority = this.weight(timestamp - this.startTime) / Math.random();\n    const value = ({val: val, priority: priority}: PrioritizedItem<T>);\n    if (this.count < this.limit) {\n      this.count += 1;\n      this.values.push(value);\n    } else {\n      var first = this.values.peek();\n      if (first.priority < priority) {\n        this.values.push(value);\n        this.values.pop();\n      }\n    }\n\n    if (this.now() > this.nextScaleTime) {\n      this.rescale(this.now());\n    }\n  }\n\n  /**\n   * @param {number} time\n   * @return {number}\n   */\n  weight(time: number): number {\n    return Math.exp(this.alpha * time);\n  }\n\n  /**\n   * @param {number} now - parameter primarily used for testing rescales\n   * @return {void}\n   */\n  rescale(now: number): void {\n    this.nextScaleTime = this.now() + RESCALE_THRESHOLD;\n    var oldContent = this.values.content,\n      newContent = [],\n      oldStartTime = this.startTime;\n    this.startTime = (now && now / 1000) || this.tick();\n    // Downscale every priority by the same factor. Order is unaffected, which is why we're avoiding the cost of popping.\n    for (var i = 0; i < oldContent.length; i++) {\n      newContent.push({\n        val: oldContent[i].val,\n        priority:\n          oldContent[i].priority *\n          Math.exp(-this.alpha * (this.startTime - oldStartTime)),\n      });\n    }\n    this.values.content = newContent;\n  }\n}\n",
    "static": true,
    "longname": "/home/dgross/Netifi/rsocket-rpc-js/rsocket-rpc-js/packages/metrics/src/stats/ExponentiallyDecayingSample.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 318,
    "kind": "variable",
    "name": "RESCALE_THRESHOLD",
    "memberof": "packages/metrics/src/stats/ExponentiallyDecayingSample.js",
    "static": true,
    "longname": "packages/metrics/src/stats/ExponentiallyDecayingSample.js~RESCALE_THRESHOLD",
    "access": "public",
    "export": false,
    "importPath": "./packages/metrics/src/stats/ExponentiallyDecayingSample.js",
    "importStyle": null,
    "description": "Take an exponentially decaying sample of size size of all values.\nThis value represents one hour in milliseconds.",
    "lineNumber": 23,
    "unknown": [
      {
        "tagName": "@constant",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 319,
    "kind": "class",
    "name": "ExponentiallyDecayingSample",
    "memberof": "packages/metrics/src/stats/ExponentiallyDecayingSample.js",
    "static": true,
    "longname": "packages/metrics/src/stats/ExponentiallyDecayingSample.js~ExponentiallyDecayingSample",
    "access": "public",
    "export": true,
    "importPath": "./packages/metrics/src/stats/ExponentiallyDecayingSample.js",
    "importStyle": "ExponentiallyDecayingSample",
    "description": "",
    "lineNumber": 27,
    "interface": false,
    "extends": [
      "packages/metrics/src/stats/Sample.js~Sample"
    ]
  },
  {
    "__docId__": 320,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "packages/metrics/src/stats/ExponentiallyDecayingSample.js~ExponentiallyDecayingSample",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/metrics/src/stats/ExponentiallyDecayingSample.js~ExponentiallyDecayingSample#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 33,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "size",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "alpha",
        "description": ""
      }
    ]
  },
  {
    "__docId__": 321,
    "kind": "member",
    "name": "count",
    "memberof": "packages/metrics/src/stats/ExponentiallyDecayingSample.js~ExponentiallyDecayingSample",
    "static": false,
    "longname": "packages/metrics/src/stats/ExponentiallyDecayingSample.js~ExponentiallyDecayingSample#count",
    "access": "public",
    "description": null,
    "lineNumber": 36,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 322,
    "kind": "member",
    "name": "limit",
    "memberof": "packages/metrics/src/stats/ExponentiallyDecayingSample.js~ExponentiallyDecayingSample",
    "static": false,
    "longname": "packages/metrics/src/stats/ExponentiallyDecayingSample.js~ExponentiallyDecayingSample#limit",
    "access": "public",
    "description": null,
    "lineNumber": 38,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 323,
    "kind": "member",
    "name": "alpha",
    "memberof": "packages/metrics/src/stats/ExponentiallyDecayingSample.js~ExponentiallyDecayingSample",
    "static": false,
    "longname": "packages/metrics/src/stats/ExponentiallyDecayingSample.js~ExponentiallyDecayingSample#alpha",
    "access": "public",
    "description": null,
    "lineNumber": 40,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 324,
    "kind": "method",
    "name": "getValues",
    "memberof": "packages/metrics/src/stats/ExponentiallyDecayingSample.js~ExponentiallyDecayingSample",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/metrics/src/stats/ExponentiallyDecayingSample.js~ExponentiallyDecayingSample#getValues",
    "access": "public",
    "description": "This is a relatively expensive operation.",
    "lineNumber": 48,
    "return": {
      "nullable": null,
      "types": [
        "T[]"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 325,
    "kind": "method",
    "name": "size",
    "memberof": "packages/metrics/src/stats/ExponentiallyDecayingSample.js~ExponentiallyDecayingSample",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/metrics/src/stats/ExponentiallyDecayingSample.js~ExponentiallyDecayingSample#size",
    "access": "public",
    "description": "",
    "lineNumber": 61,
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 326,
    "kind": "method",
    "name": "newHeap",
    "memberof": "packages/metrics/src/stats/ExponentiallyDecayingSample.js~ExponentiallyDecayingSample",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/metrics/src/stats/ExponentiallyDecayingSample.js~ExponentiallyDecayingSample#newHeap",
    "access": "public",
    "description": "",
    "lineNumber": 68,
    "return": {
      "nullable": null,
      "types": [
        "BinaryHeap<T>"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 327,
    "kind": "method",
    "name": "now",
    "memberof": "packages/metrics/src/stats/ExponentiallyDecayingSample.js~ExponentiallyDecayingSample",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/metrics/src/stats/ExponentiallyDecayingSample.js~ExponentiallyDecayingSample#now",
    "access": "public",
    "description": "",
    "lineNumber": 75,
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 328,
    "kind": "method",
    "name": "tick",
    "memberof": "packages/metrics/src/stats/ExponentiallyDecayingSample.js~ExponentiallyDecayingSample",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/metrics/src/stats/ExponentiallyDecayingSample.js~ExponentiallyDecayingSample#tick",
    "access": "public",
    "description": "",
    "lineNumber": 82,
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 329,
    "kind": "method",
    "name": "clear",
    "memberof": "packages/metrics/src/stats/ExponentiallyDecayingSample.js~ExponentiallyDecayingSample",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/metrics/src/stats/ExponentiallyDecayingSample.js~ExponentiallyDecayingSample#clear",
    "access": "public",
    "description": "",
    "lineNumber": 89,
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 330,
    "kind": "member",
    "name": "values",
    "memberof": "packages/metrics/src/stats/ExponentiallyDecayingSample.js~ExponentiallyDecayingSample",
    "static": false,
    "longname": "packages/metrics/src/stats/ExponentiallyDecayingSample.js~ExponentiallyDecayingSample#values",
    "access": "public",
    "description": null,
    "lineNumber": 91,
    "type": {
      "nullable": null,
      "types": [
        "BinaryHeap<T>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 332,
    "kind": "member",
    "name": "startTime",
    "memberof": "packages/metrics/src/stats/ExponentiallyDecayingSample.js~ExponentiallyDecayingSample",
    "static": false,
    "longname": "packages/metrics/src/stats/ExponentiallyDecayingSample.js~ExponentiallyDecayingSample#startTime",
    "access": "public",
    "description": null,
    "lineNumber": 94,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 333,
    "kind": "member",
    "name": "nextScaleTime",
    "memberof": "packages/metrics/src/stats/ExponentiallyDecayingSample.js~ExponentiallyDecayingSample",
    "static": false,
    "longname": "packages/metrics/src/stats/ExponentiallyDecayingSample.js~ExponentiallyDecayingSample#nextScaleTime",
    "access": "public",
    "description": null,
    "lineNumber": 96,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 334,
    "kind": "method",
    "name": "update",
    "memberof": "packages/metrics/src/stats/ExponentiallyDecayingSample.js~ExponentiallyDecayingSample",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/metrics/src/stats/ExponentiallyDecayingSample.js~ExponentiallyDecayingSample#update",
    "access": "public",
    "description": "",
    "lineNumber": 103,
    "params": [
      {
        "nullable": null,
        "types": [
          "T"
        ],
        "spread": false,
        "optional": false,
        "name": "val",
        "description": ""
      },
      {
        "nullable": true,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "timestamp",
        "description": "(in milliseconds)"
      }
    ],
    "return": null
  },
  {
    "__docId__": 336,
    "kind": "method",
    "name": "weight",
    "memberof": "packages/metrics/src/stats/ExponentiallyDecayingSample.js~ExponentiallyDecayingSample",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/metrics/src/stats/ExponentiallyDecayingSample.js~ExponentiallyDecayingSample#weight",
    "access": "public",
    "description": "",
    "lineNumber": 132,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "time",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 337,
    "kind": "method",
    "name": "rescale",
    "memberof": "packages/metrics/src/stats/ExponentiallyDecayingSample.js~ExponentiallyDecayingSample",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/metrics/src/stats/ExponentiallyDecayingSample.js~ExponentiallyDecayingSample#rescale",
    "access": "public",
    "description": "",
    "lineNumber": 140,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "now",
        "description": "parameter primarily used for testing rescales"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 340,
    "kind": "file",
    "name": "packages/metrics/src/stats/ExponentiallyWeightedMovingAverage.js",
    "content": "/**\n * @name ExponentiallyWeightedMovingAverage.js\n * @fileoverview Exponentially weighted moving average.\n *\n * @flow\n * @exports EWMA\n */\n\n'use strict';\n\n/**\n * @constant\n */\nconst M1_ALPHA = 1 - Math.exp(-5 / 60);\n/**\n * @constant\n */\nconst M5_ALPHA = 1 - Math.exp(-5 / 60 / 5);\n/**\n * @constant\n */\nconst M15_ALPHA = 1 - Math.exp(-5 / 60 / 15);\n\n/**\n */\nexport default class EWMA {\n  alpha: number;\n  interval: number;\n  initialized: boolean;\n  currentRate: number;\n  uncounted: number;\n  tickInterval: any;\n\n  /**\n   * @param {number} alpha -\n   * @param {number} interval - time in milliseconds\n   */\n  constructor(alpha: number, interval: number) {\n    /** @type {number} */\n    this.alpha = alpha;\n    /** @type {number} */\n    this.interval = interval || 5000;\n    /** @type {boolean} */\n    this.initialized = false;\n    /** @type {number} */\n    this.currentRate = 0.0;\n    /** @type {number} */\n    this.uncounted = 0;\n    if (interval) {\n      /** @type {any} */\n      this.tickInterval = setInterval(() => {\n        this.tick();\n      }, interval);\n\n      // $FlowFixMe\n      if (this.tickInterval.unref) {\n        // checking in Node context\n        // Don't keep the process open if this is the last thing in the event loop.\n        this.tickInterval.unref();\n      }\n    }\n  }\n\n  /**\n   * @returns {EWMA}\n   */\n  static createM1EWMA(): EWMA {\n    return new EWMA(M1_ALPHA, 5000);\n  }\n  /**\n   * @returns {EWMA}\n   */\n  static createM5EWMA(): EWMA {\n    return new EWMA(M5_ALPHA, 5000);\n  }\n  /**\n   * @returns {EWMA}\n   */\n  static createM15EWMA(): EWMA {\n    return new EWMA(M15_ALPHA, 5000);\n  }\n\n  /**\n   * @param {number} n -\n   * @returns {void}\n   */\n  update(n: number): void {\n    this.uncounted += n || 1;\n  }\n\n  /**\n   * Update our rate measurements every interval.\n   * @returns {void}\n   */\n  tick(): void {\n    var instantRate = this.uncounted / this.interval;\n    this.uncounted = 0;\n\n    if (this.initialized) {\n      this.currentRate += this.alpha * (instantRate - this.currentRate);\n    } else {\n      this.currentRate = instantRate;\n      this.initialized = true;\n    }\n  }\n\n  /**\n   * Return the rate per second.\n   * @returns {number}\n   */\n  rate(): number {\n    return this.currentRate * 1000;\n  }\n\n  /**\n   * @returns {void}\n   */\n  stop(): void {\n    clearInterval(this.tickInterval);\n  }\n}\n",
    "static": true,
    "longname": "/home/dgross/Netifi/rsocket-rpc-js/rsocket-rpc-js/packages/metrics/src/stats/ExponentiallyWeightedMovingAverage.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 341,
    "kind": "variable",
    "name": "M1_ALPHA",
    "memberof": "packages/metrics/src/stats/ExponentiallyWeightedMovingAverage.js",
    "static": true,
    "longname": "packages/metrics/src/stats/ExponentiallyWeightedMovingAverage.js~M1_ALPHA",
    "access": "public",
    "export": false,
    "importPath": "./packages/metrics/src/stats/ExponentiallyWeightedMovingAverage.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 15,
    "unknown": [
      {
        "tagName": "@constant",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 342,
    "kind": "variable",
    "name": "M5_ALPHA",
    "memberof": "packages/metrics/src/stats/ExponentiallyWeightedMovingAverage.js",
    "static": true,
    "longname": "packages/metrics/src/stats/ExponentiallyWeightedMovingAverage.js~M5_ALPHA",
    "access": "public",
    "export": false,
    "importPath": "./packages/metrics/src/stats/ExponentiallyWeightedMovingAverage.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 19,
    "unknown": [
      {
        "tagName": "@constant",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 343,
    "kind": "variable",
    "name": "M15_ALPHA",
    "memberof": "packages/metrics/src/stats/ExponentiallyWeightedMovingAverage.js",
    "static": true,
    "longname": "packages/metrics/src/stats/ExponentiallyWeightedMovingAverage.js~M15_ALPHA",
    "access": "public",
    "export": false,
    "importPath": "./packages/metrics/src/stats/ExponentiallyWeightedMovingAverage.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 23,
    "unknown": [
      {
        "tagName": "@constant",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 344,
    "kind": "class",
    "name": "EWMA",
    "memberof": "packages/metrics/src/stats/ExponentiallyWeightedMovingAverage.js",
    "static": true,
    "longname": "packages/metrics/src/stats/ExponentiallyWeightedMovingAverage.js~EWMA",
    "access": "public",
    "export": true,
    "importPath": "./packages/metrics/src/stats/ExponentiallyWeightedMovingAverage.js",
    "importStyle": "EWMA",
    "description": "",
    "lineNumber": 27,
    "interface": false
  },
  {
    "__docId__": 345,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "packages/metrics/src/stats/ExponentiallyWeightedMovingAverage.js~EWMA",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/metrics/src/stats/ExponentiallyWeightedMovingAverage.js~EWMA#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 33,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "alpha",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "interval",
        "description": "time in milliseconds"
      }
    ]
  },
  {
    "__docId__": 346,
    "kind": "member",
    "name": "alpha",
    "memberof": "packages/metrics/src/stats/ExponentiallyWeightedMovingAverage.js~EWMA",
    "static": false,
    "longname": "packages/metrics/src/stats/ExponentiallyWeightedMovingAverage.js~EWMA#alpha",
    "access": "public",
    "description": null,
    "lineNumber": 35,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 347,
    "kind": "member",
    "name": "interval",
    "memberof": "packages/metrics/src/stats/ExponentiallyWeightedMovingAverage.js~EWMA",
    "static": false,
    "longname": "packages/metrics/src/stats/ExponentiallyWeightedMovingAverage.js~EWMA#interval",
    "access": "public",
    "description": null,
    "lineNumber": 37,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 348,
    "kind": "member",
    "name": "initialized",
    "memberof": "packages/metrics/src/stats/ExponentiallyWeightedMovingAverage.js~EWMA",
    "static": false,
    "longname": "packages/metrics/src/stats/ExponentiallyWeightedMovingAverage.js~EWMA#initialized",
    "access": "public",
    "description": null,
    "lineNumber": 39,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 349,
    "kind": "member",
    "name": "currentRate",
    "memberof": "packages/metrics/src/stats/ExponentiallyWeightedMovingAverage.js~EWMA",
    "static": false,
    "longname": "packages/metrics/src/stats/ExponentiallyWeightedMovingAverage.js~EWMA#currentRate",
    "access": "public",
    "description": null,
    "lineNumber": 41,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 350,
    "kind": "member",
    "name": "uncounted",
    "memberof": "packages/metrics/src/stats/ExponentiallyWeightedMovingAverage.js~EWMA",
    "static": false,
    "longname": "packages/metrics/src/stats/ExponentiallyWeightedMovingAverage.js~EWMA#uncounted",
    "access": "public",
    "description": null,
    "lineNumber": 43,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 351,
    "kind": "member",
    "name": "tickInterval",
    "memberof": "packages/metrics/src/stats/ExponentiallyWeightedMovingAverage.js~EWMA",
    "static": false,
    "longname": "packages/metrics/src/stats/ExponentiallyWeightedMovingAverage.js~EWMA#tickInterval",
    "access": "public",
    "description": null,
    "lineNumber": 46,
    "type": {
      "nullable": null,
      "types": [
        "any"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 352,
    "kind": "method",
    "name": "createM1EWMA",
    "memberof": "packages/metrics/src/stats/ExponentiallyWeightedMovingAverage.js~EWMA",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "packages/metrics/src/stats/ExponentiallyWeightedMovingAverage.js~EWMA.createM1EWMA",
    "access": "public",
    "description": "",
    "lineNumber": 62,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{EWMA}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "EWMA"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 353,
    "kind": "method",
    "name": "createM5EWMA",
    "memberof": "packages/metrics/src/stats/ExponentiallyWeightedMovingAverage.js~EWMA",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "packages/metrics/src/stats/ExponentiallyWeightedMovingAverage.js~EWMA.createM5EWMA",
    "access": "public",
    "description": "",
    "lineNumber": 68,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{EWMA}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "EWMA"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 354,
    "kind": "method",
    "name": "createM15EWMA",
    "memberof": "packages/metrics/src/stats/ExponentiallyWeightedMovingAverage.js~EWMA",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "packages/metrics/src/stats/ExponentiallyWeightedMovingAverage.js~EWMA.createM15EWMA",
    "access": "public",
    "description": "",
    "lineNumber": 74,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{EWMA}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "EWMA"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 355,
    "kind": "method",
    "name": "update",
    "memberof": "packages/metrics/src/stats/ExponentiallyWeightedMovingAverage.js~EWMA",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/metrics/src/stats/ExponentiallyWeightedMovingAverage.js~EWMA#update",
    "access": "public",
    "description": "",
    "lineNumber": 82,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{void}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "n",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 357,
    "kind": "method",
    "name": "tick",
    "memberof": "packages/metrics/src/stats/ExponentiallyWeightedMovingAverage.js~EWMA",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/metrics/src/stats/ExponentiallyWeightedMovingAverage.js~EWMA#tick",
    "access": "public",
    "description": "Update our rate measurements every interval.",
    "lineNumber": 90,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{void}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 362,
    "kind": "method",
    "name": "rate",
    "memberof": "packages/metrics/src/stats/ExponentiallyWeightedMovingAverage.js~EWMA",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/metrics/src/stats/ExponentiallyWeightedMovingAverage.js~EWMA#rate",
    "access": "public",
    "description": "Return the rate per second.",
    "lineNumber": 106,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 363,
    "kind": "method",
    "name": "stop",
    "memberof": "packages/metrics/src/stats/ExponentiallyWeightedMovingAverage.js~EWMA",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/metrics/src/stats/ExponentiallyWeightedMovingAverage.js~EWMA#stop",
    "access": "public",
    "description": "",
    "lineNumber": 113,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{void}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 364,
    "kind": "file",
    "name": "packages/metrics/src/stats/ISample.js",
    "content": "/**\n * @name ISample.js\n * @fileoverview The \"ISample\" interface.\n * @copyright Copyright (c) 2017-present, Netifi Inc.\n * @license Apache-2.0\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @flow\n * @exports ISample\n */\n\n'use strict';\n\n/**\n */\nexport interface ISample<T> {\n  /**\n   * Initialize the sample.\n   */\n  init(): void;\n  /**\n   * Add a value (and optionally its timestamp) to the sample.\n   * @param {T} val the value to sample\n   * @param {?number} [timestamp] the timestamp at which this value was generated or sampled\n   */\n  update(val: T, timestamp?: number): void;\n  /**\n   * Clear the items from the sample and reset its size to zero.\n   */\n  clear(): void;\n  /**\n   * Get the number of items in the sample.\n   * @returns {number} the number of items inthe sample\n   */\n  size(): number;\n  /**\n   * Get the items in the sample as an array.\n   * @returns {T[]} the items in the sample\n   */\n  getValues(): T[];\n  /**\n   */\n  print(): void;\n}\n",
    "static": true,
    "longname": "/home/dgross/Netifi/rsocket-rpc-js/rsocket-rpc-js/packages/metrics/src/stats/ISample.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 365,
    "kind": "file",
    "name": "packages/metrics/src/stats/Sample.js",
    "content": "/**\n * @name Sample.js\n * @fileoverview Defines the \"Sample\" class.\n *\n * @flow\n *\n * @requires ISample\n * @exports Sample\n */\n\n'use strict';\n\nimport {ISample} from './ISample';\n\n/**\n */\nexport default class Sample<T> implements ISample<T> {\n  values: T[];\n  count: number;\n\n  constructor() {\n    /** @type {T[]} */\n    this.values = [];\n    /** @type {number} */\n    this.count = 0;\n  }\n\n  /**\n   * Initialize the sample, setting its count to zero and clearing out any previously-stored values.\n   */\n  init(): void {\n    this.clear();\n  }\n  /**\n   * Add a value to the sample. Note: {@link timestamp} is currently unused.\n   * @param {T} val - the value to add\n   * @param {?number} [timestamp] - the time when the value was sampled\n   */\n  update(val: T, timestamp?: number): void {\n    this.values.push(val);\n  }\n  /**\n   * Reset the sample by removing all of its items and setting its count to zero.\n   */\n  clear(): void {\n    this.values = [];\n    this.count = 0;\n  }\n  /**\n   * Get the number of items in the sample.\n   * @return {number} the number of values in the sample.\n   */\n  size(): number {\n    return this.values.length;\n  }\n  /**\n   * Get the items in the sample as an array.\n   * @return {Array} the set of values in the sample.\n   */\n  getValues(): T[] {\n    return this.values;\n  }\n  /**\n   * Output the values of this sample to the console.\n   */\n  print(): void {\n    console.log(this.values);\n  }\n}\n",
    "static": true,
    "longname": "/home/dgross/Netifi/rsocket-rpc-js/rsocket-rpc-js/packages/metrics/src/stats/Sample.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 366,
    "kind": "class",
    "name": "Sample",
    "memberof": "packages/metrics/src/stats/Sample.js",
    "static": true,
    "longname": "packages/metrics/src/stats/Sample.js~Sample",
    "access": "public",
    "export": true,
    "importPath": "./packages/metrics/src/stats/Sample.js",
    "importStyle": "Sample",
    "description": "",
    "lineNumber": 17,
    "interface": false
  },
  {
    "__docId__": 367,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "packages/metrics/src/stats/Sample.js~Sample",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/metrics/src/stats/Sample.js~Sample#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 19,
    "undocument": true
  },
  {
    "__docId__": 368,
    "kind": "member",
    "name": "values",
    "memberof": "packages/metrics/src/stats/Sample.js~Sample",
    "static": false,
    "longname": "packages/metrics/src/stats/Sample.js~Sample#values",
    "access": "public",
    "description": null,
    "lineNumber": 21,
    "type": {
      "nullable": null,
      "types": [
        "T[]"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 369,
    "kind": "member",
    "name": "count",
    "memberof": "packages/metrics/src/stats/Sample.js~Sample",
    "static": false,
    "longname": "packages/metrics/src/stats/Sample.js~Sample#count",
    "access": "public",
    "description": null,
    "lineNumber": 23,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 370,
    "kind": "method",
    "name": "init",
    "memberof": "packages/metrics/src/stats/Sample.js~Sample",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/metrics/src/stats/Sample.js~Sample#init",
    "access": "public",
    "description": "Initialize the sample, setting its count to zero and clearing out any previously-stored values.",
    "lineNumber": 29,
    "params": [],
    "return": null
  },
  {
    "__docId__": 371,
    "kind": "method",
    "name": "update",
    "memberof": "packages/metrics/src/stats/Sample.js~Sample",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/metrics/src/stats/Sample.js~Sample#update",
    "access": "public",
    "description": "Add a value to the sample. Note: {@link timestamp} is currently unused.",
    "lineNumber": 37,
    "params": [
      {
        "nullable": null,
        "types": [
          "T"
        ],
        "spread": false,
        "optional": false,
        "name": "val",
        "description": "the value to add"
      },
      {
        "nullable": true,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "name": "timestamp",
        "description": "the time when the value was sampled"
      }
    ],
    "return": null
  },
  {
    "__docId__": 372,
    "kind": "method",
    "name": "clear",
    "memberof": "packages/metrics/src/stats/Sample.js~Sample",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/metrics/src/stats/Sample.js~Sample#clear",
    "access": "public",
    "description": "Reset the sample by removing all of its items and setting its count to zero.",
    "lineNumber": 43,
    "params": [],
    "return": null
  },
  {
    "__docId__": 375,
    "kind": "method",
    "name": "size",
    "memberof": "packages/metrics/src/stats/Sample.js~Sample",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/metrics/src/stats/Sample.js~Sample#size",
    "access": "public",
    "description": "Get the number of items in the sample.",
    "lineNumber": 51,
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "the number of values in the sample."
    },
    "params": []
  },
  {
    "__docId__": 376,
    "kind": "method",
    "name": "getValues",
    "memberof": "packages/metrics/src/stats/Sample.js~Sample",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/metrics/src/stats/Sample.js~Sample#getValues",
    "access": "public",
    "description": "Get the items in the sample as an array.",
    "lineNumber": 58,
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": "the set of values in the sample."
    },
    "params": []
  },
  {
    "__docId__": 377,
    "kind": "method",
    "name": "print",
    "memberof": "packages/metrics/src/stats/Sample.js~Sample",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/metrics/src/stats/Sample.js~Sample#print",
    "access": "public",
    "description": "Output the values of this sample to the console.",
    "lineNumber": 64,
    "params": [],
    "return": null
  },
  {
    "__docId__": 378,
    "kind": "file",
    "name": "packages/metrics/src/stats/UniformSample.js",
    "content": "/**\n * @name UniformSample.js\n * @fileoverview Defines the \"UniformSample\" class.\n *\n * @flow\n *\n * @requires Sample\n * @exports UniformSample\n */\n\n'use strict';\n\nimport Sample from './Sample';\n\n/**\n * Take a uniform sample of size \"size\" for all values.\n * @extends {Sample}\n */\nexport default class UniformSample<T> extends Sample<T> {\n  limit: number;\n  count: number;\n\n  /**\n   * @param {number} size - the maximum number of items in this sample\n   */\n  constructor(size: number) {\n    super();\n    /** @type {number} */\n    this.limit = size;\n    /** @type {number} */\n    this.count = 0;\n    this.init();\n  }\n\n  /**\n   * Add {@link val} to the set of values that make up the sample. Note, if\n   * the sample size is already equal to the maximum sample size, the new value\n   * may replace a randomly-chosen existing sample value.\n   *\n   * @param {T} val - the value to add to those sampled\n   * @param {?number} timestamp - the time when {@link val} was sampled (currently unused)\n   */\n  update(val: T, timestamp?: number): void {\n    this.count++;\n    if (this.size() < this.limit) {\n      // console.log(\"Adding \"+val+\" to values.\");\n      this.values.push(val);\n    } else {\n      var rand = parseInt(Math.random() * this.count);\n      if (rand < this.limit) {\n        this.values[rand] = val;\n      }\n    }\n  }\n}\n",
    "static": true,
    "longname": "/home/dgross/Netifi/rsocket-rpc-js/rsocket-rpc-js/packages/metrics/src/stats/UniformSample.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 379,
    "kind": "class",
    "name": "UniformSample",
    "memberof": "packages/metrics/src/stats/UniformSample.js",
    "static": true,
    "longname": "packages/metrics/src/stats/UniformSample.js~UniformSample",
    "access": "public",
    "export": true,
    "importPath": "./packages/metrics/src/stats/UniformSample.js",
    "importStyle": "UniformSample",
    "description": "Take a uniform sample of size \"size\" for all values.",
    "lineNumber": 19,
    "interface": false,
    "extends": [
      "Sample"
    ]
  },
  {
    "__docId__": 380,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "packages/metrics/src/stats/UniformSample.js~UniformSample",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/metrics/src/stats/UniformSample.js~UniformSample#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 24,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "size",
        "description": "the maximum number of items in this sample"
      }
    ]
  },
  {
    "__docId__": 381,
    "kind": "member",
    "name": "limit",
    "memberof": "packages/metrics/src/stats/UniformSample.js~UniformSample",
    "static": false,
    "longname": "packages/metrics/src/stats/UniformSample.js~UniformSample#limit",
    "access": "public",
    "description": null,
    "lineNumber": 27,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 382,
    "kind": "member",
    "name": "count",
    "memberof": "packages/metrics/src/stats/UniformSample.js~UniformSample",
    "static": false,
    "longname": "packages/metrics/src/stats/UniformSample.js~UniformSample#count",
    "access": "public",
    "description": null,
    "lineNumber": 29,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 383,
    "kind": "method",
    "name": "update",
    "memberof": "packages/metrics/src/stats/UniformSample.js~UniformSample",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/metrics/src/stats/UniformSample.js~UniformSample#update",
    "access": "public",
    "description": "Add {@link val} to the set of values that make up the sample. Note, if\nthe sample size is already equal to the maximum sample size, the new value\nmay replace a randomly-chosen existing sample value.",
    "lineNumber": 41,
    "params": [
      {
        "nullable": null,
        "types": [
          "T"
        ],
        "spread": false,
        "optional": false,
        "name": "val",
        "description": "the value to add to those sampled"
      },
      {
        "nullable": true,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "timestamp",
        "description": "the time when {@link val} was sampled (currently unused)"
      }
    ],
    "return": null
  },
  {
    "__docId__": 384,
    "kind": "file",
    "name": "packages/metrics/src/stats/index.js",
    "content": "/**\n * @name rsocket-rpc-js/packages/metrics/.../stats\n * @fileoverview Stats package\n *\n * @requires ExponentiallyWeightedMovingAverage\n * @requires ExponentiallyDecayingSample\n * @requires Sample\n * @requires ISample\n * @requires UniformSample\n * @exports EWMA\n * @exports ExponentiallyDecayingSample\n * @exports ISample\n * @exports Sample\n * @exports UniformSample\n */\nimport EWMA from './ExponentiallyWeightedMovingAverage';\nimport ExponentiallyDecayingSample from './ExponentiallyDecayingSample';\nimport Sample from './Sample';\nimport ISample from './ISample';\nimport UniformSample from './UniformSample';\n\nexport {EWMA, ExponentiallyDecayingSample, ISample, Sample, UniformSample};\n",
    "static": true,
    "longname": "/home/dgross/Netifi/rsocket-rpc-js/rsocket-rpc-js/packages/metrics/src/stats/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 385,
    "kind": "file",
    "name": "packages/metrics/src/stats/lib/binary_heap.js",
    "content": "// From http://eloquentjavascript.net/appendix2.html,\n// licensed under CCv3.0: http://creativecommons.org/licenses/by/3.0/\n\nvar utils = require('./utils');\n\n/* This acts as a ordered binary heap for any serializeable JS object or collection of such objects */\nvar BinaryHeap = (module.exports = function BinaryHeap(scoreFunction) {\n  this.content = [];\n  this.scoreFunction = scoreFunction;\n});\n\nBinaryHeap.prototype = {\n  clone: function() {\n    var heap = new BinaryHeap(this.scoreFunction);\n    // A little hacky, but effective.\n    heap.content = JSON.parse(JSON.stringify(this.content));\n    return heap;\n  },\n\n  push: function(element) {\n    // Add the new element to the end of the array.\n    this.content.push(element);\n    // Allow it to bubble up.\n    this.bubbleUp(this.content.length - 1);\n  },\n\n  peek: function() {\n    return this.content[0];\n  },\n\n  pop: function() {\n    // Store the first element so we can return it later.\n    var result = this.content[0];\n    // Get the element at the end of the array.\n    var end = this.content.pop();\n    // If there are any elements left, put the end element at the\n    // start, and let it sink down.\n    if (this.content.length > 0) {\n      this.content[0] = end;\n      this.sinkDown(0);\n    }\n    return result;\n  },\n\n  remove: function(node) {\n    var len = this.content.length;\n    // To remove a value, we must search through the array to find\n    // it.\n    for (var i = 0; i < len; i++) {\n      if (this.content[i] == node) {\n        // When it is found, the process seen in 'pop' is repeated\n        // to fill up the hole.\n        var end = this.content.pop();\n        if (i != len - 1) {\n          this.content[i] = end;\n          if (this.scoreFunction(end) < this.scoreFunction(node))\n            this.bubbleUp(i);\n          else this.sinkDown(i);\n        }\n        return true;\n      }\n    }\n    throw new Error('Node not found.');\n  },\n\n  size: function() {\n    return this.content.length;\n  },\n\n  bubbleUp: function(n) {\n    // Fetch the element that has to be moved.\n    var element = this.content[n];\n    // When at 0, an element can not go up any further.\n    while (n > 0) {\n      // Compute the parent element's index, and fetch it.\n      var parentN = Math.floor((n + 1) / 2) - 1,\n        parent = this.content[parentN];\n      // Swap the elements if the parent is greater.\n      if (this.scoreFunction(element) < this.scoreFunction(parent)) {\n        this.content[parentN] = element;\n        this.content[n] = parent;\n        // Update 'n' to continue at the new position.\n        n = parentN;\n      }\n      // Found a parent that is less, no need to move it further.\n      else {\n        break;\n      }\n    }\n  },\n\n  sinkDown: function(n) {\n    // Look up the target element and its score.\n    var length = this.content.length,\n      element = this.content[n],\n      elemScore = this.scoreFunction(element);\n\n    while (true) {\n      // Compute the indices of the child elements.\n      var child2N = (n + 1) * 2,\n        child1N = child2N - 1;\n      // This is used to store the new position of the element,\n      // if any.\n      var swap = null;\n      // If the first child exists (is inside the array)...\n      if (child1N < length) {\n        // Look it up and compute its score.\n        var child1 = this.content[child1N],\n          child1Score = this.scoreFunction(child1);\n        // If the score is less than our element's, we need to swap.\n        if (child1Score < elemScore) swap = child1N;\n      }\n      // Do the same checks for the other child.\n      if (child2N < length) {\n        var child2 = this.content[child2N],\n          child2Score = this.scoreFunction(child2);\n        if (child2Score < (swap == null ? elemScore : child1Score))\n          swap = child2N;\n      }\n\n      // If the element needs to be moved, swap it, and continue.\n      if (swap != null) {\n        this.content[n] = this.content[swap];\n        this.content[swap] = element;\n        n = swap;\n      }\n      // Otherwise, we are done.\n      else {\n        break;\n      }\n    }\n  },\n};\n",
    "static": true,
    "longname": "/home/dgross/Netifi/rsocket-rpc-js/rsocket-rpc-js/packages/metrics/src/stats/lib/binary_heap.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 386,
    "kind": "variable",
    "name": "utils",
    "memberof": "packages/metrics/src/stats/lib/binary_heap.js",
    "static": true,
    "longname": "packages/metrics/src/stats/lib/binary_heap.js~utils",
    "access": "public",
    "export": false,
    "importPath": "./packages/metrics/src/stats/lib/binary_heap.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 387,
    "kind": "variable",
    "name": "BinaryHeap",
    "memberof": "packages/metrics/src/stats/lib/binary_heap.js",
    "static": true,
    "longname": "packages/metrics/src/stats/lib/binary_heap.js~BinaryHeap",
    "access": "public",
    "export": false,
    "importPath": "./packages/metrics/src/stats/lib/binary_heap.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 388,
    "kind": "file",
    "name": "packages/metrics/src/stats/lib/utils.js",
    "content": "/*\n * Mix in the properties on an object to another object\n * utils.mixin(target, source, [source,] [source, etc.] [merge-flag]);\n * 'merge' recurses, to merge object sub-properties together instead\n * of just overwriting with the source object.\n */\nexports.mixin = (function() {\n  var _mix = function(targ, src, merge) {\n    for (var p in src) {\n      // Don't copy stuff from the prototype\n      if (src.hasOwnProperty(p)) {\n        if (\n          merge &&\n          // Assumes the source property is an Object you can\n          // actually recurse down into\n          typeof src[p] == 'object' &&\n          src[p] !== null &&\n          !(src[p] instanceof Array)\n        ) {\n          // Create the source property if it doesn't exist\n          // TODO: What if it's something weird like a String or Number?\n          if (typeof targ[p] == 'undefined') {\n            targ[p] = {};\n          }\n          _mix(targ[p], src[p], merge); // Recurse\n        }\n        // If it's not a merge-copy, just set and forget\n        else {\n          targ[p] = src[p];\n        }\n      }\n    }\n  };\n\n  return function() {\n    var args = Array.prototype.slice.apply(arguments),\n      merge = false,\n      targ,\n      sources;\n    if (args.length > 2) {\n      if (typeof args[args.length - 1] == 'boolean') {\n        merge = args.pop();\n      }\n    }\n    targ = args.shift();\n    sources = args;\n    for (var i = 0, ii = sources.length; i < ii; i++) {\n      _mix(targ, sources[i], merge);\n    }\n    return targ;\n  };\n})();\n",
    "static": true,
    "longname": "/home/dgross/Netifi/rsocket-rpc-js/rsocket-rpc-js/packages/metrics/src/stats/lib/utils.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 389,
    "kind": "file",
    "name": "packages/tracing/src/SpanSingle.js",
    "content": "/**\n * @name SpanSingle.js\n * @fileoverview Defines the \"SpanSingleSubscriber\" class.\n * @requires NPM:rsocket-flowable\n * @requires NPM:opentracing\n * @exports createSpanSingle\n */\nimport {Single, IFutureSubscriber} from 'rsocket-flowable/build/Single';\nimport {Tracer, Span, SpanContext, FORMAT_TEXT_MAP} from 'opentracing';\n\n/**\n * @param {Single<T>} single -\n * @param {Tracer} tracer -\n * @param {string} name -\n * @param {?(SpanContext|Span)} context -\n * @param {?Object} metadata -\n * @param {Object} tags -\n * @return {Single}\n */\nexport function createSpanSingle(\n  single: Single<T>,\n  tracer: Tracer,\n  name: string,\n  context?: SpanContext | Span,\n  metadata?: Object,\n  ...tags: Object\n) {\n  return new Single(subscriber => {\n    const spanSubscriber = new SpanSingleSubscriber(\n      subscriber,\n      tracer,\n      name,\n      context,\n      metadata,\n      ...tags,\n    );\n    single.subscribe(spanSubscriber);\n  });\n}\n\n/**\n */\nclass SpanSingleSubscriber implements IFutureSubscriber<T> {\n  _span: Span;\n  _subscriber: IFutureSubscriber<T>;\n  _tracer: Tracer;\n  _cancel: () => void;\n\n  /**\n   * @param {IFutureSubscriber<T>} subscriber -\n   * @param {Tracer} tracer -\n   * @param {string} name -\n   * @param {SpanContext|Span} [context] - \n   * @param {Object} [metadata] - \n   * @param {Object} tags -\n   */\n  constructor(\n    subscriber: IFutureSubscriber<T>,\n    tracer: Tracer,\n    name: string,\n    context?: SpanContext | Span,\n    metadata?: Object,\n    ...tags: Object\n  ) {\n    this._subscriber = subscriber;\n\n    this._tracer = tracer;\n\n    let options = {};\n\n    if (context) {\n      options.childOf = context;\n    }\n\n    if (tags) {\n      const finalTags = {};\n      tags.forEach(tag => {\n        Object.keys(tag).forEach(key => {\n          finalTags[key] = tag[key];\n        });\n      });\n      options.tags = finalTags;\n    }\n\n    // Not supported at this time.\n    // if (references) {\n    //   options.references = references;\n    // }\n    //\n    options.startTime = Date.now() * 1000;\n\n    this._span = this._tracer.startSpan(name, options);\n\n    this._tracer.inject(\n      this._span.context(),\n      FORMAT_TEXT_MAP,\n      metadata === undefined || metadata === null ? {} : metadata,\n    );\n  }\n\n  /**\n   */\n  cleanup() {\n    this._span.finish();\n  }\n\n  /**\n   */\n  onSubscribe(cancel?: () => void) {\n    this._cancel = cancel;\n    this._span.log('onSubscribe', timeInMicros());\n    this._subscriber.onSubscribe(() => {\n      this.cancel();\n    });\n  }\n\n  /**\n   */\n  cancel() {\n    try {\n      this._span.log('cancel', timeInMicros());\n      this._cancel && this._cancel();\n    } finally {\n      this.cleanup();\n    }\n  }\n\n  /**\n   */\n  onError(error: Error) {\n    try {\n      this._span.log('onError', timeInMicros());\n      this._subscriber.onError(error);\n    } finally {\n      this.cleanup();\n    }\n  }\n\n  /**\n   */\n  onComplete(value: T) {\n    try {\n      this._span.log('onComplete', timeInMicros());\n      this._subscriber.onComplete(value);\n    } finally {\n      this.cleanup();\n    }\n  }\n}\n\n/**\n * Return the current time in microseconds.\n *\n * @return {number} The return value of {@link Date#now} converted into microseconds\n */\nfunction timeInMicros() {\n  return Date.now() * 1000 /* microseconds */;\n}\n",
    "static": true,
    "longname": "/home/dgross/Netifi/rsocket-rpc-js/rsocket-rpc-js/packages/tracing/src/SpanSingle.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 390,
    "kind": "function",
    "name": "createSpanSingle",
    "memberof": "packages/tracing/src/SpanSingle.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "packages/tracing/src/SpanSingle.js~createSpanSingle",
    "access": "public",
    "export": true,
    "importPath": "./packages/tracing/src/SpanSingle.js",
    "importStyle": "{createSpanSingle}",
    "description": "",
    "lineNumber": 20,
    "params": [
      {
        "nullable": null,
        "types": [
          "Single<T>"
        ],
        "spread": false,
        "optional": false,
        "name": "single",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Tracer"
        ],
        "spread": false,
        "optional": false,
        "name": "tracer",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": ""
      },
      {
        "nullable": true,
        "types": [
          "SpanContext",
          "Span"
        ],
        "spread": false,
        "optional": false,
        "name": "context",
        "description": ""
      },
      {
        "nullable": true,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "metadata",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "tags",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Single"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 391,
    "kind": "class",
    "name": "SpanSingleSubscriber",
    "memberof": "packages/tracing/src/SpanSingle.js",
    "static": true,
    "longname": "packages/tracing/src/SpanSingle.js~SpanSingleSubscriber",
    "access": "public",
    "export": false,
    "importPath": "./packages/tracing/src/SpanSingle.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 29,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 392,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "packages/tracing/src/SpanSingle.js~SpanSingleSubscriber",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/tracing/src/SpanSingle.js~SpanSingleSubscriber#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 39,
    "params": [
      {
        "nullable": null,
        "types": [
          "IFutureSubscriber<T>"
        ],
        "spread": false,
        "optional": false,
        "name": "subscriber",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Tracer"
        ],
        "spread": false,
        "optional": false,
        "name": "tracer",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "SpanContext",
          "Span"
        ],
        "spread": false,
        "optional": true,
        "name": "context",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "metadata",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "tags",
        "description": ""
      }
    ]
  },
  {
    "__docId__": 393,
    "kind": "member",
    "name": "_subscriber",
    "memberof": "packages/tracing/src/SpanSingle.js~SpanSingleSubscriber",
    "static": false,
    "longname": "packages/tracing/src/SpanSingle.js~SpanSingleSubscriber#_subscriber",
    "access": "private",
    "description": null,
    "lineNumber": 40,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 394,
    "kind": "member",
    "name": "_tracer",
    "memberof": "packages/tracing/src/SpanSingle.js~SpanSingleSubscriber",
    "static": false,
    "longname": "packages/tracing/src/SpanSingle.js~SpanSingleSubscriber#_tracer",
    "access": "private",
    "description": null,
    "lineNumber": 42,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 395,
    "kind": "member",
    "name": "_span",
    "memberof": "packages/tracing/src/SpanSingle.js~SpanSingleSubscriber",
    "static": false,
    "longname": "packages/tracing/src/SpanSingle.js~SpanSingleSubscriber#_span",
    "access": "private",
    "description": null,
    "lineNumber": 67,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 396,
    "kind": "method",
    "name": "cleanup",
    "memberof": "packages/tracing/src/SpanSingle.js~SpanSingleSubscriber",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/tracing/src/SpanSingle.js~SpanSingleSubscriber#cleanup",
    "access": "public",
    "description": "",
    "lineNumber": 74,
    "params": [],
    "return": null
  },
  {
    "__docId__": 397,
    "kind": "method",
    "name": "onSubscribe",
    "memberof": "packages/tracing/src/SpanSingle.js~SpanSingleSubscriber",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/tracing/src/SpanSingle.js~SpanSingleSubscriber#onSubscribe",
    "access": "public",
    "description": "",
    "lineNumber": 80,
    "params": [
      {
        "name": "cancel",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 398,
    "kind": "member",
    "name": "_cancel",
    "memberof": "packages/tracing/src/SpanSingle.js~SpanSingleSubscriber",
    "static": false,
    "longname": "packages/tracing/src/SpanSingle.js~SpanSingleSubscriber#_cancel",
    "access": "private",
    "description": null,
    "lineNumber": 81,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 399,
    "kind": "method",
    "name": "cancel",
    "memberof": "packages/tracing/src/SpanSingle.js~SpanSingleSubscriber",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/tracing/src/SpanSingle.js~SpanSingleSubscriber#cancel",
    "access": "public",
    "description": "",
    "lineNumber": 90,
    "params": [],
    "return": null
  },
  {
    "__docId__": 401,
    "kind": "method",
    "name": "onError",
    "memberof": "packages/tracing/src/SpanSingle.js~SpanSingleSubscriber",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/tracing/src/SpanSingle.js~SpanSingleSubscriber#onError",
    "access": "public",
    "description": "",
    "lineNumber": 101,
    "params": [
      {
        "name": "error",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 402,
    "kind": "method",
    "name": "onComplete",
    "memberof": "packages/tracing/src/SpanSingle.js~SpanSingleSubscriber",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/tracing/src/SpanSingle.js~SpanSingleSubscriber#onComplete",
    "access": "public",
    "description": "",
    "lineNumber": 112,
    "params": [
      {
        "name": "value",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 403,
    "kind": "function",
    "name": "timeInMicros",
    "memberof": "packages/tracing/src/SpanSingle.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "packages/tracing/src/SpanSingle.js~timeInMicros",
    "access": "public",
    "export": false,
    "importPath": "./packages/tracing/src/SpanSingle.js",
    "importStyle": null,
    "description": "Return the current time in microseconds.",
    "lineNumber": 127,
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "The return value of {@link Date#now} converted into microseconds"
    },
    "params": [],
    "ignore": true
  },
  {
    "__docId__": 404,
    "kind": "file",
    "name": "packages/tracing/src/SpanSubscriber.js",
    "content": "/**\n * @name SpanSubscriber.js\n * @fileoverview Defines the \"SpanSubscriber\" class.\n * @requires NPM:rsocket-types\n * @requires NPM:opentracing\n * @exports SpanSubscriber\n */\n\nimport {ISubscriber, ISubscription} from 'rsocket-types';\nimport {Tracer, Span, SpanContext, FORMAT_TEXT_MAP} from 'opentracing';\n\n/**\n */\nexport class SpanSubscriber<T> implements ISubscriber<T>, ISubscription {\n  _span: Span;\n  _rootSpan: Span;\n  _subscriber: ISubscriber;\n  _tracer: Tracer;\n  _subscription: ISubscription;\n  _nextCount: number;\n  _requestOnce: boolean;\n\n  /**\n   * @param {ISubscriber<T>} subscriber -\n   * @param {Tracer} tracer -\n   * @param {string} name -\n   * @param {?(SpanContext|Span)} [context] - \n   * @param {?Object} [metadata] - \n   * @param {Object} ...tags -\n   */\n  constructor(\n    subscriber: ISubscriber<T>,\n    tracer: Tracer,\n    name: string,\n    context?: SpanContext | Span,\n    metadata?: Object,\n    ...tags: Object\n  ) {\n    /** @type {Tracer} */\n    this._tracer = tracer;\n    /** @type {ISubscriber} */\n    this._subscriber = subscriber;\n    this._nextCount = 0;\n    this._requestOnce = false;\n\n    let options = {};\n\n    if (context) {\n      options.childOf = context;\n    }\n\n    if (tags) {\n      const finalTags = {};\n      tags.forEach(tag => {\n        Object.keys(tag).forEach(key => {\n          finalTags[key] = tag[key];\n        });\n      });\n\n      options.tags = finalTags;\n    }\n\n    // Not currently supported\n    // if (references) {\n    //   options.references = references;\n    // }\n    //\n\n    options.startTime = Date.now() * 1000;\n\n    /** @type {Span} */\n    this._span = tracer.startSpan(name, options);\n    /** @type {Span} */\n    this._rootSpan = this._rootSpan || this._span;\n\n    tracer.inject(\n      this._span.context(),\n      FORMAT_TEXT_MAP,\n      metadata === undefined || metadata === null ? {} : metadata,\n    );\n  }\n\n  /**\n   */\n  cleanup() {\n    this._span.finish();\n  }\n\n  /**\n   * @param {?Subscription} subscription\n   */\n  onSubscribe(subscription?: Subscription) {\n    /** @type {ISubscription} */\n    this._subscription = subscription;\n    this._span.log('onSubscribe', timeInMicros());\n    this._subscriber.onSubscribe(this);\n  }\n\n  /**\n   * @param {number} n\n   */\n  request(n: number) {\n    if (!this._requestOnce) {\n      this._requestOnce = true;\n\n      this._span.log('request issued', timeInMicros());\n    }\n\n    this._subscription && this._subscription.request(n);\n  }\n\n  /**\n   */\n  cancel() {\n    try {\n      this._span.log('cancel', timeInMicros());\n      this._subscription && this._subscription.cancel();\n    } finally {\n      this.cleanup();\n    }\n  }\n\n  /**\n   * @param {T} value\n   */\n  onNext(value: T) {\n    this._subscriber.onNext(value);\n  }\n\n  /**\n   * @param {Error} error\n   */\n  onError(error: Error) {\n    try {\n      this._span.log('onError', timeInMicros());\n      this._subscriber.onError(error);\n    } finally {\n      this.cleanup();\n    }\n  }\n\n  /**\n   */\n  onComplete() {\n    try {\n      this._span.log('onComplete', timeInMicros());\n      this._subscriber.onComplete();\n    } finally {\n      this.cleanup();\n    }\n  }\n}\n\n/**\n * Return the current time in microseconds\n *\n * @return {number} The return value of {@link Date#now} converted to microseconds.\n */\nfunction timeInMicros() {\n  return Date.now() * 1000 /* microseconds */;\n}\n",
    "static": true,
    "longname": "/home/dgross/Netifi/rsocket-rpc-js/rsocket-rpc-js/packages/tracing/src/SpanSubscriber.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 405,
    "kind": "class",
    "name": "SpanSubscriber",
    "memberof": "packages/tracing/src/SpanSubscriber.js",
    "static": true,
    "longname": "packages/tracing/src/SpanSubscriber.js~SpanSubscriber",
    "access": "public",
    "export": true,
    "importPath": "./packages/tracing/src/SpanSubscriber.js",
    "importStyle": "{SpanSubscriber}",
    "description": "",
    "lineNumber": 14,
    "interface": false
  },
  {
    "__docId__": 406,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "packages/tracing/src/SpanSubscriber.js~SpanSubscriber",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/tracing/src/SpanSubscriber.js~SpanSubscriber#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 24,
    "params": [
      {
        "nullable": null,
        "types": [
          "ISubscriber<T>"
        ],
        "spread": false,
        "optional": false,
        "name": "subscriber",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Tracer"
        ],
        "spread": false,
        "optional": false,
        "name": "tracer",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": ""
      },
      {
        "nullable": true,
        "types": [
          "SpanContext",
          "Span"
        ],
        "spread": false,
        "optional": true,
        "name": "context",
        "description": ""
      },
      {
        "nullable": true,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "metadata",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "...tags",
        "description": ""
      }
    ]
  },
  {
    "__docId__": 407,
    "kind": "member",
    "name": "_tracer",
    "memberof": "packages/tracing/src/SpanSubscriber.js~SpanSubscriber",
    "static": false,
    "longname": "packages/tracing/src/SpanSubscriber.js~SpanSubscriber#_tracer",
    "access": "private",
    "description": null,
    "lineNumber": 26,
    "type": {
      "nullable": null,
      "types": [
        "Tracer"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 408,
    "kind": "member",
    "name": "_subscriber",
    "memberof": "packages/tracing/src/SpanSubscriber.js~SpanSubscriber",
    "static": false,
    "longname": "packages/tracing/src/SpanSubscriber.js~SpanSubscriber#_subscriber",
    "access": "private",
    "description": null,
    "lineNumber": 28,
    "type": {
      "nullable": null,
      "types": [
        "ISubscriber"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 409,
    "kind": "member",
    "name": "_nextCount",
    "memberof": "packages/tracing/src/SpanSubscriber.js~SpanSubscriber",
    "static": false,
    "longname": "packages/tracing/src/SpanSubscriber.js~SpanSubscriber#_nextCount",
    "access": "private",
    "description": null,
    "lineNumber": 29,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 410,
    "kind": "member",
    "name": "_requestOnce",
    "memberof": "packages/tracing/src/SpanSubscriber.js~SpanSubscriber",
    "static": false,
    "longname": "packages/tracing/src/SpanSubscriber.js~SpanSubscriber#_requestOnce",
    "access": "private",
    "description": null,
    "lineNumber": 30,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 411,
    "kind": "member",
    "name": "_span",
    "memberof": "packages/tracing/src/SpanSubscriber.js~SpanSubscriber",
    "static": false,
    "longname": "packages/tracing/src/SpanSubscriber.js~SpanSubscriber#_span",
    "access": "private",
    "description": null,
    "lineNumber": 58,
    "type": {
      "nullable": null,
      "types": [
        "Span"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 412,
    "kind": "member",
    "name": "_rootSpan",
    "memberof": "packages/tracing/src/SpanSubscriber.js~SpanSubscriber",
    "static": false,
    "longname": "packages/tracing/src/SpanSubscriber.js~SpanSubscriber#_rootSpan",
    "access": "private",
    "description": null,
    "lineNumber": 60,
    "type": {
      "nullable": null,
      "types": [
        "Span"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 413,
    "kind": "method",
    "name": "cleanup",
    "memberof": "packages/tracing/src/SpanSubscriber.js~SpanSubscriber",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/tracing/src/SpanSubscriber.js~SpanSubscriber#cleanup",
    "access": "public",
    "description": "",
    "lineNumber": 67,
    "params": [],
    "return": null
  },
  {
    "__docId__": 414,
    "kind": "method",
    "name": "onSubscribe",
    "memberof": "packages/tracing/src/SpanSubscriber.js~SpanSubscriber",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/tracing/src/SpanSubscriber.js~SpanSubscriber#onSubscribe",
    "access": "public",
    "description": "",
    "lineNumber": 74,
    "params": [
      {
        "nullable": true,
        "types": [
          "Subscription"
        ],
        "spread": false,
        "optional": false,
        "name": "subscription",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 415,
    "kind": "member",
    "name": "_subscription",
    "memberof": "packages/tracing/src/SpanSubscriber.js~SpanSubscriber",
    "static": false,
    "longname": "packages/tracing/src/SpanSubscriber.js~SpanSubscriber#_subscription",
    "access": "private",
    "description": null,
    "lineNumber": 76,
    "type": {
      "nullable": null,
      "types": [
        "ISubscription"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 416,
    "kind": "method",
    "name": "request",
    "memberof": "packages/tracing/src/SpanSubscriber.js~SpanSubscriber",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/tracing/src/SpanSubscriber.js~SpanSubscriber#request",
    "access": "public",
    "description": "",
    "lineNumber": 84,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "n",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 419,
    "kind": "method",
    "name": "cancel",
    "memberof": "packages/tracing/src/SpanSubscriber.js~SpanSubscriber",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/tracing/src/SpanSubscriber.js~SpanSubscriber#cancel",
    "access": "public",
    "description": "",
    "lineNumber": 96,
    "params": [],
    "return": null
  },
  {
    "__docId__": 421,
    "kind": "method",
    "name": "onNext",
    "memberof": "packages/tracing/src/SpanSubscriber.js~SpanSubscriber",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/tracing/src/SpanSubscriber.js~SpanSubscriber#onNext",
    "access": "public",
    "description": "",
    "lineNumber": 108,
    "params": [
      {
        "nullable": null,
        "types": [
          "T"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 422,
    "kind": "method",
    "name": "onError",
    "memberof": "packages/tracing/src/SpanSubscriber.js~SpanSubscriber",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/tracing/src/SpanSubscriber.js~SpanSubscriber#onError",
    "access": "public",
    "description": "",
    "lineNumber": 115,
    "params": [
      {
        "nullable": null,
        "types": [
          "Error"
        ],
        "spread": false,
        "optional": false,
        "name": "error",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 423,
    "kind": "method",
    "name": "onComplete",
    "memberof": "packages/tracing/src/SpanSubscriber.js~SpanSubscriber",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/tracing/src/SpanSubscriber.js~SpanSubscriber#onComplete",
    "access": "public",
    "description": "",
    "lineNumber": 126,
    "params": [],
    "return": null
  },
  {
    "__docId__": 424,
    "kind": "function",
    "name": "timeInMicros",
    "memberof": "packages/tracing/src/SpanSubscriber.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "packages/tracing/src/SpanSubscriber.js~timeInMicros",
    "access": "public",
    "export": false,
    "importPath": "./packages/tracing/src/SpanSubscriber.js",
    "importStyle": null,
    "description": "Return the current time in microseconds",
    "lineNumber": 141,
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "The return value of {@link Date#now} converted to microseconds."
    },
    "params": [],
    "ignore": true
  },
  {
    "__docId__": 425,
    "kind": "file",
    "name": "packages/tracing/src/Tracing.js",
    "content": "/**\n * @name Tracing.js\n * @fileoverview Tracing functionality.\n * @requires NPM:rsocket-core\n * @requires NPM:rsocket-types\n * @requires NPM:rsocket-flowable\n * @requires NPM:opentracing\n * @requires NPM:rsocket-rpc-frames\n * @requires SpanSubscriber\n * @requires SpanSingle\n * @exports deserializeTraceData\n * @exports mapToBuffer\n * @exports bufferToMap\n * @exports trace\n * @exports traceAsChild\n * @exports traceSingle\n * @exports traceSingleAsChild\n */\n\nimport {UTF8Encoder, BufferEncoder, createBuffer} from 'rsocket-core';\nimport {ISubscriber} from 'rsocket-types';\nimport {Flowable, Single} from 'rsocket-flowable';\n\nimport {SpanSubscriber} from './SpanSubscriber';\nimport {createSpanSingle} from './SpanSingle';\nimport {SpanContext, Tracer, FORMAT_TEXT_MAP} from 'opentracing';\n\nimport {getTracing} from 'rsocket-rpc-frames';\n\n/**\n * @param {?Tracer} tracer - an OpenTracing {@link Tracer}\n * @param {Buffer} metadata -\n * @returns {?SpanContext} or null if the tracer is null or there is no tracing data\n * @see https://opentracing.io/\n * @see https://opentracing-javascript.surge.sh/classes/tracer.html\n */\nexport function deserializeTraceData(tracer, metadata) {\n  if (!tracer) {\n    return null;\n  }\n\n  const tracingData = getTracing(metadata);\n\n  if (BufferEncoder.byteLength(tracingData) <= 0) {\n    return null;\n  }\n\n  return tracer.extract(FORMAT_TEXT_MAP, bufferToMap(tracingData));\n}\n\n/**\n * @param {?Object} map -\n * @returns {Buffer}\n */\nexport function mapToBuffer(map: Object): Buffer {\n  if (!map || Object.keys(map).length <= 0) {\n    return createBuffer(0);\n  }\n\n  const aggregatedTags = Object.keys(map).reduce(\n    (aggregate, key) => {\n      const val = map[key];\n      const keyLen = UTF8Encoder.byteLength(key);\n      const keyBuf = createBuffer(keyLen);\n      UTF8Encoder.encode(key, keyBuf, 0, keyLen);\n\n      const valLen = UTF8Encoder.byteLength(val);\n      const valBuf = createBuffer(valLen);\n      UTF8Encoder.encode(val, valBuf, 0, valLen);\n\n      const newEntries = aggregate.entries;\n      newEntries.push({keyLen, keyBuf, valLen, valBuf});\n\n      return {\n        // 4 for the sizes plus the actual key and actual value\n        totalSize: aggregate.totalSize + 4 + keyLen + valLen,\n        entries: newEntries,\n      };\n    },\n    {totalSize: 0, entries: []},\n  );\n\n  let offset = 0;\n  const resultBuf = createBuffer(aggregatedTags.totalSize);\n  aggregatedTags.entries.forEach(entry => {\n    resultBuf.writeUInt16BE(entry.keyLen, offset);\n    offset += 2; // 2 bytes for key length\n\n    BufferEncoder.encode(\n      entry.keyBuf,\n      resultBuf,\n      offset,\n      offset + entry.keyLen,\n    );\n    offset += entry.keyLen;\n\n    resultBuf.writeUInt16BE(entry.valLen, offset);\n    offset += 2;\n\n    BufferEncoder.encode(\n      entry.valBuf,\n      resultBuf,\n      offset,\n      offset + entry.valLen,\n    );\n    offset += entry.valLen;\n  });\n\n  return resultBuf;\n}\n\n/**\n * @param {!Buffer} buffer - \n * @returns {Object}\n */\nexport function bufferToMap(buffer: Buffer): Object {\n  const result = {};\n\n  let offset = 0;\n  while (offset < buffer.length) {\n    let keyLen = buffer.readUInt16BE(offset);\n    offset += 2;\n\n    let key = UTF8Encoder.decode(buffer, offset, offset + keyLen);\n    offset += keyLen;\n\n    let valLen = buffer.readUInt16BE(offset);\n    offset += 2;\n\n    let value = UTF8Encoder.decode(buffer, offset, offset + valLen);\n    offset += valLen;\n\n    result[key] = value;\n  }\n\n  return result;\n}\n\n/**\n * Allows propagation of a {@link SpanContext} map through a {@link Flowable}.\n *\n * @example <caption>Wraps default tags \"tag1\" and \"tag2\" and picks up \"additionalTag1\" and \"additionalTag2\":</caption>\n * const traceCapture = trace(myTracer, \"myOperation\", {tag1: \"value\"}, {tag2: \"another value\"});\n *\n * ... more code ...\n *\n * const subscriberTransformer = traceCapture({additionalTag1: 1, additionalTag2: \"two\"});\n *\n * subscriberTransformer(rsocket.requestStream(serviceRequest))\n * .subscribe({ ... });\n *\n * @param {?Tracer} tracer - an OpenTracing {@link Tracer}\n * @param {?String} name - an operation name\n * @param {Object} tags - You can pass a collection of tags in the form of a map/Object and have it woven through a Flowable=>Flowable function.\n * @returns {function}\n * @see https://opentracing-javascript.surge.sh/classes/spancontext.html\n * @see https://opentracing.io/\n * @see https://opentracing-javascript.surge.sh/classes/tracer.html\n */\nexport function trace<T>(\n  tracer?: Tracer,\n  name?: String,\n  ...tags: Object\n): Object => (Flowable<T>) => Flowable<T> {\n  if (tracer && name) {\n    return (metadata: Object) => {\n      return (flowable: Flowable<T>) => {\n        return flowable.lift((subscriber: ISubscriber<T>) => {\n          return new SpanSubscriber(\n            subscriber,\n            tracer,\n            name,\n            null,\n            metadata,\n            ...tags,\n          );\n        });\n      };\n    };\n  } else {\n    return (map: Object) => (publisher: Flowable<T>) => publisher;\n  }\n}\n\n/**\n * Similar to {@link trace}, except meant to be used on the server side where a\n * {@link SpanContext} has been passed from a client.\n * @example\n * const traceCapture = traceAsChild(myTracer, \"myServerOperation\", {serverTag1: \"value\"}, {serverTag2: \"another value\"});\n * const subscriberTransformer = traceCapture(deserializeTraceData(myTracer, requestMetadata));\n * return subscriberTransformer(serviceImpl.requestStream(serviceRequest));\n * @param {?Tracer} tracer - an OpenTracing {@link Tracer}\n * @param {?String} name - an operation name\n * @param {Object} tags - You can pass a collection of tags in the form of a map/Object and have it woven through a Flowable=>Flowable function.\n * @returns {function}\n * @see https://opentracing-javascript.surge.sh/classes/spancontext.html\n * @see https://opentracing.io/\n * @see https://opentracing-javascript.surge.sh/classes/tracer.html\n */\nexport function traceAsChild<T>(\n  tracer?: Tracer,\n  name?: String,\n  ...tags: Object\n): SpanContext => (Flowable<T>) => Flowable<T> {\n  if (tracer && name) {\n    return (context: SpanContext) => {\n      return (flowable: Flowable<T>) => {\n        return flowable.lift((subscriber: ISubscriber<T>) => {\n          return new SpanSubscriber(\n            subscriber,\n            tracer,\n            name,\n            context,\n            null,\n            ...tags,\n          );\n        });\n      };\n    };\n  } else {\n    return (context: SpanContext) => (publisher: Flowable<T>) => publisher;\n  }\n}\n\n/**\n * Allows propagation of a {@link SpanContext} map through a Flowable.\n *\n * @example <caption>Wraps default tags \"tag1\" and \"tag2\" and picks up \"additionalTag1\" and \"additionalTag2\":</caption>\n * const traceCapture = trace(myTracer, \"myOperation\", {tag1: \"value\"}, {tag2: \"another value\"});\n *\n * ... more code ...\n *\n * const subscriberTransformer = traceCapture({additionalTag1: 1, additionalTag2: \"two\"});\n *\n * subscriberTransformer(rsocket.requestStream(serviceRequest))\n * .subscribe({ ... });\n *\n * @param {?Tracer} tracer - an OpenTracing {@link Tracer}\n * @param {?String} name - an operation name\n * @param {Object} tags - You can pass a collection of tags in the form of a map/Object and have it woven through a Single=>Single function.\n * @returns {function}\n * @see https://opentracing-javascript.surge.sh/classes/spancontext.html\n * @see https://opentracing.io/\n * @see https://opentracing-javascript.surge.sh/classes/tracer.html\n */\nexport function traceSingle<T>(\n  tracer?: Tracer,\n  name?: String,\n  ...tags: Object\n): Object => (Single<T>) => Single<T> {\n  if (tracer && name) {\n    return (metadata: Object) => {\n      return (single: Single<T>) => {\n        return createSpanSingle(single, tracer, name, null, metadata, ...tags);\n      };\n    };\n  } else {\n    return (map: Object) => (single: Single<T>) => single;\n  }\n}\n\n/**\n * Similar to {@link traceSingle}, except meant to be used on the server side\n * where a {@link SpanContext} has been passed from a client.\n * @example\n * const traceCapture = traceAsChild(myTracer, \"myServerOperation\", {serverTag1: \"value\"}, {serverTag2: \"another value\"});\n * const subscriberTransformer = traceCapture(deserializeTraceData(myTracer, requestMetadata));\n * return subscriberTransformer(serviceImpl.requestStream(serviceRequest));\n * @param {?Tracer} tracer - an OpenTracing {@link Tracer}\n * @param {?String} name - an operation name\n * @param {Object} tags - You can pass a collection of tags in the form of a map/Object and have it woven through a Single=>Single function.\n * @returns {function}\n * @see https://opentracing-javascript.surge.sh/classes/spancontext.html\n * @see https://opentracing.io/\n * @see https://opentracing-javascript.surge.sh/classes/tracer.html\n */\nexport function traceSingleAsChild<T>(\n  tracer?: Tracer,\n  name?: String,\n  ...tags: Object\n): SpanContext => (Single<T>) => Single<T> {\n  if (tracer && name) {\n    return (context: SpanContext) => {\n      return (single: Single<T>) => {\n        return createSpanSingle(single, tracer, name, context, null, ...tags);\n      };\n    };\n  } else {\n    return (context: SpanContext) => (single: Single<T>) => single;\n  }\n}\n",
    "static": true,
    "longname": "/home/dgross/Netifi/rsocket-rpc-js/rsocket-rpc-js/packages/tracing/src/Tracing.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 426,
    "kind": "function",
    "name": "deserializeTraceData",
    "memberof": "packages/tracing/src/Tracing.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "packages/tracing/src/Tracing.js~deserializeTraceData",
    "access": "public",
    "export": true,
    "importPath": "./packages/tracing/src/Tracing.js",
    "importStyle": "{deserializeTraceData}",
    "description": "",
    "see": [
      "https://opentracing.io/",
      "https://opentracing-javascript.surge.sh/classes/tracer.html"
    ],
    "lineNumber": 37,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{?SpanContext} or null if the tracer is null or there is no tracing data"
      }
    ],
    "params": [
      {
        "nullable": true,
        "types": [
          "Tracer"
        ],
        "spread": false,
        "optional": false,
        "name": "tracer",
        "description": "an OpenTracing {@link Tracer}"
      },
      {
        "nullable": null,
        "types": [
          "Buffer"
        ],
        "spread": false,
        "optional": false,
        "name": "metadata",
        "description": ""
      }
    ],
    "return": {
      "nullable": true,
      "types": [
        "SpanContext"
      ],
      "spread": false,
      "description": "or null if the tracer is null or there is no tracing data"
    }
  },
  {
    "__docId__": 427,
    "kind": "function",
    "name": "mapToBuffer",
    "memberof": "packages/tracing/src/Tracing.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "packages/tracing/src/Tracing.js~mapToBuffer",
    "access": "public",
    "export": true,
    "importPath": "./packages/tracing/src/Tracing.js",
    "importStyle": "{mapToBuffer}",
    "description": "",
    "lineNumber": 55,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Buffer}"
      }
    ],
    "params": [
      {
        "nullable": true,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "map",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Buffer"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 428,
    "kind": "function",
    "name": "bufferToMap",
    "memberof": "packages/tracing/src/Tracing.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "packages/tracing/src/Tracing.js~bufferToMap",
    "access": "public",
    "export": true,
    "importPath": "./packages/tracing/src/Tracing.js",
    "importStyle": "{bufferToMap}",
    "description": "",
    "lineNumber": 103,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object}"
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "Buffer"
        ],
        "spread": false,
        "optional": false,
        "name": "buffer",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 429,
    "kind": "function",
    "name": "trace",
    "memberof": "packages/tracing/src/Tracing.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "packages/tracing/src/Tracing.js~trace",
    "access": "public",
    "export": true,
    "importPath": "./packages/tracing/src/Tracing.js",
    "importStyle": "{trace}",
    "description": "Allows propagation of a {@link SpanContext} map through a {@link Flowable}.",
    "examples": [
      "<caption>Wraps default tags \"tag1\" and \"tag2\" and picks up \"additionalTag1\" and \"additionalTag2\":</caption>\nconst traceCapture = trace(myTracer, \"myOperation\", {tag1: \"value\"}, {tag2: \"another value\"});\n\n... more code ...\n\nconst subscriberTransformer = traceCapture({additionalTag1: 1, additionalTag2: \"two\"});\n\nsubscriberTransformer(rsocket.requestStream(serviceRequest))\n.subscribe({ ... });"
    ],
    "see": [
      "https://opentracing-javascript.surge.sh/classes/spancontext.html",
      "https://opentracing.io/",
      "https://opentracing-javascript.surge.sh/classes/tracer.html"
    ],
    "lineNumber": 147,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{function}"
      }
    ],
    "params": [
      {
        "nullable": true,
        "types": [
          "Tracer"
        ],
        "spread": false,
        "optional": false,
        "name": "tracer",
        "description": "an OpenTracing {@link Tracer}"
      },
      {
        "nullable": true,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "an operation name"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "tags",
        "description": "You can pass a collection of tags in the form of a map/Object and have it woven through a Flowable=>Flowable function."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "function"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 430,
    "kind": "function",
    "name": "traceAsChild",
    "memberof": "packages/tracing/src/Tracing.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "packages/tracing/src/Tracing.js~traceAsChild",
    "access": "public",
    "export": true,
    "importPath": "./packages/tracing/src/Tracing.js",
    "importStyle": "{traceAsChild}",
    "description": "Similar to {@link trace}, except meant to be used on the server side where a\n{@link SpanContext} has been passed from a client.",
    "examples": [
      "const traceCapture = traceAsChild(myTracer, \"myServerOperation\", {serverTag1: \"value\"}, {serverTag2: \"another value\"});\nconst subscriberTransformer = traceCapture(deserializeTraceData(myTracer, requestMetadata));\nreturn subscriberTransformer(serviceImpl.requestStream(serviceRequest));"
    ],
    "see": [
      "https://opentracing-javascript.surge.sh/classes/spancontext.html",
      "https://opentracing.io/",
      "https://opentracing-javascript.surge.sh/classes/tracer.html"
    ],
    "lineNumber": 176,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{function}"
      }
    ],
    "params": [
      {
        "nullable": true,
        "types": [
          "Tracer"
        ],
        "spread": false,
        "optional": false,
        "name": "tracer",
        "description": "an OpenTracing {@link Tracer}"
      },
      {
        "nullable": true,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "an operation name"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "tags",
        "description": "You can pass a collection of tags in the form of a map/Object and have it woven through a Flowable=>Flowable function."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "function"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 431,
    "kind": "function",
    "name": "traceSingle",
    "memberof": "packages/tracing/src/Tracing.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "packages/tracing/src/Tracing.js~traceSingle",
    "access": "public",
    "export": true,
    "importPath": "./packages/tracing/src/Tracing.js",
    "importStyle": "{traceSingle}",
    "description": "Allows propagation of a {@link SpanContext} map through a Flowable.",
    "examples": [
      "<caption>Wraps default tags \"tag1\" and \"tag2\" and picks up \"additionalTag1\" and \"additionalTag2\":</caption>\nconst traceCapture = trace(myTracer, \"myOperation\", {tag1: \"value\"}, {tag2: \"another value\"});\n\n... more code ...\n\nconst subscriberTransformer = traceCapture({additionalTag1: 1, additionalTag2: \"two\"});\n\nsubscriberTransformer(rsocket.requestStream(serviceRequest))\n.subscribe({ ... });"
    ],
    "see": [
      "https://opentracing-javascript.surge.sh/classes/spancontext.html",
      "https://opentracing.io/",
      "https://opentracing-javascript.surge.sh/classes/tracer.html"
    ],
    "lineNumber": 211,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{function}"
      }
    ],
    "params": [
      {
        "nullable": true,
        "types": [
          "Tracer"
        ],
        "spread": false,
        "optional": false,
        "name": "tracer",
        "description": "an OpenTracing {@link Tracer}"
      },
      {
        "nullable": true,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "an operation name"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "tags",
        "description": "You can pass a collection of tags in the form of a map/Object and have it woven through a Single=>Single function."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "function"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 432,
    "kind": "function",
    "name": "traceSingleAsChild",
    "memberof": "packages/tracing/src/Tracing.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "packages/tracing/src/Tracing.js~traceSingleAsChild",
    "access": "public",
    "export": true,
    "importPath": "./packages/tracing/src/Tracing.js",
    "importStyle": "{traceSingleAsChild}",
    "description": "Similar to {@link traceSingle}, except meant to be used on the server side\nwhere a {@link SpanContext} has been passed from a client.",
    "examples": [
      "const traceCapture = traceAsChild(myTracer, \"myServerOperation\", {serverTag1: \"value\"}, {serverTag2: \"another value\"});\nconst subscriberTransformer = traceCapture(deserializeTraceData(myTracer, requestMetadata));\nreturn subscriberTransformer(serviceImpl.requestStream(serviceRequest));"
    ],
    "see": [
      "https://opentracing-javascript.surge.sh/classes/spancontext.html",
      "https://opentracing.io/",
      "https://opentracing-javascript.surge.sh/classes/tracer.html"
    ],
    "lineNumber": 238,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{function}"
      }
    ],
    "params": [
      {
        "nullable": true,
        "types": [
          "Tracer"
        ],
        "spread": false,
        "optional": false,
        "name": "tracer",
        "description": "an OpenTracing {@link Tracer}"
      },
      {
        "nullable": true,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "an operation name"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "tags",
        "description": "You can pass a collection of tags in the form of a map/Object and have it woven through a Single=>Single function."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "function"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 433,
    "kind": "file",
    "name": "packages/tracing/src/__tests__/Tracing-test.js",
    "content": "import {expect} from 'chai';\nimport {describe, it} from 'mocha';\n\nimport {mapToBuffer, bufferToMap} from '../Tracing';\n\nfunction generateMap() {\n  const size = Math.floor(Math.random() * 100) + 20;\n  const map = {};\n  for (var i = 0; i < size; i++) {\n    const key = generateString(5, 20);\n    const value = generateString(10, 50);\n    map[key] = value;\n  }\n  return map;\n}\n\nfunction generateString(min, max) {\n  const size = Math.floor(Math.random() * max) + min;\n  let nextWord = '';\n  for (var j = 0; j < size; j++) {\n    nextWord += generateChar();\n  }\n  return nextWord;\n}\n\nconst chars = 'abcdefghijklmnopqrstuvwxyABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';\nconst generateChar = () => chars[Math.floor(Math.random() * chars.length)];\n\n/**\n * @test {Tracing}\n */\ndescribe('TRACING HELPERS', () => {\n  it('serializes and deserializes an arbitrary map', () => {\n    for (var i = 0; i < 1000; i++) {\n      const baseMap = generateMap();\n      const buf = mapToBuffer(baseMap);\n      const newBuf = Buffer.from(buf);\n      const testMap = bufferToMap(newBuf);\n      expect(testMap).to.deep.equal(baseMap);\n    }\n  });\n});\n",
    "static": true,
    "longname": "/home/dgross/Netifi/rsocket-rpc-js/rsocket-rpc-js/packages/tracing/src/__tests__/Tracing-test.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 434,
    "kind": "function",
    "name": "generateMap",
    "memberof": "packages/tracing/src/__tests__/Tracing-test.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "packages/tracing/src/__tests__/Tracing-test.js~generateMap",
    "access": "public",
    "export": false,
    "importPath": "./packages/tracing/src/__tests__/Tracing-test.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 435,
    "kind": "function",
    "name": "generateString",
    "memberof": "packages/tracing/src/__tests__/Tracing-test.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "packages/tracing/src/__tests__/Tracing-test.js~generateString",
    "access": "public",
    "export": false,
    "importPath": "./packages/tracing/src/__tests__/Tracing-test.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "params": [
      {
        "name": "min",
        "types": [
          "*"
        ]
      },
      {
        "name": "max",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 436,
    "kind": "variable",
    "name": "chars",
    "memberof": "packages/tracing/src/__tests__/Tracing-test.js",
    "static": true,
    "longname": "packages/tracing/src/__tests__/Tracing-test.js~chars",
    "access": "public",
    "export": false,
    "importPath": "./packages/tracing/src/__tests__/Tracing-test.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 26,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 437,
    "kind": "function",
    "name": "generateChar",
    "memberof": "packages/tracing/src/__tests__/Tracing-test.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "packages/tracing/src/__tests__/Tracing-test.js~generateChar",
    "access": "public",
    "export": false,
    "importPath": "./packages/tracing/src/__tests__/Tracing-test.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 27,
    "undocument": true,
    "params": [],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 438,
    "kind": "file",
    "name": "packages/tracing/src/index.js",
    "content": "/**\n * @name rsocket-rpc-js/packages/tracing\n * @fileoverview Exports the Tracing package.\n * @copyright Copyright (c) 2017-present, Netifi Inc.\n * @license Apache-2.0\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @flow\n *\n * @requires Tracing\n * @exports trace\n * @exports traceAsChild\n * @exports traceSingle\n * @exports traceSingleAsChild\n * @exports mapToBuffer\n * @exports deserializeTraceData\n * @exports bufferToMap\n */\n\n'use strict';\n\nimport {\n  trace,\n  traceAsChild,\n  traceSingle,\n  traceSingleAsChild,\n  mapToBuffer,\n  deserializeTraceData,\n  bufferToMap,\n} from './Tracing';\n\nexport {\n  trace,\n  traceAsChild,\n  traceSingle,\n  traceSingleAsChild,\n  mapToBuffer,\n  deserializeTraceData,\n  bufferToMap,\n};\n",
    "static": true,
    "longname": "/home/dgross/Netifi/rsocket-rpc-js/rsocket-rpc-js/packages/tracing/src/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "kind": "index",
    "content": "# RSocket JavaScript RPC\n\n<a href='https://travis-ci.org/netifi/rsocket-rpc'><img src='https://travis-ci.org/netifi/rsocket-rpc.svg?branch=master'></a>\n\n## Documentation\n\n### Core\n\nThe primary class/entry point for the core package is the RpcClient. The client encapsulates the RSocket methods of `fireAndForget`, `requestResponse`, `requestStream`, and `requestChannel` and merges them with a bidirectional connection, allowing seamless use of RSocket for RPC.\n\nThe input config has this flow-type signature\n\n```angular2html\nClientConfig<D, M> = {|\n  serializers?: PayloadSerializers<D, M>,\n  setup: {|\n    keepAlive: number,\n    lifetime: number,\n    metadata?: Encodable,\n  |},\n  transport: DuplexConnection,\n  responder?: Responder<D, M>,\n|}\n```\n\nSerializers and responder are optional. If the client doesn't intend to receive traffic, there is no need to add a responder. Responder is a type alias for the RSocket API.\n\nThe transport can be any implementation of a DuplexConnection, a common one being WebSockets.\n\nRpcClient's `connect(): Single<ReactiveSocket<D, M>>` method starts the asynchronous process of obtaining a handle to an open RSocket connection and moving through additional business logic.\n\nHere is an example instantiation of an RpcClient\n\n```angular2html\n  const local = 'ws://localhost:8088/';\n  const keepAlive = 60000 /* 60s in ms */;\n  const lifetime = 360000 /* 360s in ms */;\n  const transport = new RSocketWebsocketClient({url:local}, BufferEncoders);\n  const client = new RpcClient({setup:{keepAlive, lifetime}, transport});\n  client.connect().subscribe({\n    onComplete: rsocket => {\n      console.info(\"Success! We have a handle to an RSocket connection\");\n    },\n    onError: error => {\n      console.error(\"Failed to connect to local RSocket server.\", error);\n    }\n  });\n```\n\n### Frames\n\nThe Frames package provides methods for encoding and reading Payload metadata\n\n```angular2html\nencodeMetadata(\n  service: string,\n  method: string,\n  tracing: Encodable,\n  metadata: Encodable,\n): Buffer\n```\n\nClients are encouraged to use the `encodeMetadata` method to send well defined call-routing metadata with their Payloads. On the receiving end, the call router can use the other helper methods to route the call and capture/propagate tracing information.\n\n```angular2html\ngetVersion(buffer: Buffer): number\n```\n\n```\ngetService(buffer: Buffer): string\n```\n\n```\ngetMethod(buffer: Buffer): string\n```\n\n```\ngetTracing(buffer: Buffer): Buffer\n```\n\n### Tracing\n\nRSocket RPC provides helpers to inject Open Tracing implementations via helper methods.\n\n```\ntrace<T>(\n  tracer?: Tracer,\n  name?: String,\n  ...tags: Object\n): Object => (Flowable<T>) => Flowable<T>\n```\n\nTrace takes an Open Tracing `Tracer`, an operation name, and optional tags. The result is a function that allows propagation of a SpanContext map through a Flowable. One can pass a collection of tags in the form of a map/Object and have it woven through a Flowable => Flowable function. Here's an example\n\n```angular2html\nconst traceCapture = trace(myTracer, \"myOperation\", {tag1: \"value\"}, {tag2: \"another value\"});\n\n... more code ...\n\nconst subscriberTransformer = traceCapture({additionalTag1: 1, additionalTag2: \"two\"});\n\nsubscriberTransformer(rsocket.requestStream(serviceRequest))\n.subscribe({\n    ...\n});\n```\n\nThis wraps our default tags `tag1` and `tag2`, further picks up `additonalTag1` and `additionalTag2` as we progress through our business logic.\n\nWe then pass that the resulting `Flowable` from doing a `requestStream` and the Tracer will capture tracing events from the Stream.\n\n\n```\ntraceAsChild<T>(\n  tracer?: Tracer,\n  name?: String,\n  ...tags: Object\n): SpanContext => (Flowable<T>) => Flowable<T>\n```\n\nThis method is the same as above except intended to be used on the server side where a SpanContext has been passed from a client. The helper method below to `deserializeTraceData` should be used on the Payload metadata to extract the starter SpanContext\n\n```angular2html\nconst traceCapture = traceAsChild(myTracer, \"myServerOperation\", {serverTag1: \"value\"}, {serverTag2: \"another value\"});\n\nconst subscriberTransformer = traceCapture(deserializeTraceData(myTracer, requestMetadata));\n\nreturn subscriberTransformer(serviceImpl.requestStream(serviceRequest));\n```\n\nBelow are equivalent methods for `Single` types, meaning really `requestReply`.\n\n```\ntraceSingle<T>(\n  tracer?: Tracer,\n  name?: String,\n  ...tags: Object\n): Object => (Single<T>) => Single<T> \n```\n\n```angular2html\ntraceSingleAsChild<T>(\n  tracer?: Tracer,\n  name?: String,\n  ...tags: Object\n): SpanContext => (Single<T>) => Single<T>\n```\n\nThese last three are helper methods to make it easier to propagate tracing context.\n\n```angular2html\ndeserializeTraceData(tracer, metadata) : SpanContext\n```\n \n```\nmapToBuffer(map: Object): Buffer \n```\n  \n```\nbufferToMap(buffer: Buffer): Object\n```\n\n\n### Metrics\n\n#### Protobuf File\n\nUnlike the other packages, Metrics is much more sensitive to interoperability and/or doesn't have an open standard like Open Tracing on which to hang its hat. As such, we include a protobuf file that defines the structure of metrics data and required services. This is found in `metrics/idl/proto/metrics.proto`\n\nTo build the relevant types from source, run `yarn install && yarn protoc`\n\n#### Basic Use\nThe Metrics package exports a few helper methods that will wrap timing metrics automatically around streams.\n\n```\n timed<T>(\n    registry?: IMeterRegistry,\n    name: string,\n    ...tags: Object[]\n  ): (Flowable<T>) => Flowable<T>\n``` \n\n```angular2html\n timedSingle<T>(\n    registry?: IMeterRegistry,\n    name: string,\n    ...tags: Object[]\n  ): (Single<T>) => Single<T>\n``` \n\nSimilar to the Tracing package, these functions return a wrapping function, through which a user weaves their RSocket calls\n\n```angular2html\n  const metricsWrapper = timed(myMeterRegistry, \"my.function.name\", {tag1: \"tag\"}, {anotherTag: \"again\"});\n  const responseStream = rsocket.requestStream(requestPayload);\n  metricsWrapper(responseStream).subscribe(...);\n```\n\n```angular2html\n  const metricsWrapper = timedSingle(myMeterRegistry, \"my.function.name\", {tag1: \"tag\"}, {anotherTag: \"again\"});\n  const responseFuture = rsocket.requestResponse(requestPayload);\n  metricsWrapper(responseFuture).subscribe(...);\n```\n\nBoth functions take a IMeterRegistry which has flow-type\n\n```angular2html\ninterface IMeterRegistry {\n  registerMeter(meter: IMeter): void;\n  registerMeters(meters: IMeter[]): void;\n  meters(): IMeter[];\n}\n```\n\nThis essentially represents any container class that can store handles to Meters and deliver them as a collection. The Package includes a default implementation in `SimpleMeterRegistry`.\n\n\n#### Meters\n\nThe Metrics package provides 2 implementations of IMeter: `Counter` and `Timer`. They both implement this interface:\n\n```angular2html\ninterface IMeter {\n  name: string;\n  description: ?string;\n  statistic: string;\n  type: string;\n  tags: RawMeterTag[];\n  units?: string;\n  rates(): Object;\n  convert(converter: (IMeter) => Meter[]): Meter[];\n}\n```\n\nThe `timed` helper methods automatically wrap timing and counting metrics around significant `Flowable` and `Single` events. Additional metrics may be added ad hoc and registered with the IMeterRegistry.\n\n#### Exporting Metrics\n\nShould the user also have an RSocket based Metrics sink, we provide an RSocket native metrics source in `MetricsExporter`.\n\nThe `MetricsExporter` constructor has these inputs\n\n```angular2html\nMetricsExporter{\n \n  constructor(\n    handler: MetricsSnapshotHandlerClient,\n    registry: IMeterRegistry,\n    exportPeriodSeconds: number,\n    batchSize: number,\n  ),\n  \n  start(), // Open channel and begin sending metrics\n  \n  stop() // Stop sending metrics\n  \n}\n``` \n\nThe `MetricsSnapshotHandlerClient` is defined in the metrics protobuf file. It has one method of note\n\n```\nrpc StreamMetrics (stream MetricsSnapshot) returns (stream Skew)\n``` \n\nMeaning we open a channel and push `MetricsSnapshot`s and receive time `Skew`s from the server as it notices our clocks are out of sync. The `MetricsExporter` takes this as a metrics sink, the `IMeterRegistry` as the metrics source, and the windowing parameters in the time period or batch size.\n\n### Tying It All Together\n\nAssume we have an RSocket server that supports WebSockets on `localhost`. We have an RSocket-based service client called MyServiceClient. We want to capture tracing and metrics data. In real code, we would likely encapsulate that within the MyServiceClient, but for demonstration purposes we will make everything very explicit.\n\n```angular2html\nconst {RequestHandlingRSocket,\n       RpcClient} = require('rsocket-rpc-core');\nconst Tracing = require('rsocket-rpc-tracing');\nconst {Metrics,\n       SimpleMeterRegistry, \n       MetricsExporter, \n       MetricsSnapshotHandlerClient} = require('rsocket-rpc-metrics');\n\n// Create our Open Tracing tracer for use later\nconst myTracer = new MyCompliantTracer();\n\n// Connection info for our RSocket Client\nconst local = 'ws://localhost:8088/';\nconst keepAlive = 60000 /* 60s in ms */;\nconst lifetime = 360000 /* 360s in ms */;\nconst transport = new RSocketWebsocketClient({url:local}, BufferEncoders);\nconst responder = new RequestHandlingRSocket(); // Will address this at the end\nconst rsocketClient = new RpcClient({setup:{keepAlive, lifetime}, transport, responder});\n\n// We need a few references declared ahead of an rsocket being available \nconst meters = new SimpleMeterRegistry();\nlet snapshotClient = null; // Will initialize shortly\nlet metricsExporter = null; // Will initialize shortly\n\nlet myServiceClient = null; // Will initialize shortly\n\nrsocketClient.connect().subscribe({\n    onComplete: rsocket => {\n      myServiceClient = new MyServiceClient(rsocket);\n      \n      snapshotClient = new MetricsSnapshotHandlerClient(rsocket);\n      metricsExporter = new MetricsExporter(snapshotClient, meters, 60 /*seconds*/, 1024 /*metrics count*/);\n      metricsExporter.start();\n    },\n    onError: error => {\n      console.error(\"Failed to connect to local RSocket server.\", error);\n    }\n});\n\n\n... Later in our business logic ...\n\n// Set up our traced, metrics-captured calls\nconst streamMetricsWrapper = Metrics.timed(meters, \"myService.dataStream\", {timezone: \"GMT-7\"});\nconst requestResponseMetricsWrapper = Metrics.timedSingle(meters, \"myService.fetchDatum\", {timezone: \"GMT-7\"});\n\nconst streamTracing = Tracing.trace(myTracer, \"myService.dataStream\", {clientType: \"Chrome Browser\"});\nconst requestResponseTracing = Tracing.trace.Single(myTracer, \"myService.fetchDatum\", {clientType: \"Chrome Browser\"});\n\n... Later still, our User does something of interest ...\n\n\nconst tracingTags = {uiContextId: 12345, focusedItem: 9876};\n\nconst tracedTimedRequestResponse = requestResponseTracing(tracingTags) // We've closed over the tracing tags, now Single => Single\n(requestResponseMetricsWrapper( //This wrapper's signature is Single => Single\n        myServiceClient.fetchDatum(new DatumRequest()) // This method returns a Single\n    ) // We've now wrapped the original call in metrics\n); // We've now wrapped the metrics-captured call in tracing\n\ntracedTimedRequestResponse.subscribe({\n    // Issues the request and do our business logic onComplete\n});\n\n// And we would do the same for a streaming method\n\nconst tracedTimedStream = streamTracing(tracingTags) // We've closed over the tracing tags, now Flowable => Flowable\n(streamMetricsWrapper( //This wrapper's signature is Flowable => Flowable\n        myServiceClient.dataStream(new StreamRequest()) // This method returns a Flowable\n    ) // We've now wrapped the original call in metrics\n); // We've now wrapped the metrics-captured call in tracing\n\ntracedTimedStream.subscribe({\n    // Issues the request and do our business logic onNext/onComplete\n});\n\n```\n\n#### Wiring up the Responder\n\nAt the beginning, we added a canned Responder class from the Core package, `RequestHandlingRSocket`. It takes for granted that callers are using the Metadata helpers to package metadata about the service calls in question.\n\nIts relevant method is\n\n```angular2html\naddService(service: string, handler: Responder<Buffer, Buffer>)\n```\n\nAside from this, it implements (and delegates) the RSocket methods to handling services. Responder is an alias for this that implies that it will have those methods invoked by a remote caller rather than act as a local caller to a remote callee.\n\nIn our example, let's add a responder to our client that provides a method for a remote caller to inject config updates.\n\n```angular2html\n\nconst configUpdater = {\n    fireAndForget: function(){\n        //Not supported but has no expected return\n    },\n    requestStream: function(payload){\n        return Flowable.error(\"requestStream is not supported\");\n    },\n    requestChannel: function(payloads){\n        return Flowable.error(\"requestStream is not supported\");\n    },\n    requestResponse: function(payload){\n        const newConfig = deserializeConfig(payload.data);\n        // apply new config;\n        return Single.of(\"OK\");\n    }\n}\n\nresponder.addService(\"example.rsocket.configUpdater\", configUpdater);\n```\n\nAnd now our RpcClient will also respond to requests from the server to update its configuration that are directed to the service \"example.rsocket.configUpdater\".\n\nWe can also add tracing and metrics here though again, in Production code this would all be encapsulated in service/client implementations but for demo purposes we're doing it inline and explicitly.\n\n```angular2html\nconst serviceMetricsWrapper = Metrics.timedSingle(meters, \"myClient.updateConfig\", {timezone: \"GMT-7\"});\n\nconst serviceTracing = Tracing.traceSingleAsChild(myTracer, \"myClient.updateConfig\", {clientType: \"Chrome Browser\"});\n\nconst configUpdater = {\n    fireAndForget: function(){\n        //Not supported but has no expected return\n    },\n    requestStream: function(payload){\n        return Flowable.error(\"requestStream is not supported\");\n    },\n    requestChannel: function(payloads){\n        return Flowable.error(\"requestStream is not supported\");\n    },\n    requestResponse: function(payload){\n        const spanContext = Tracing.deserializeTraceData(myTracer, payload.metadata);\n        return serviceTracing(spanContext) // We've closed over the tracing span context, now Single => Single\n        (serviceMetricsWrapper( //This wrapper's signature is Single => Single\n                new Single(subscriber => {\n                    subscriber.onSubscribe();\n                    const newConfig = deserializeConfig(payload.data);                    \n                    // apply new config;\n                    subscriber.onComplete(\"OK\");\n                })\n            ) // We've now wrapped the original call in metrics\n        );\n    }\n}\n```\n\nLet's break this down because it's hard to follow at first.\n\n* We are extracting the span context from the caller, if any, with the `deserializeTraceData` method\n* We feed this into the `traceSingleAsChild` method which captures the span context and will weave it through a `Single` (its signature is Single => Single)\n* We further use the Metrics wrapping method `timedSingle` to weave timing and count metrics through a `Single` (signature also Single => Single))\n* And finally, we create a new Single inline that has the same logic as before, only it waits for a subscriber (meaning call to `subscribe`) to do anything so that we can start our metrics timing and trace on-demand from the caller.\n\nAnd with that, we have an RpcClient that can make and serve instrumented calls over the same RSocket.\n\n## Bugs and Feedback\n\nFor bugs, questions, and discussions please use the [Github Issues](https://github.com/netifi/rsocket-rpc/issues).\n\n## License\nCopyright 2017 Netifi Inc.\n\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at\n\nhttp://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.\n",
    "longname": "/home/dgross/Netifi/rsocket-rpc-js/rsocket-rpc-js/README.md",
    "name": "./README.md",
    "static": true,
    "access": "public"
  },
  {
    "kind": "packageJSON",
    "content": "{\n  \"private\": true,\n  \"workspaces\": [\n    \"packages/*\"\n  ],\n  \"options\": {\n    \"mocha\": \"--full-trace --require resources/mochaBootload packages/*/src/**/__tests__/**/*-test.js\",\n    \"mocha_tdd\": \"--full-trace --watch --require resources/mochaBootload packages/*/src/**/__tests__/**/*-test.js\"\n  },\n  \"scripts\": {\n    \"test\": \"npm run lint && npm run pretty-check && npm run testonly && npm run check\",\n    \"testonly\": \"lerna run build && babel-node ./node_modules/.bin/_mocha $npm_package_options_mocha\",\n    \"t\": \"npm run testonly\",\n    \"lint\": \"eslint packages/**/src || (printf '\\\\033[33mTry: \\\\033[7m npm run lint -- --fix \\\\033[0m\\\\n' && exit 1)\",\n    \"lint-check\": \"eslint --print-config .eslintrc.js | eslint-config-prettier-check\",\n    \"check\": \"flow check --show-all-errors\",\n    \"prepublish\": \"node resources/prepublish.js\",\n    \"pretty\": \"node resources/pretty.js\",\n    \"pretty-check\": \"node resources/pretty.js --check\",\n    \"protoc\": \"lerna run protoc\",\n    \"esdoc\": \"./node_modules/.bin/esdoc\"\n  },\n  \"resolutions\": {\n    \"eslint-scope\": \"3.7.1\"\n  },\n  \"devDependencies\": {\n    \"babel-cli\": \"6.26.0\",\n    \"babel-eslint\": \"8.1.2\",\n    \"babel-plugin-check-es2015-constants\": \"6.22.0\",\n    \"babel-plugin-syntax-async-functions\": \"6.13.0\",\n    \"babel-plugin-transform-class-properties\": \"6.24.1\",\n    \"babel-plugin-transform-es2015-arrow-functions\": \"6.22.0\",\n    \"babel-plugin-transform-es2015-block-scoped-functions\": \"6.22.0\",\n    \"babel-plugin-transform-es2015-block-scoping\": \"6.26.0\",\n    \"babel-plugin-transform-es2015-classes\": \"6.24.1\",\n    \"babel-plugin-transform-es2015-computed-properties\": \"6.24.1\",\n    \"babel-plugin-transform-es2015-destructuring\": \"6.23.0\",\n    \"babel-plugin-transform-es2015-duplicate-keys\": \"6.24.1\",\n    \"babel-plugin-transform-es2015-function-name\": \"6.24.1\",\n    \"babel-plugin-transform-es2015-literals\": \"6.22.0\",\n    \"babel-plugin-transform-es2015-modules-commonjs\": \"6.26.0\",\n    \"babel-plugin-transform-es2015-object-super\": \"6.24.1\",\n    \"babel-plugin-transform-es2015-parameters\": \"6.24.1\",\n    \"babel-plugin-transform-es2015-shorthand-properties\": \"6.24.1\",\n    \"babel-plugin-transform-es2015-spread\": \"6.22.0\",\n    \"babel-plugin-transform-es2015-template-literals\": \"6.22.0\",\n    \"babel-plugin-transform-flow-strip-types\": \"6.22.0\",\n    \"babel-plugin-transform-object-rest-spread\": \"6.26.0\",\n    \"babel-plugin-transform-regenerator\": \"6.24.1\",\n    \"babel-types\": \"6.26.0\",\n    \"chai\": \"4.1.2\",\n    \"eslint\": \"3.17.1\",\n    \"eslint-config-prettier\": \"^2.3.0\",\n    \"eslint-plugin-babel\": \"4.1.2\",\n    \"eslint-plugin-dependencies\": \"^2.4.0\",\n    \"eslint-plugin-flowtype\": \"2.40.1\",\n    \"eslint-plugin-prefer-object-spread\": \"1.2.1\",\n    \"flow-bin\": \"0.74.0\",\n    \"lerna\": \"^2.11.0\",\n    \"mocha\": \"4.1.0\",\n    \"prettier\": \"^1.5.3\"\n  },\n  \"dependencies\": {\n    \"esdoc\": \"^1.1.0\",\n    \"esdoc-ecmascript-proposal-plugin\": \"^1.0.0\",\n    \"esdoc-flow-plugin\": \"^1.0.0\",\n    \"esdoc-standard-plugin\": \"^1.0.0\"\n  }\n}\n",
    "longname": "/home/dgross/Netifi/rsocket-rpc-js/rsocket-rpc-js/package.json",
    "name": "package.json",
    "static": true,
    "access": "public"
  }
]