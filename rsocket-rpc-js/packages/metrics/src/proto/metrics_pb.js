/**
 * @name metrics_pb.js
 * @fileoverview The generated proto.io.rsocket.rpc.metrics code.
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.io.rsocket.rpc.metrics.om.Meter', null, global);
goog.exportSymbol('proto.io.rsocket.rpc.metrics.om.MeterId', null, global);
goog.exportSymbol('proto.io.rsocket.rpc.metrics.om.MeterMeasurement', null, global);
goog.exportSymbol('proto.io.rsocket.rpc.metrics.om.MeterStatistic', null, global);
goog.exportSymbol('proto.io.rsocket.rpc.metrics.om.MeterTag', null, global);
goog.exportSymbol('proto.io.rsocket.rpc.metrics.om.MeterType', null, global);
goog.exportSymbol('proto.io.rsocket.rpc.metrics.om.MetricsSnapshot', null, global);
goog.exportSymbol('proto.io.rsocket.rpc.metrics.om.Skew', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.io.rsocket.rpc.metrics.om.MeterTag = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.io.rsocket.rpc.metrics.om.MeterTag, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.io.rsocket.rpc.metrics.om.MeterTag.displayName = 'proto.io.rsocket.rpc.metrics.om.MeterTag';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.io.rsocket.rpc.metrics.om.MeterTag.prototype.toObject = function(opt_includeInstance) {
  return proto.io.rsocket.rpc.metrics.om.MeterTag.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.io.rsocket.rpc.metrics.om.MeterTag} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.rsocket.rpc.metrics.om.MeterTag.toObject = function(includeInstance, msg) {
  var f, obj = {
    key: jspb.Message.getFieldWithDefault(msg, 1, ""),
    value: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.io.rsocket.rpc.metrics.om.MeterTag}
 */
proto.io.rsocket.rpc.metrics.om.MeterTag.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.io.rsocket.rpc.metrics.om.MeterTag;
  return proto.io.rsocket.rpc.metrics.om.MeterTag.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.io.rsocket.rpc.metrics.om.MeterTag} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.io.rsocket.rpc.metrics.om.MeterTag}
 */
proto.io.rsocket.rpc.metrics.om.MeterTag.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setKey(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.io.rsocket.rpc.metrics.om.MeterTag.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.io.rsocket.rpc.metrics.om.MeterTag.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.io.rsocket.rpc.metrics.om.MeterTag} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.rsocket.rpc.metrics.om.MeterTag.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKey();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getValue();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string key = 1;
 * @return {string}
 */
proto.io.rsocket.rpc.metrics.om.MeterTag.prototype.getKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.io.rsocket.rpc.metrics.om.MeterTag.prototype.setKey = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string value = 2;
 * @return {string}
 */
proto.io.rsocket.rpc.metrics.om.MeterTag.prototype.getValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.io.rsocket.rpc.metrics.om.MeterTag.prototype.setValue = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.io.rsocket.rpc.metrics.om.MeterId = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.io.rsocket.rpc.metrics.om.MeterId.repeatedFields_, null);
};
goog.inherits(proto.io.rsocket.rpc.metrics.om.MeterId, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.io.rsocket.rpc.metrics.om.MeterId.displayName = 'proto.io.rsocket.rpc.metrics.om.MeterId';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.io.rsocket.rpc.metrics.om.MeterId.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.io.rsocket.rpc.metrics.om.MeterId.prototype.toObject = function(opt_includeInstance) {
  return proto.io.rsocket.rpc.metrics.om.MeterId.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.io.rsocket.rpc.metrics.om.MeterId} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.rsocket.rpc.metrics.om.MeterId.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    tagList: jspb.Message.toObjectList(msg.getTagList(),
    proto.io.rsocket.rpc.metrics.om.MeterTag.toObject, includeInstance),
    type: jspb.Message.getFieldWithDefault(msg, 3, 0),
    description: jspb.Message.getFieldWithDefault(msg, 4, ""),
    baseunit: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.io.rsocket.rpc.metrics.om.MeterId}
 */
proto.io.rsocket.rpc.metrics.om.MeterId.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.io.rsocket.rpc.metrics.om.MeterId;
  return proto.io.rsocket.rpc.metrics.om.MeterId.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.io.rsocket.rpc.metrics.om.MeterId} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.io.rsocket.rpc.metrics.om.MeterId}
 */
proto.io.rsocket.rpc.metrics.om.MeterId.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = new proto.io.rsocket.rpc.metrics.om.MeterTag;
      reader.readMessage(value,proto.io.rsocket.rpc.metrics.om.MeterTag.deserializeBinaryFromReader);
      msg.addTag(value);
      break;
    case 3:
      var value = /** @type {!proto.io.rsocket.rpc.metrics.om.MeterType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setBaseunit(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.io.rsocket.rpc.metrics.om.MeterId.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.io.rsocket.rpc.metrics.om.MeterId.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.io.rsocket.rpc.metrics.om.MeterId} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.rsocket.rpc.metrics.om.MeterId.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTagList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.io.rsocket.rpc.metrics.om.MeterTag.serializeBinaryToWriter
    );
  }
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getBaseunit();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.io.rsocket.rpc.metrics.om.MeterId.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.io.rsocket.rpc.metrics.om.MeterId.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated MeterTag tag = 2;
 * @return {!Array<!proto.io.rsocket.rpc.metrics.om.MeterTag>}
 */
proto.io.rsocket.rpc.metrics.om.MeterId.prototype.getTagList = function() {
  return /** @type{!Array<!proto.io.rsocket.rpc.metrics.om.MeterTag>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.io.rsocket.rpc.metrics.om.MeterTag, 2));
};


/** @param {!Array<!proto.io.rsocket.rpc.metrics.om.MeterTag>} value */
proto.io.rsocket.rpc.metrics.om.MeterId.prototype.setTagList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.io.rsocket.rpc.metrics.om.MeterTag=} opt_value
 * @param {number=} opt_index
 * @return {!proto.io.rsocket.rpc.metrics.om.MeterTag}
 */
proto.io.rsocket.rpc.metrics.om.MeterId.prototype.addTag = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.io.rsocket.rpc.metrics.om.MeterTag, opt_index);
};


proto.io.rsocket.rpc.metrics.om.MeterId.prototype.clearTagList = function() {
  this.setTagList([]);
};


/**
 * optional MeterType type = 3;
 * @return {!proto.io.rsocket.rpc.metrics.om.MeterType}
 */
proto.io.rsocket.rpc.metrics.om.MeterId.prototype.getType = function() {
  return /** @type {!proto.io.rsocket.rpc.metrics.om.MeterType} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {!proto.io.rsocket.rpc.metrics.om.MeterType} value */
proto.io.rsocket.rpc.metrics.om.MeterId.prototype.setType = function(value) {
  jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional string description = 4;
 * @return {string}
 */
proto.io.rsocket.rpc.metrics.om.MeterId.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.io.rsocket.rpc.metrics.om.MeterId.prototype.setDescription = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string baseUnit = 5;
 * @return {string}
 */
proto.io.rsocket.rpc.metrics.om.MeterId.prototype.getBaseunit = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.io.rsocket.rpc.metrics.om.MeterId.prototype.setBaseunit = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.io.rsocket.rpc.metrics.om.MeterMeasurement = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.io.rsocket.rpc.metrics.om.MeterMeasurement, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.io.rsocket.rpc.metrics.om.MeterMeasurement.displayName = 'proto.io.rsocket.rpc.metrics.om.MeterMeasurement';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.io.rsocket.rpc.metrics.om.MeterMeasurement.prototype.toObject = function(opt_includeInstance) {
  return proto.io.rsocket.rpc.metrics.om.MeterMeasurement.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.io.rsocket.rpc.metrics.om.MeterMeasurement} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.rsocket.rpc.metrics.om.MeterMeasurement.toObject = function(includeInstance, msg) {
  var f, obj = {
    value: +jspb.Message.getFieldWithDefault(msg, 1, 0.0),
    statistic: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.io.rsocket.rpc.metrics.om.MeterMeasurement}
 */
proto.io.rsocket.rpc.metrics.om.MeterMeasurement.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.io.rsocket.rpc.metrics.om.MeterMeasurement;
  return proto.io.rsocket.rpc.metrics.om.MeterMeasurement.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.io.rsocket.rpc.metrics.om.MeterMeasurement} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.io.rsocket.rpc.metrics.om.MeterMeasurement}
 */
proto.io.rsocket.rpc.metrics.om.MeterMeasurement.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setValue(value);
      break;
    case 2:
      var value = /** @type {!proto.io.rsocket.rpc.metrics.om.MeterStatistic} */ (reader.readEnum());
      msg.setStatistic(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.io.rsocket.rpc.metrics.om.MeterMeasurement.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.io.rsocket.rpc.metrics.om.MeterMeasurement.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.io.rsocket.rpc.metrics.om.MeterMeasurement} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.rsocket.rpc.metrics.om.MeterMeasurement.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValue();
  if (f !== 0.0) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = message.getStatistic();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * optional double value = 1;
 * @return {number}
 */
proto.io.rsocket.rpc.metrics.om.MeterMeasurement.prototype.getValue = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 1, 0.0));
};


/** @param {number} value */
proto.io.rsocket.rpc.metrics.om.MeterMeasurement.prototype.setValue = function(value) {
  jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional MeterStatistic statistic = 2;
 * @return {!proto.io.rsocket.rpc.metrics.om.MeterStatistic}
 */
proto.io.rsocket.rpc.metrics.om.MeterMeasurement.prototype.getStatistic = function() {
  return /** @type {!proto.io.rsocket.rpc.metrics.om.MeterStatistic} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.io.rsocket.rpc.metrics.om.MeterStatistic} value */
proto.io.rsocket.rpc.metrics.om.MeterMeasurement.prototype.setStatistic = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.io.rsocket.rpc.metrics.om.Meter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.io.rsocket.rpc.metrics.om.Meter.repeatedFields_, null);
};
goog.inherits(proto.io.rsocket.rpc.metrics.om.Meter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.io.rsocket.rpc.metrics.om.Meter.displayName = 'proto.io.rsocket.rpc.metrics.om.Meter';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.io.rsocket.rpc.metrics.om.Meter.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.io.rsocket.rpc.metrics.om.Meter.prototype.toObject = function(opt_includeInstance) {
  return proto.io.rsocket.rpc.metrics.om.Meter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.io.rsocket.rpc.metrics.om.Meter} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.rsocket.rpc.metrics.om.Meter.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: (f = msg.getId()) && proto.io.rsocket.rpc.metrics.om.MeterId.toObject(includeInstance, f),
    measureList: jspb.Message.toObjectList(msg.getMeasureList(),
    proto.io.rsocket.rpc.metrics.om.MeterMeasurement.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.io.rsocket.rpc.metrics.om.Meter}
 */
proto.io.rsocket.rpc.metrics.om.Meter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.io.rsocket.rpc.metrics.om.Meter;
  return proto.io.rsocket.rpc.metrics.om.Meter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.io.rsocket.rpc.metrics.om.Meter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.io.rsocket.rpc.metrics.om.Meter}
 */
proto.io.rsocket.rpc.metrics.om.Meter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.io.rsocket.rpc.metrics.om.MeterId;
      reader.readMessage(value,proto.io.rsocket.rpc.metrics.om.MeterId.deserializeBinaryFromReader);
      msg.setId(value);
      break;
    case 2:
      var value = new proto.io.rsocket.rpc.metrics.om.MeterMeasurement;
      reader.readMessage(value,proto.io.rsocket.rpc.metrics.om.MeterMeasurement.deserializeBinaryFromReader);
      msg.addMeasure(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.io.rsocket.rpc.metrics.om.Meter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.io.rsocket.rpc.metrics.om.Meter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.io.rsocket.rpc.metrics.om.Meter} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.rsocket.rpc.metrics.om.Meter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.io.rsocket.rpc.metrics.om.MeterId.serializeBinaryToWriter
    );
  }
  f = message.getMeasureList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.io.rsocket.rpc.metrics.om.MeterMeasurement.serializeBinaryToWriter
    );
  }
};


/**
 * optional MeterId id = 1;
 * @return {?proto.io.rsocket.rpc.metrics.om.MeterId}
 */
proto.io.rsocket.rpc.metrics.om.Meter.prototype.getId = function() {
  return /** @type{?proto.io.rsocket.rpc.metrics.om.MeterId} */ (
    jspb.Message.getWrapperField(this, proto.io.rsocket.rpc.metrics.om.MeterId, 1));
};


/** @param {?proto.io.rsocket.rpc.metrics.om.MeterId|undefined} value */
proto.io.rsocket.rpc.metrics.om.Meter.prototype.setId = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.io.rsocket.rpc.metrics.om.Meter.prototype.clearId = function() {
  this.setId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.io.rsocket.rpc.metrics.om.Meter.prototype.hasId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated MeterMeasurement measure = 2;
 * @return {!Array<!proto.io.rsocket.rpc.metrics.om.MeterMeasurement>}
 */
proto.io.rsocket.rpc.metrics.om.Meter.prototype.getMeasureList = function() {
  return /** @type{!Array<!proto.io.rsocket.rpc.metrics.om.MeterMeasurement>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.io.rsocket.rpc.metrics.om.MeterMeasurement, 2));
};


/** @param {!Array<!proto.io.rsocket.rpc.metrics.om.MeterMeasurement>} value */
proto.io.rsocket.rpc.metrics.om.Meter.prototype.setMeasureList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.io.rsocket.rpc.metrics.om.MeterMeasurement=} opt_value
 * @param {number=} opt_index
 * @return {!proto.io.rsocket.rpc.metrics.om.MeterMeasurement}
 */
proto.io.rsocket.rpc.metrics.om.Meter.prototype.addMeasure = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.io.rsocket.rpc.metrics.om.MeterMeasurement, opt_index);
};


proto.io.rsocket.rpc.metrics.om.Meter.prototype.clearMeasureList = function() {
  this.setMeasureList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.io.rsocket.rpc.metrics.om.MetricsSnapshot = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.io.rsocket.rpc.metrics.om.MetricsSnapshot.repeatedFields_, null);
};
goog.inherits(proto.io.rsocket.rpc.metrics.om.MetricsSnapshot, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.io.rsocket.rpc.metrics.om.MetricsSnapshot.displayName = 'proto.io.rsocket.rpc.metrics.om.MetricsSnapshot';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.io.rsocket.rpc.metrics.om.MetricsSnapshot.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.io.rsocket.rpc.metrics.om.MetricsSnapshot.prototype.toObject = function(opt_includeInstance) {
  return proto.io.rsocket.rpc.metrics.om.MetricsSnapshot.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.io.rsocket.rpc.metrics.om.MetricsSnapshot} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.rsocket.rpc.metrics.om.MetricsSnapshot.toObject = function(includeInstance, msg) {
  var f, obj = {
    tagsMap: (f = msg.getTagsMap()) ? f.toObject(includeInstance, undefined) : [],
    metersList: jspb.Message.toObjectList(msg.getMetersList(),
    proto.io.rsocket.rpc.metrics.om.Meter.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.io.rsocket.rpc.metrics.om.MetricsSnapshot}
 */
proto.io.rsocket.rpc.metrics.om.MetricsSnapshot.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.io.rsocket.rpc.metrics.om.MetricsSnapshot;
  return proto.io.rsocket.rpc.metrics.om.MetricsSnapshot.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.io.rsocket.rpc.metrics.om.MetricsSnapshot} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.io.rsocket.rpc.metrics.om.MetricsSnapshot}
 */
proto.io.rsocket.rpc.metrics.om.MetricsSnapshot.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = msg.getTagsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "");
         });
      break;
    case 2:
      var value = new proto.io.rsocket.rpc.metrics.om.Meter;
      reader.readMessage(value,proto.io.rsocket.rpc.metrics.om.Meter.deserializeBinaryFromReader);
      msg.addMeters(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.io.rsocket.rpc.metrics.om.MetricsSnapshot.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.io.rsocket.rpc.metrics.om.MetricsSnapshot.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.io.rsocket.rpc.metrics.om.MetricsSnapshot} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.rsocket.rpc.metrics.om.MetricsSnapshot.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTagsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(1, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
  f = message.getMetersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.io.rsocket.rpc.metrics.om.Meter.serializeBinaryToWriter
    );
  }
};


/**
 * map<string, string> tags = 1;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.io.rsocket.rpc.metrics.om.MetricsSnapshot.prototype.getTagsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 1, opt_noLazyCreate,
      null));
};


proto.io.rsocket.rpc.metrics.om.MetricsSnapshot.prototype.clearTagsMap = function() {
  this.getTagsMap().clear();
};


/**
 * repeated Meter meters = 2;
 * @return {!Array<!proto.io.rsocket.rpc.metrics.om.Meter>}
 */
proto.io.rsocket.rpc.metrics.om.MetricsSnapshot.prototype.getMetersList = function() {
  return /** @type{!Array<!proto.io.rsocket.rpc.metrics.om.Meter>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.io.rsocket.rpc.metrics.om.Meter, 2));
};


/** @param {!Array<!proto.io.rsocket.rpc.metrics.om.Meter>} value */
proto.io.rsocket.rpc.metrics.om.MetricsSnapshot.prototype.setMetersList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.io.rsocket.rpc.metrics.om.Meter=} opt_value
 * @param {number=} opt_index
 * @return {!proto.io.rsocket.rpc.metrics.om.Meter}
 */
proto.io.rsocket.rpc.metrics.om.MetricsSnapshot.prototype.addMeters = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.io.rsocket.rpc.metrics.om.Meter, opt_index);
};


proto.io.rsocket.rpc.metrics.om.MetricsSnapshot.prototype.clearMetersList = function() {
  this.setMetersList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.io.rsocket.rpc.metrics.om.Skew = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.io.rsocket.rpc.metrics.om.Skew, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.io.rsocket.rpc.metrics.om.Skew.displayName = 'proto.io.rsocket.rpc.metrics.om.Skew';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.io.rsocket.rpc.metrics.om.Skew.prototype.toObject = function(opt_includeInstance) {
  return proto.io.rsocket.rpc.metrics.om.Skew.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.io.rsocket.rpc.metrics.om.Skew} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.rsocket.rpc.metrics.om.Skew.toObject = function(includeInstance, msg) {
  var f, obj = {
    timestamp: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.io.rsocket.rpc.metrics.om.Skew}
 */
proto.io.rsocket.rpc.metrics.om.Skew.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.io.rsocket.rpc.metrics.om.Skew;
  return proto.io.rsocket.rpc.metrics.om.Skew.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.io.rsocket.rpc.metrics.om.Skew} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.io.rsocket.rpc.metrics.om.Skew}
 */
proto.io.rsocket.rpc.metrics.om.Skew.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTimestamp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.io.rsocket.rpc.metrics.om.Skew.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.io.rsocket.rpc.metrics.om.Skew.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.io.rsocket.rpc.metrics.om.Skew} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.rsocket.rpc.metrics.om.Skew.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTimestamp();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
};


/**
 * optional int64 timestamp = 1;
 * @return {number}
 */
proto.io.rsocket.rpc.metrics.om.Skew.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.io.rsocket.rpc.metrics.om.Skew.prototype.setTimestamp = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * @enum {number}
 */
proto.io.rsocket.rpc.metrics.om.MeterType = {
  COUNTER: 0,
  GAUGE: 1,
  LONG_TASK_TIMER: 2,
  TIMER: 3,
  DISTRIBUTION_SUMMARY: 4,
  OTHER: 5
};

/**
 * @enum {number}
 */
proto.io.rsocket.rpc.metrics.om.MeterStatistic = {
  TOTAL: 0,
  TOTAL_TIME: 1,
  COUNT: 2,
  MAX: 3,
  VALUE: 4,
  UNKNOWN: 5,
  ACTIVE_TASKS: 6,
  DURATION: 7
};

goog.object.extend(exports, proto.io.rsocket.rpc.metrics.om);
